// For Library Version: 1.136.2

declare module "sap/viz/library" {
  export namespace ui5 {
    namespace types {
      namespace controller {
        /**
         * List (Enum) type sap.viz.ui5.types.controller.Interaction_pan_orientation
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.controller.Interaction_pan_orientation'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Interaction_pan_orientation {
          /**
           * Value both
           */
          both = "both",
          /**
           * Value horizontal
           */
          horizontal = "horizontal",
          /**
           * Value vertical
           */
          vertical = "vertical",
        }
        /**
         * List (Enum) type sap.viz.ui5.types.controller.Interaction_selectability_mode
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.controller.Interaction_selectability_mode'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Interaction_selectability_mode {
          /**
           * Value exclusive
           */
          exclusive = "exclusive",
          /**
           * Value inclusive
           */
          inclusive = "inclusive",
          /**
           * Value multiple
           */
          multiple = "multiple",
          /**
           * Value none
           */
          none = "none",
          /**
           * Value single
           */
          single = "single",
        }
      }

      namespace legend {
        /**
         * List (Enum) type sap.viz.ui5.types.legend.Common_alignment
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.legend.Common_alignment'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Common_alignment {
          /**
           * Value end
           */
          end = "end",
          /**
           * Value middle
           */
          middle = "middle",
          /**
           * Value start
           */
          start = "start",
        }
        /**
         * List (Enum) type sap.viz.ui5.types.legend.Common_drawingEffect
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.legend.Common_drawingEffect'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Common_drawingEffect {
          /**
           * Value glossy
           */
          glossy = "glossy",
          /**
           * Value normal
           */
          normal = "normal",
        }
        /**
         * List (Enum) type sap.viz.ui5.types.legend.Common_position
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.legend.Common_position'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Common_position {
          /**
           * Value bottom
           */
          bottom = "bottom",
          /**
           * Value left
           */
          left = "left",
          /**
           * Value right
           */
          right = "right",
          /**
           * Value top
           */
          top = "top",
        }
        /**
         * List (Enum) type sap.viz.ui5.types.legend.Common_type
         *
         * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.legend.Common_type'.
         *
         * @since 1.7.2
         * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
         * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
         * and won't receive new features or improvements, only important bug fixes. They will only remain in the
         * SAPUI5 distribution for backward compatibility.
         *
         * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
         * control to benefit from new charting enhancements and timely support. **
         *
         * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
         * make sure you evaluate it thoroughly before migration.
         * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
         */
        enum Common_type {
          /**
           * Value BubbleColorLegend
           */
          BubbleColorLegend = "BubbleColorLegend",
          /**
           * Value ColorLegend
           */
          ColorLegend = "ColorLegend",
          /**
           * Value MeasureBasedColoringLegend
           */
          MeasureBasedColoringLegend = "MeasureBasedColoringLegend",
          /**
           * Value SizeLegend
           */
          SizeLegend = "SizeLegend",
        }
      }

      /**
       * List (Enum) type sap.viz.ui5.types.Area_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Area_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Area_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Area_marker_shape
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Area_marker_shape'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Area_marker_shape {
        /**
         * Value circle
         */
        circle = "circle",
        /**
         * Value cross
         */
        cross = "cross",
        /**
         * Value diamond
         */
        diamond = "diamond",
        /**
         * Value intersection
         */
        intersection = "intersection",
        /**
         * Value triangleDown
         */
        triangleDown = "triangleDown",
        /**
         * Value triangleLeft
         */
        triangleLeft = "triangleLeft",
        /**
         * Value triangleRight
         */
        triangleRight = "triangleRight",
        /**
         * Value triangleUp
         */
        triangleUp = "triangleUp",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Area_mode
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Area_mode'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Area_mode {
        /**
         * Value comparison
         */
        comparison = "comparison",
        /**
         * Value percentage
         */
        percentage = "percentage",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Area_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Area_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Area_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Axis_gridline_type
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Axis_gridline_type'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Axis_gridline_type {
        /**
         * Value dotted
         */
        dotted = "dotted",
        /**
         * Value incised
         */
        incised = "incised",
        /**
         * Value line
         */
        line = "line",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Axis_label_unitFormatType
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Axis_label_unitFormatType'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Axis_label_unitFormatType {
        /**
         * Value FinancialUnits
         */
        FinancialUnits = "FinancialUnits",
        /**
         * Value MetricUnits
         */
        MetricUnits = "MetricUnits",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Axis_position
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Axis_position'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Axis_position {
        /**
         * Value bottom
         */
        bottom = "bottom",
        /**
         * Value left
         */
        left = "left",
        /**
         * Value right
         */
        right = "right",
        /**
         * Value top
         */
        top = "top",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Axis_type
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Axis_type'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Axis_type {
        /**
         * Value category
         */
        category = "category",
        /**
         * Value timeValue
         */
        timeValue = "timeValue",
        /**
         * Value value
         */
        value = "value",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Background_direction
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Background_direction'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Background_direction {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Background_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Background_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Background_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Bar_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Bar_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Bar_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Bar_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Bar_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Bar_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Bubble_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Bubble_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Bubble_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Bullet_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Bullet_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Bullet_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Bullet_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Bullet_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Bullet_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Combination_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Combination_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Combination_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Combination_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Combination_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Combination_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Datalabel_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Datalabel_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Datalabel_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Datalabel_outsidePosition
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Datalabel_outsidePosition'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Datalabel_outsidePosition {
        /**
         * Value down
         */
        down = "down",
        /**
         * Value left
         */
        left = "left",
        /**
         * Value right
         */
        right = "right",
        /**
         * Value up
         */
        up = "up",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Datalabel_paintingMode
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Datalabel_paintingMode'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Datalabel_paintingMode {
        /**
         * Value polarCoordinate
         */
        polarCoordinate = "polarCoordinate",
        /**
         * Value rectCoordinate
         */
        rectCoordinate = "rectCoordinate",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Datalabel_position
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Datalabel_position'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Datalabel_position {
        /**
         * Value inside
         */
        inside = "inside",
        /**
         * Value outside
         */
        outside = "outside",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Legend_layout_position
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Legend_layout_position'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Legend_layout_position {
        /**
         * Value bottom
         */
        bottom = "bottom",
        /**
         * Value left
         */
        left = "left",
        /**
         * Value right
         */
        right = "right",
        /**
         * Value top
         */
        top = "top",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Line_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Line_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Line_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Line_marker_shape
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Line_marker_shape'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Line_marker_shape {
        /**
         * Value circle
         */
        circle = "circle",
        /**
         * Value cross
         */
        cross = "cross",
        /**
         * Value diamond
         */
        diamond = "diamond",
        /**
         * Value intersection
         */
        intersection = "intersection",
        /**
         * Value triangleDown
         */
        triangleDown = "triangleDown",
        /**
         * Value triangleLeft
         */
        triangleLeft = "triangleLeft",
        /**
         * Value triangleRight
         */
        triangleRight = "triangleRight",
        /**
         * Value triangleUp
         */
        triangleUp = "triangleUp",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Line_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Line_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Line_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Pie_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Pie_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Pie_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Pie_valign
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Pie_valign'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Pie_valign {
        /**
         * Value center
         */
        center = "center",
        /**
         * Value top
         */
        top = "top",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Scatter_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Scatter_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Scatter_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.StackedVerticalBar_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.StackedVerticalBar_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum StackedVerticalBar_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.StackedVerticalBar_mode
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.StackedVerticalBar_mode'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum StackedVerticalBar_mode {
        /**
         * Value comparison
         */
        comparison = "comparison",
        /**
         * Value percentage
         */
        percentage = "percentage",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.StackedVerticalBar_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.StackedVerticalBar_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum StackedVerticalBar_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Title_alignment
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Title_alignment'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Title_alignment {
        /**
         * Value center
         */
        center = "center",
        /**
         * Value left
         */
        left = "left",
        /**
         * Value right
         */
        right = "right",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.Tooltip_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.Tooltip_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum Tooltip_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.VerticalBar_drawingEffect
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.VerticalBar_drawingEffect'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum VerticalBar_drawingEffect {
        /**
         * Value glossy
         */
        glossy = "glossy",
        /**
         * Value normal
         */
        normal = "normal",
      }
      /**
       * List (Enum) type sap.viz.ui5.types.VerticalBar_orientation
       *
       * This enum is part of the 'sap/viz/library' module export and must be accessed by the property 'ui5.types.VerticalBar_orientation'.
       *
       * @since 1.7.2
       * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
       * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
       * and won't receive new features or improvements, only important bug fixes. They will only remain in the
       * SAPUI5 distribution for backward compatibility.
       *
       * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
       * control to benefit from new charting enhancements and timely support. **
       *
       * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
       * make sure you evaluate it thoroughly before migration.
       * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
       */
      enum VerticalBar_orientation {
        /**
         * Value horizontal
         */
        horizontal = "horizontal",
        /**
         * Value vertical
         */
        vertical = "vertical",
      }
    }
  }
}

declare module "sap/viz/ui5/api/env/Format" {
  /**
   * Provides methods set global formatter for VizFrame.
   *
   * @since 1.24.0
   */
  interface Format {
    /**
     * Customize the global numeric formatter. If you set a formatter, it will replace the existing formatter.
     * This function will take effect globally.
     *
     * Example:
     * ```javascript
     *
     * // Format required from "sap/viz/ui5/api/env/Format"
     * var customerFormatter = {
     *     format : function(value, pattern) {
     *         // add your codes here to convert number value to formatted string
     *         // according to the pattern string
     *         return formattedString;
     *     }
     * };
     * Format.numericFormatter(customerFormatter);
     * ```
     */
    numericFormatter(formatter: Function): any;
  }
  const Format: Format;
  export default Format;
}

declare module "sap/viz/ui5/Area" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Area1 from "sap/viz/ui5/types/Area";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Area extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Area
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $AreaSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Area
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $AreaSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Area with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Area.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.area
     */
    getPlotArea(): Area1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Area1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $AreaSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.area
     */
    plotArea?: Area1;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Area#deselectData event.
   */
  export interface Area$DeselectDataEventParameters {}

  /**
   * Event object of the Area#deselectData event.
   */
  export type Area$DeselectDataEvent = Event<
    Area$DeselectDataEventParameters,
    Area
  >;

  /**
   * Parameters of the Area#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Area$HideTooltipEventParameters {}

  /**
   * Event object of the Area#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Area$HideTooltipEvent = Event<
    Area$HideTooltipEventParameters,
    Area
  >;

  /**
   * Parameters of the Area#initialized event.
   */
  export interface Area$InitializedEventParameters {}

  /**
   * Event object of the Area#initialized event.
   */
  export type Area$InitializedEvent = Event<
    Area$InitializedEventParameters,
    Area
  >;

  /**
   * Parameters of the Area#selectData event.
   */
  export interface Area$SelectDataEventParameters {}

  /**
   * Event object of the Area#selectData event.
   */
  export type Area$SelectDataEvent = Event<
    Area$SelectDataEventParameters,
    Area
  >;

  /**
   * Parameters of the Area#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Area$ShowTooltipEventParameters {}

  /**
   * Event object of the Area#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Area$ShowTooltipEvent = Event<
    Area$ShowTooltipEventParameters,
    Area
  >;
}

declare module "sap/viz/ui5/Area100" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Area from "sap/viz/ui5/types/Area";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Area100
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Area100 extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Area100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Area100Settings
    );
    /**
     * Constructor for a new sap.viz.ui5.Area100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Area100Settings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Area100 with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area100>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Area100.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Area100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Area100` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Area100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Area100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Area100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Area100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.area
     */
    getPlotArea(): Area;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Area
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area100 constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Area100Settings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.area
     */
    plotArea?: Area;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Area100#deselectData event.
   */
  export interface Area100$DeselectDataEventParameters {}

  /**
   * Event object of the Area100#deselectData event.
   */
  export type Area100$DeselectDataEvent = Event<
    Area100$DeselectDataEventParameters,
    Area100
  >;

  /**
   * Parameters of the Area100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Area100$HideTooltipEventParameters {}

  /**
   * Event object of the Area100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Area100$HideTooltipEvent = Event<
    Area100$HideTooltipEventParameters,
    Area100
  >;

  /**
   * Parameters of the Area100#initialized event.
   */
  export interface Area100$InitializedEventParameters {}

  /**
   * Event object of the Area100#initialized event.
   */
  export type Area100$InitializedEvent = Event<
    Area100$InitializedEventParameters,
    Area100
  >;

  /**
   * Parameters of the Area100#selectData event.
   */
  export interface Area100$SelectDataEventParameters {}

  /**
   * Event object of the Area100#selectData event.
   */
  export type Area100$SelectDataEvent = Event<
    Area100$SelectDataEventParameters,
    Area100
  >;

  /**
   * Parameters of the Area100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Area100$ShowTooltipEventParameters {}

  /**
   * Event object of the Area100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Area100$ShowTooltipEvent = Event<
    Area100$ShowTooltipEventParameters,
    Area100
  >;
}

declare module "sap/viz/ui5/Bar" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bar1 from "sap/viz/ui5/types/Bar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Bar
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'bar'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bar extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BarSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BarSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Bar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Bar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bar` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.bar
     */
    getPlotArea(): Bar1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Bar1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'bar'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BarSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.bar
     */
    plotArea?: Bar1;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Bar#deselectData event.
   */
  export interface Bar$DeselectDataEventParameters {}

  /**
   * Event object of the Bar#deselectData event.
   */
  export type Bar$DeselectDataEvent = Event<
    Bar$DeselectDataEventParameters,
    Bar
  >;

  /**
   * Parameters of the Bar#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bar$HideTooltipEventParameters {}

  /**
   * Event object of the Bar#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bar$HideTooltipEvent = Event<Bar$HideTooltipEventParameters, Bar>;

  /**
   * Parameters of the Bar#initialized event.
   */
  export interface Bar$InitializedEventParameters {}

  /**
   * Event object of the Bar#initialized event.
   */
  export type Bar$InitializedEvent = Event<Bar$InitializedEventParameters, Bar>;

  /**
   * Parameters of the Bar#selectData event.
   */
  export interface Bar$SelectDataEventParameters {}

  /**
   * Event object of the Bar#selectData event.
   */
  export type Bar$SelectDataEvent = Event<Bar$SelectDataEventParameters, Bar>;

  /**
   * Parameters of the Bar#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bar$ShowTooltipEventParameters {}

  /**
   * Event object of the Bar#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bar$ShowTooltipEvent = Event<Bar$ShowTooltipEventParameters, Bar>;
}

declare module "sap/viz/ui5/Bubble" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bubble1 from "sap/viz/ui5/types/Bubble";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Bubble
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'bubble'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bubble extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Bubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BubbleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Bubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BubbleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Bubble with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bubble>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Bubble.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bubble` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the sizeLegend in the aggregation {@link #getSizeLegend sizeLegend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySizeLegend(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.bubble
     */
    getPlotArea(): Bubble1;
    /**
     * Gets content of aggregation {@link #getSizeLegend sizeLegend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getSizeLegend(): Common;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Bubble1
    ): this;
    /**
     * Sets the aggregated {@link #getSizeLegend sizeLegend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSizeLegend(
      /**
       * The sizeLegend to set
       */
      oSizeLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bubble constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'bubble'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BubbleSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.legend.common
     */
    sizeLegend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.bubble
     */
    plotArea?: Bubble1;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Bubble#deselectData event.
   */
  export interface Bubble$DeselectDataEventParameters {}

  /**
   * Event object of the Bubble#deselectData event.
   */
  export type Bubble$DeselectDataEvent = Event<
    Bubble$DeselectDataEventParameters,
    Bubble
  >;

  /**
   * Parameters of the Bubble#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bubble$HideTooltipEventParameters {}

  /**
   * Event object of the Bubble#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bubble$HideTooltipEvent = Event<
    Bubble$HideTooltipEventParameters,
    Bubble
  >;

  /**
   * Parameters of the Bubble#initialized event.
   */
  export interface Bubble$InitializedEventParameters {}

  /**
   * Event object of the Bubble#initialized event.
   */
  export type Bubble$InitializedEvent = Event<
    Bubble$InitializedEventParameters,
    Bubble
  >;

  /**
   * Parameters of the Bubble#selectData event.
   */
  export interface Bubble$SelectDataEventParameters {}

  /**
   * Event object of the Bubble#selectData event.
   */
  export type Bubble$SelectDataEvent = Event<
    Bubble$SelectDataEventParameters,
    Bubble
  >;

  /**
   * Parameters of the Bubble#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bubble$ShowTooltipEventParameters {}

  /**
   * Event object of the Bubble#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bubble$ShowTooltipEvent = Event<
    Bubble$ShowTooltipEventParameters,
    Bubble
  >;
}

declare module "sap/viz/ui5/Bullet" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bullet1 from "sap/viz/ui5/types/Bullet";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Bullet
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'vertical_bullet'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bullet extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Bullet
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BulletSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Bullet
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BulletSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Bullet with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bullet>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Bullet.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Bullet` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Bullet` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis2 in the aggregation {@link #getXAxis2 xAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis2(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Bullet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Bullet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Bullet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Bullet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.bullet
     */
    getPlotArea(): Bullet1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis2 xAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis2(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Bullet1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis2 xAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis2(
      /**
       * The xAxis2 to set
       */
      oXAxis2: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bullet constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'vertical_bullet'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BulletSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.bullet
     */
    plotArea?: Bullet1;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis2?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Bullet#deselectData event.
   */
  export interface Bullet$DeselectDataEventParameters {}

  /**
   * Event object of the Bullet#deselectData event.
   */
  export type Bullet$DeselectDataEvent = Event<
    Bullet$DeselectDataEventParameters,
    Bullet
  >;

  /**
   * Parameters of the Bullet#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bullet$HideTooltipEventParameters {}

  /**
   * Event object of the Bullet#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bullet$HideTooltipEvent = Event<
    Bullet$HideTooltipEventParameters,
    Bullet
  >;

  /**
   * Parameters of the Bullet#initialized event.
   */
  export interface Bullet$InitializedEventParameters {}

  /**
   * Event object of the Bullet#initialized event.
   */
  export type Bullet$InitializedEvent = Event<
    Bullet$InitializedEventParameters,
    Bullet
  >;

  /**
   * Parameters of the Bullet#selectData event.
   */
  export interface Bullet$SelectDataEventParameters {}

  /**
   * Event object of the Bullet#selectData event.
   */
  export type Bullet$SelectDataEvent = Event<
    Bullet$SelectDataEventParameters,
    Bullet
  >;

  /**
   * Parameters of the Bullet#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Bullet$ShowTooltipEventParameters {}

  /**
   * Event object of the Bullet#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Bullet$ShowTooltipEvent = Event<
    Bullet$ShowTooltipEventParameters,
    Bullet
  >;
}

declare module "sap/viz/ui5/Column" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import VerticalBar from "sap/viz/ui5/types/VerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Column
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'column'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Column extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Column
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ColumnSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Column
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ColumnSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Column with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Column>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Column.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Column`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Column` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Column` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Column`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Column`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Column`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Column`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Column`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.verticalbar
     */
    getPlotArea(): VerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: VerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Column constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'column'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $ColumnSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.verticalbar
     */
    plotArea?: VerticalBar;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Column#deselectData event.
   */
  export interface Column$DeselectDataEventParameters {}

  /**
   * Event object of the Column#deselectData event.
   */
  export type Column$DeselectDataEvent = Event<
    Column$DeselectDataEventParameters,
    Column
  >;

  /**
   * Parameters of the Column#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Column$HideTooltipEventParameters {}

  /**
   * Event object of the Column#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Column$HideTooltipEvent = Event<
    Column$HideTooltipEventParameters,
    Column
  >;

  /**
   * Parameters of the Column#initialized event.
   */
  export interface Column$InitializedEventParameters {}

  /**
   * Event object of the Column#initialized event.
   */
  export type Column$InitializedEvent = Event<
    Column$InitializedEventParameters,
    Column
  >;

  /**
   * Parameters of the Column#selectData event.
   */
  export interface Column$SelectDataEventParameters {}

  /**
   * Event object of the Column#selectData event.
   */
  export type Column$SelectDataEvent = Event<
    Column$SelectDataEventParameters,
    Column
  >;

  /**
   * Parameters of the Column#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Column$ShowTooltipEventParameters {}

  /**
   * Event object of the Column#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Column$ShowTooltipEvent = Event<
    Column$ShowTooltipEventParameters,
    Column
  >;
}

declare module "sap/viz/ui5/Combination" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Combination1 from "sap/viz/ui5/types/Combination";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Combination
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'combination'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Combination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CombinationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Combination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CombinationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Combination with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Combination.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Combination` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Combination` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Combination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Combination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Combination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Combination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.combination
     */
    getPlotArea(): Combination1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Combination1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'combination'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $CombinationSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.combination
     */
    plotArea?: Combination1;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Combination#deselectData event.
   */
  export interface Combination$DeselectDataEventParameters {}

  /**
   * Event object of the Combination#deselectData event.
   */
  export type Combination$DeselectDataEvent = Event<
    Combination$DeselectDataEventParameters,
    Combination
  >;

  /**
   * Parameters of the Combination#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Combination$HideTooltipEventParameters {}

  /**
   * Event object of the Combination#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Combination$HideTooltipEvent = Event<
    Combination$HideTooltipEventParameters,
    Combination
  >;

  /**
   * Parameters of the Combination#initialized event.
   */
  export interface Combination$InitializedEventParameters {}

  /**
   * Event object of the Combination#initialized event.
   */
  export type Combination$InitializedEvent = Event<
    Combination$InitializedEventParameters,
    Combination
  >;

  /**
   * Parameters of the Combination#selectData event.
   */
  export interface Combination$SelectDataEventParameters {}

  /**
   * Event object of the Combination#selectData event.
   */
  export type Combination$SelectDataEvent = Event<
    Combination$SelectDataEventParameters,
    Combination
  >;

  /**
   * Parameters of the Combination#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Combination$ShowTooltipEventParameters {}

  /**
   * Event object of the Combination#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Combination$ShowTooltipEvent = Event<
    Combination$ShowTooltipEventParameters,
    Combination
  >;
}

declare module "sap/viz/ui5/controls/common/BaseControl" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * An abstract base class for all VIZ controls
   *
   * @since 1.22.0
   */
  export default class BaseControl extends Control {
    /**
     * Constructor for a new ui5/controls/common/BaseControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseControlSettings
    );
    /**
     * Constructor for a new ui5/controls/common/BaseControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseControlSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.common.BaseControl with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BaseControl>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.common.BaseControl.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the VizControl as a CSS size.
     *
     * Default value is `'480px'`.
     *
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getUiConfig uiConfig}.
     *
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     *
     *
     * @returns Value of property `uiConfig`
     */
    getUiConfig(): object;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the VizControl as a CSS size.
     *
     * Default value is `'640px'`.
     *
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the VizControl as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'480px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getUiConfig uiConfig}.
     *
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUiConfig(
      /**
       * New value for property `uiConfig`
       */
      oUiConfig?: object
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the VizControl as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'640px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  /**
   * Describes the settings that can be provided to the BaseControl constructor.
   */
  export interface $BaseControlSettings extends $ControlSettings {
    /**
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     */
    uiConfig?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Width of the VizControl as a CSS size.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the VizControl as a CSS size.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/controls/common/feeds/AnalysisObject" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * AnalysisObject Class
   *
   * @since 1.21.0
   */
  export default class AnalysisObject extends UI5Element {
    /**
     * Constructor for a new ui5/controls/common/feeds/AnalysisObject.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $AnalysisObjectSettings
    );
    /**
     * Constructor for a new ui5/controls/common/feeds/AnalysisObject.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $AnalysisObjectSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.common.feeds.AnalysisObject with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AnalysisObject>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.common.feeds.AnalysisObject.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataType dataType}.
     *
     * Data type of an analysis object. Enumeration: string, number, date
     *
     *
     * @returns Value of property `dataType`
     */
    getDataType(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Name of an analysis object.
     *
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Type of an analysis object. Enumeration: Measure, Dimension
     *
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getUid uid}.
     *
     * Uid of analysis object
     *
     *
     * @returns Value of property `uid`
     */
    getUid(): string;
    /**
     * Sets a new value for property {@link #getDataType dataType}.
     *
     * Data type of an analysis object. Enumeration: string, number, date
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataType(
      /**
       * New value for property `dataType`
       */
      sDataType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Name of an analysis object.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Type of an analysis object. Enumeration: Measure, Dimension
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUid uid}.
     *
     * Uid of analysis object
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUid(
      /**
       * New value for property `uid`
       */
      sUid?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the AnalysisObject constructor.
   */
  export interface $AnalysisObjectSettings extends $ElementSettings {
    /**
     * Uid of analysis object
     */
    uid?: string | PropertyBindingInfo;

    /**
     * Name of an analysis object.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Type of an analysis object. Enumeration: Measure, Dimension
     */
    type?: string | PropertyBindingInfo;

    /**
     * Data type of an analysis object. Enumeration: string, number, date
     */
    dataType?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/controls/common/feeds/FeedItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * FeedItem Class
   *
   * @since 1.21.0
   */
  export default class FeedItem extends UI5Element {
    /**
     * Constructor for a new ui5/controls/common/feeds/FeedItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedItemSettings
    );
    /**
     * Constructor for a new ui5/controls/common/feeds/FeedItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedItemSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.common.feeds.FeedItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.common.feeds.FeedItem.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Type of a feed item. Enumeration: Measure, Dimension
     *
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getUid uid}.
     *
     * Uid of a feed item. Please reference to bindings section in VIZDOCS to get the exact sUid string for
     * each chart type.
     *
     * For example: Bar chart > bindings > categoryAxis ; color ; valueAxis. The 'categoryAxis' should be the
     * sUid for x axis feeding for bar chart.
     *
     *
     * @returns Value of property `uid`
     */
    getUid(): string;
    /**
     * Gets current value of property {@link #getValues values}.
     *
     * Value of a feed item.
     *
     *
     * @returns Value of property `values`
     */
    getValues(): any[];
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Type of a feed item. Enumeration: Measure, Dimension
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUid uid}.
     *
     * Uid of a feed item. Please reference to bindings section in VIZDOCS to get the exact sUid string for
     * each chart type.
     *
     * For example: Bar chart > bindings > categoryAxis ; color ; valueAxis. The 'categoryAxis' should be the
     * sUid for x axis feeding for bar chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUid(
      /**
       * New value for property `uid`
       */
      sUid?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValues values}.
     *
     * Value of a feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValues(
      /**
       * New value for property `values`
       */
      sValues?: any[]
    ): this;
  }
  /**
   * Describes the settings that can be provided to the FeedItem constructor.
   */
  export interface $FeedItemSettings extends $ElementSettings {
    /**
     * Uid of a feed item. Please reference to bindings section in VIZDOCS to get the exact sUid string for
     * each chart type.
     *
     * For example: Bar chart > bindings > categoryAxis ; color ; valueAxis. The 'categoryAxis' should be the
     * sUid for x axis feeding for bar chart.
     */
    uid?: string | PropertyBindingInfo;

    /**
     * Type of a feed item. Enumeration: Measure, Dimension
     */
    type?: string | PropertyBindingInfo;

    /**
     * Value of a feed item.
     */
    values?: any[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/controls/Popover" {
  import {
    default as BaseControl,
    $BaseControlSettings,
  } from "sap/viz/ui5/controls/common/BaseControl";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Viz Chart Popover
   *
   * @since 1.22.0
   * @experimental As of version 1.22.0. API is not finished yet and might change completely
   */
  export default class Popover extends BaseControl {
    /**
     * Constructor for a new ui5/controls/Popover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );
    /**
     * Constructor for a new ui5/controls/Popover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.Popover with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.controls.common.BaseControl.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Popover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.Popover.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Close Chart's Popover.
     */
    close(): void;
    /**
     * Connect chart Popover with VizFrame.
     *
     * Chart Popover is only supported for VizFrame with type 'fiori'. This method must be called by application.
     */
    connect(
      /**
       * Unique ID of the VizFrame to connect this Popover with
       */
      uid: string
    ): void;
    /**
     * Gets current value of property {@link #getActionItems actionItems}.
     *
     * The items of this list or rows of Action List in Home Page inside the Popover.
     *
     *
     * @returns Value of property `actionItems`
     */
    getActionItems(): object[];
    /**
     * Gets current value of property {@link #getCustomDataControl customDataControl}.
     *
     * A callback function let user customize Popover's content panel.
     *
     *
     * @returns Value of property `customDataControl`
     */
    getCustomDataControl(): any;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * The pattern is used to format the measures displayed in Popover. If value type of format string is String,
     * the format string will be used to format all measures. If value type is Object, each format string in
     * the Object will be used to format the specified measure or time dimension.
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): any;
    /**
     * Gets current value of property {@link #getShowLine showLine}.
     *
     * Show line with popover marker in line/combination charts.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `showLine`
     */
    getShowLine(): boolean;
    /**
     * Sets a new value for property {@link #getActionItems actionItems}.
     *
     * The items of this list or rows of Action List in Home Page inside the Popover.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionItems(
      /**
       * New value for property `actionItems`
       */
      sActionItems?: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getCustomDataControl customDataControl}.
     *
     * A callback function let user customize Popover's content panel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomDataControl(
      /**
       * New value for property `customDataControl`
       */
      oCustomDataControl?: any
    ): this;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * The pattern is used to format the measures displayed in Popover. If value type of format string is String,
     * the format string will be used to format all measures. If value type is Object, each format string in
     * the Object will be used to format the specified measure or time dimension.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      oFormatString?: any
    ): this;
    /**
     * Sets a new value for property {@link #getShowLine showLine}.
     *
     * Show line with popover marker in line/combination charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowLine(
      /**
       * New value for property `showLine`
       */
      bShowLine?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Popover constructor.
   *
   * @experimental As of version 1.22.0. API is not finished yet and might change completely
   */
  export interface $PopoverSettings extends $BaseControlSettings {
    /**
     * A callback function let user customize Popover's content panel.
     */
    customDataControl?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * The items of this list or rows of Action List in Home Page inside the Popover.
     */
    actionItems?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * The pattern is used to format the measures displayed in Popover. If value type of format string is String,
     * the format string will be used to format all measures. If value type is Object, each format string in
     * the Object will be used to format the specified measure or time dimension.
     */
    formatString?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Show line with popover marker in line/combination charts.
     */
    showLine?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/controls/VizFrame" {
  import {
    default as BaseControl,
    $BaseControlSettings,
  } from "sap/viz/ui5/controls/common/BaseControl";

  import FeedItem from "sap/viz/ui5/controls/common/feeds/FeedItem";

  import Event from "sap/ui/base/Event";

  import Dataset from "sap/viz/ui5/data/Dataset";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * VizFrame is a viz control that manages a visualization’s initialization, layout, feeding, customization
   * and interactions.
   *
   * At the moment, the time series chart in VizFrame only accepts time inputs in UTC and system time, and
   * does not have the capability to switch timezones dynamically. Additionally, the week representation in
   * VizFrame adheres to the ISO week standard, and does not support other variations of week definitions.
   *
   * @since 1.22.0
   */
  export default class VizFrame extends BaseControl {
    /**
     * Constructor for a new ui5/controls/VizFrame. For more information on the available info chart types,
     * see the following documentation.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VizFrameSettings
    );
    /**
     * Constructor for a new ui5/controls/VizFrame. For more information on the available info chart types,
     * see the following documentation.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VizFrameSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.VizFrame with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.controls.common.BaseControl.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VizFrame>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.VizFrame.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some feed to the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFeed(
      /**
       * The feed to add; if empty, nothing is inserted
       */
      oFeed: FeedItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:renderComplete renderComplete} event of this
     * `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when the rendering ends.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRenderComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:renderComplete renderComplete} event of this
     * `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when the rendering ends.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRenderComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizFrame` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizFrame` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataset in the aggregation {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataset(): this;
    /**
     * Destroys all the feeds in the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFeeds(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:renderComplete renderComplete} event of this
     * `sap.viz.ui5.controls.VizFrame`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRenderComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.controls.VizFrame`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Exports the current viz as an SVG String.
     *
     * The viz is ready to be exported to SVG ONLY after the initialization is finished. Any attempt to export
     * to SVG before that will result in an empty SVG string.
     *
     *
     * @returns the SVG string of the current viz or empty SVG if error occurs.
     */
    exportToSVGString(
      /**
       * Options for the export
       */
      option?: {
        /**
         * the exported SVG will be scaled to the specific width
         */
        width?: int;
        /**
         * the exported SVG will be scaled to the specific height
         */
        height?: int;
        /**
         * flag to indicate if the exported SVG includes the original title and legend
         */
        hideTitleLegend?: boolean;
        /**
         * flag to indicate if the exported SVG includes the original axis
         */
        hideAxis?: boolean;
      }
    ): string;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:renderComplete renderComplete} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRenderComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataset dataset}.
     *
     * Dataset for chart.
     */
    getDataset(): Dataset;
    /**
     * Gets content of aggregation {@link #getFeeds feeds}.
     *
     * All feeds for chart.
     */
    getFeeds(): FeedItem[];
    /**
     * Return current legend group visibility.
     *
     * @since 1.28
     *
     * @returns current legend group visibility
     */
    getLegendVisible(): boolean;
    /**
     * Get ResponsiveLegend Control. (For fiori application set only. It has been deprecated since 1.28.)
     *
     * @deprecated As of version 1.28. This API has been deprecated. This interface will be removed from the
     * SAPUI5 delivery in one of the next releases.
     */
    getResponsiveLegend(): void;
    /**
     * Gets current value of property {@link #getVizCustomizations vizCustomizations}.
     *
     * Chart customizations property, aim to customize existing (build-in) charts to meet specific LoB requirements.
     * Currently, supported chart type : column, dual_column, bar, dual_bar, stacked_column, stacked_bar, 100_stacked_bar,
     * 100_stacked_column, 100_dual_stacked_bar, 100_dual_stacked_column, dual_stacked_bar, dual_stacked_column,
     * line, horizontal_line, dual_line, dual_horizontal_line, combination, horizontal_combination, stacked_combination,
     * horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination, scatter,
     * bubble.
     *
     *
     * @returns Value of property `vizCustomizations`
     */
    getVizCustomizations(): object;
    /**
     * Gets current value of property {@link #getVizProperties vizProperties}.
     *
     * Chart properties, refer to chart property doc for more details.
     *
     *
     * @returns Value of property `vizProperties`
     */
    getVizProperties(): object;
    /**
     * Gets current value of property {@link #getVizScales vizScales}.
     *
     * Chart scales, refer to chart property doc for more details.
     *
     * @since 1.25
     *
     * @returns Value of property `vizScales`
     */
    getVizScales(): object;
    /**
     * Gets current value of property {@link #getVizType vizType}.
     *
     * Type for viz frame. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar'
     * will create a info bar chart. Supported chart type: column, dual_column, bar, dual_bar, stacked_bar,
     * stacked_column, line, dual_line, combination, bullet, time_bullet, bubble, time_bubble, pie, donut, timeseries_column,
     * timeseries_line, timeseries_scatter, timeseries_bubble, timeseries_stacked_column, timeseries_100_stacked_column,
     * timeseries_bullet, timeseries_waterfall, timeseries_stacked_combination scatter, vertical_bullet, dual_stacked_bar,
     * 100_stacked_bar, 100_dual_stacked_bar, dual_stacked_column, 100_stacked_column, 100_dual_stacked_column,
     * stacked_combination, horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination,
     * heatmap, treemap, waterfall, horizontal_waterfall, area, radar
     *
     * Default value is `"column"`.
     *
     *
     * @returns Value of property `vizType`
     */
    getVizType(): string;
    /**
     * Uid for this viz frame. It supports other controls to connect to a viz instance.
     *
     *
     * @returns Uid of this viz frame
     */
    getVizUid(): string;
    /**
     * Checks for the provided `sap.viz.ui5.controls.common.feeds.FeedItem` in the aggregation {@link #getFeeds feeds}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFeed(
      /**
       * The feed whose index is looked for
       */
      oFeed: FeedItem
    ): int;
    /**
     * Inserts a feed into the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFeed(
      /**
       * The feed to insert; if empty, nothing is inserted
       */
      oFeed: FeedItem,
      /**
       * The `0`-based index the feed should be inserted at; for a negative value of `iIndex`, the feed is inserted
       * at position 0; for a value greater than the current size of the aggregation, the feed is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getFeeds feeds}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFeeds(): FeedItem[];
    /**
     * Removes a feed from the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns The removed feed or `null`
     */
    removeFeed(
      /**
       * The feed to remove or its index or id
       */
      vFeed: int | string | FeedItem
    ): FeedItem | null;
    /**
     * Set whether to enable overlay or not. If the value is true, the chart will be blocked with a transparent
     * overlay.
     */
    setBlocked(
      /**
       * New value for whether to enable visibility of overlay.
       */
      bBlocked?: boolean
    ): void;
    /**
     * Sets the aggregated {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataset(
      /**
       * The dataset to set
       */
      oDataset: Dataset
    ): this;
    /**
     * Will respect the setting for all available legends.
     *
     * @since 1.28
     */
    setLegendVisible(
      /**
       * Set legend visibility.
       */
      visibility: boolean
    ): this;
    /**
     * Setter for property uiConfig. uiConfig could only set via settings parameter of constructor.
     *
     * uiConfig from base type could config the instance. Supported uiConfig keyword: applicationSet, showErrorMessage
     */
    setUiConfig(oUiConfig: object): this;
    /**
     * Properties for viz frame.
     */
    setVizProperties(oVizProperties: object): this;
    /**
     * Scales for VizFrame.
     */
    setVizScales(
      oVizScales: object,

      oVizScalesOption?: {
        /**
         * replace scales or not. When oVizScalesOption.replace is true, replace existing scales with the input
         * scales.
         */
        replace?: boolean;
      }
    ): this;
    /**
     * Setter for property vizType. vizType could only set via settings parameter in Constructor. Do not set
     * vizType at runtime.
     *
     * vizType is a string of supported chart type or extension chart type.
     *
     * Supported chart types: bubble, combination, column, bar, line, stacked_bar, stacked_column, bullet, vertical_bullet,
     * timebubble. User can pass 'chartType' or 'info/chartType' for these supported chart types.
     *
     * Example:
     * ```javascript
     *
     * // VizFrame required from "sap/viz/ui5/controls/VizFrame"
     * var vizFrame = new VizFrame({
     *  'vizType' : 'bar'
     * });
     * ```
     *
     *
     * For extension chart type, user should load extension js file manually at first.
     *
     * Example:
     * ```javascript
     *
     * // VizFrame required from "sap/viz/ui5/controls/VizFrame"
     * var vizFrame = new VizFrame({
     *  'vizType' : 'myextension'
     * });
     * ```
     */
    setVizType(sVizType: string): this;
    /**
     * Selections for viz frame.
     */
    vizSelection(
      /**
       * some data points of the chart
       */
      aPoints: object[],
      /**
       * whether to clear previous selection, by default the selection will be incremental selection
       */
      oAction: object
    ): this;
    /**
     * Update viz frame according to a JSON object, it can update css, properties, feeds and data model.
     *
     * VizFrame instance has to be placed at its corresponding parent at first to make this API work.
     */
    vizUpdate(
      /**
       * a JSON object contains combination of properties, feeds and data model.
       */
      oOptions: object
    ): void;
    /**
     * Zoom the chart plot.
     */
    zoom(
      /**
       * contains a "direction" attribute with value "in" or "out" indicating zoom to enlarge or shrink respectively
       */
      cfg: object
    ): void;
  }
  /**
   * Describes the settings that can be provided to the VizFrame constructor.
   */
  export interface $VizFrameSettings extends $BaseControlSettings {
    /**
     * Type for viz frame. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar'
     * will create a info bar chart. Supported chart type: column, dual_column, bar, dual_bar, stacked_bar,
     * stacked_column, line, dual_line, combination, bullet, time_bullet, bubble, time_bubble, pie, donut, timeseries_column,
     * timeseries_line, timeseries_scatter, timeseries_bubble, timeseries_stacked_column, timeseries_100_stacked_column,
     * timeseries_bullet, timeseries_waterfall, timeseries_stacked_combination scatter, vertical_bullet, dual_stacked_bar,
     * 100_stacked_bar, 100_dual_stacked_bar, dual_stacked_column, 100_stacked_column, 100_dual_stacked_column,
     * stacked_combination, horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination,
     * heatmap, treemap, waterfall, horizontal_waterfall, area, radar
     */
    vizType?: string | PropertyBindingInfo;

    /**
     * Chart properties, refer to chart property doc for more details.
     */
    vizProperties?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Chart scales, refer to chart property doc for more details.
     *
     * @since 1.25
     */
    vizScales?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Chart customizations property, aim to customize existing (build-in) charts to meet specific LoB requirements.
     * Currently, supported chart type : column, dual_column, bar, dual_bar, stacked_column, stacked_bar, 100_stacked_bar,
     * 100_stacked_column, 100_dual_stacked_bar, 100_dual_stacked_column, dual_stacked_bar, dual_stacked_column,
     * line, horizontal_line, dual_line, dual_horizontal_line, combination, horizontal_combination, stacked_combination,
     * horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination, scatter,
     * bubble.
     */
    vizCustomizations?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Set chart's legend properties.
     */
    legendVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Dataset for chart.
     */
    dataset?: Dataset;

    /**
     * All feeds for chart.
     */
    feeds?: FeedItem[] | FeedItem | AggregationBindingInfo | `{${string}}`;

    /**
     * Event fires when the rendering ends.
     */
    renderComplete?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in.
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in
     */
    deselectData?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the VizFrame#deselectData event.
   */
  export interface VizFrame$DeselectDataEventParameters {}

  /**
   * Event object of the VizFrame#deselectData event.
   */
  export type VizFrame$DeselectDataEvent = Event<
    VizFrame$DeselectDataEventParameters,
    VizFrame
  >;

  /**
   * Parameters of the VizFrame#renderComplete event.
   */
  export interface VizFrame$RenderCompleteEventParameters {}

  /**
   * Event object of the VizFrame#renderComplete event.
   */
  export type VizFrame$RenderCompleteEvent = Event<
    VizFrame$RenderCompleteEventParameters,
    VizFrame
  >;

  /**
   * Parameters of the VizFrame#selectData event.
   */
  export interface VizFrame$SelectDataEventParameters {}

  /**
   * Event object of the VizFrame#selectData event.
   */
  export type VizFrame$SelectDataEvent = Event<
    VizFrame$SelectDataEventParameters,
    VizFrame
  >;
}

declare module "sap/viz/ui5/controls/VizSlider" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import FeedItem from "sap/viz/ui5/controls/common/feeds/FeedItem";

  import Event from "sap/ui/base/Event";

  import Dataset from "sap/viz/ui5/data/Dataset";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * VizSlider is a viz control with range slider that provide data range selection.
   *
   * @since 1.51.0
   */
  export default class VizSlider extends Control {
    /**
     * Constructor for a new ui5/controls/VizSider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VizSliderSettings
    );
    /**
     * Constructor for a new ui5/controls/VizSider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VizSliderSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.VizSlider with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VizSlider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.VizSlider.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some feed to the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFeed(
      /**
       * The feed to add; if empty, nothing is inserted
       */
      oFeed: FeedItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rangeChanged rangeChanged} event of this `sap.viz.ui5.controls.VizSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizSlider` itself.
     *
     * Event fires when selected range changes. Data structure For Time chart: { start: {Date: 1422181498387},
     * end: {Date: 1422049107429} }. For column and line Chart: { "data":[{"Country":"Canada"}, {"Country":"China"},{"Country":"France"},
     * {"Country":"Germany"},{"Country":"India"}] }.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRangeChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rangeChanged rangeChanged} event of this `sap.viz.ui5.controls.VizSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.controls.VizSlider` itself.
     *
     * Event fires when selected range changes. Data structure For Time chart: { start: {Date: 1422181498387},
     * end: {Date: 1422049107429} }. For column and line Chart: { "data":[{"Country":"Canada"}, {"Country":"China"},{"Country":"France"},
     * {"Country":"Germany"},{"Country":"India"}] }.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRangeChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.controls.VizSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataset in the aggregation {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataset(): this;
    /**
     * Destroys all the feeds in the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFeeds(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:rangeChanged rangeChanged} event of this `sap.viz.ui5.controls.VizSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRangeChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:rangeChanged rangeChanged} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRangeChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataset dataset}.
     *
     * Dataset for VizSlider.
     */
    getDataset(): Dataset;
    /**
     * Gets content of aggregation {@link #getFeeds feeds}.
     *
     * All feeds for VizSlider.
     */
    getFeeds(): FeedItem[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the VizControl as a CSS size.
     *
     * Default value is `'200px'`.
     *
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Get start end date of range slider. Supported chart type: timeseries_column, timeseries_line.
     *
     *
     * @returns range : {start : timestamp, end : timestamp}
     */
    getRange(): object;
    /**
     * Gets current value of property {@link #getShowPercentageLabel showPercentageLabel}.
     *
     * Set percentage label of range slider visible or not
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `showPercentageLabel`
     */
    getShowPercentageLabel(): boolean;
    /**
     * Gets current value of property {@link #getShowStartEndLabel showStartEndLabel}.
     *
     * Set start end label of range slider visible or not
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `showStartEndLabel`
     */
    getShowStartEndLabel(): boolean;
    /**
     * Gets current value of property {@link #getUiConfig uiConfig}.
     *
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     *
     *
     * @returns Value of property `uiConfig`
     */
    getUiConfig(): object;
    /**
     * Gets current value of property {@link #getValueAxisVisible valueAxisVisible}.
     *
     * Set valueAxis visible or not
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `valueAxisVisible`
     */
    getValueAxisVisible(): boolean;
    /**
     * Gets current value of property {@link #getVizType vizType}.
     *
     * Type of chart. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar' will
     * create a info bar chart. Supported chart type: column, line, timeseries_column, timeseries_line
     *
     * Default value is `"column"`.
     *
     *
     * @returns Value of property `vizType`
     */
    getVizType(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the VizControl as a CSS size.
     *
     * Default value is `'800px'`.
     *
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.viz.ui5.controls.common.feeds.FeedItem` in the aggregation {@link #getFeeds feeds}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFeed(
      /**
       * The feed whose index is looked for
       */
      oFeed: FeedItem
    ): int;
    /**
     * Inserts a feed into the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFeed(
      /**
       * The feed to insert; if empty, nothing is inserted
       */
      oFeed: FeedItem,
      /**
       * The `0`-based index the feed should be inserted at; for a negative value of `iIndex`, the feed is inserted
       * at position 0; for a value greater than the current size of the aggregation, the feed is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getFeeds feeds}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFeeds(): FeedItem[];
    /**
     * Removes a feed from the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns The removed feed or `null`
     */
    removeFeed(
      /**
       * The feed to remove or its index or id
       */
      vFeed: int | string | FeedItem
    ): FeedItem | null;
    /**
     * Sets the aggregated {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataset(
      /**
       * The dataset to set
       */
      oDataset: Dataset
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the VizControl as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'200px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Set start end date of range slider. Supported chart type: timeseries_column, timeseries_line.
     *
     *
     * @returns Reference to this in order to allow method chaining
     */
    setRange(
      /**
       * {start : timestamp, end : timestamp}
       */
      range: object
    ): this;
    /**
     * Sets a new value for property {@link #getShowPercentageLabel showPercentageLabel}.
     *
     * Set percentage label of range slider visible or not
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowPercentageLabel(
      /**
       * New value for property `showPercentageLabel`
       */
      bShowPercentageLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowStartEndLabel showStartEndLabel}.
     *
     * Set start end label of range slider visible or not
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowStartEndLabel(
      /**
       * New value for property `showStartEndLabel`
       */
      bShowStartEndLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUiConfig uiConfig}.
     *
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUiConfig(
      /**
       * New value for property `uiConfig`
       */
      oUiConfig?: object
    ): this;
    /**
     * Sets a new value for property {@link #getValueAxisVisible valueAxisVisible}.
     *
     * Set valueAxis visible or not
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueAxisVisible(
      /**
       * New value for property `valueAxisVisible`
       */
      bValueAxisVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVizType vizType}.
     *
     * Type of chart. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar' will
     * create a info bar chart. Supported chart type: column, line, timeseries_column, timeseries_line
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"column"`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVizType(
      /**
       * New value for property `vizType`
       */
      sVizType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the VizControl as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'800px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  /**
   * Describes the settings that can be provided to the VizSlider constructor.
   */
  export interface $VizSliderSettings extends $ControlSettings {
    /**
     * Type of chart. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar' will
     * create a info bar chart. Supported chart type: column, line, timeseries_column, timeseries_line
     */
    vizType?: string | PropertyBindingInfo;

    /**
     * Configuration for initialization to VizControl. This property could only set via settings parameter in
     * Constructor.
     */
    uiConfig?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Width of the VizControl as a CSS size.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the VizControl as a CSS size.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Set valueAxis visible or not
     */
    valueAxisVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set percentage label of range slider visible or not
     */
    showPercentageLabel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set start end label of range slider visible or not
     */
    showStartEndLabel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set start end date of range slider. Supported chart type: timeseries_column, timeseries_line
     */
    range?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Dataset for VizSlider.
     */
    dataset?: Dataset;

    /**
     * All feeds for VizSlider.
     */
    feeds?: FeedItem[] | FeedItem | AggregationBindingInfo | `{${string}}`;

    /**
     * Event fires when selected range changes. Data structure For Time chart: { start: {Date: 1422181498387},
     * end: {Date: 1422049107429} }. For column and line Chart: { "data":[{"Country":"Canada"}, {"Country":"China"},{"Country":"France"},
     * {"Country":"Germany"},{"Country":"India"}] }.
     */
    rangeChanged?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the VizSlider#rangeChanged event.
   */
  export interface VizSlider$RangeChangedEventParameters {}

  /**
   * Event object of the VizSlider#rangeChanged event.
   */
  export type VizSlider$RangeChangedEvent = Event<
    VizSlider$RangeChangedEventParameters,
    VizSlider
  >;
}

declare module "sap/viz/ui5/controls/VizTooltip" {
  import {
    default as BaseControl,
    $BaseControlSettings,
  } from "sap/viz/ui5/controls/common/BaseControl";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Viz Chart Tooltip
   *
   * @since 1.44.0
   */
  export default class VizTooltip extends BaseControl {
    /**
     * Constructor for a new ui5/controls/VizTooltip.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VizTooltipSettings
    );
    /**
     * Constructor for a new ui5/controls/VizTooltip.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VizTooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.controls.VizTooltip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.controls.common.BaseControl.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VizTooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.controls.VizTooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Connect chart Tooltip with VizFrame. Chart Tooltip is only supported for VizFrame with 'fiori' type.
     * It must be called by application.
     */
    connect(uid: string): void;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * The pattern is used to format the measures/timeDimensions displayed in Tooltip. If value type of format
     * string is String or an object with 'formatPattern' and 'dataUnit' values defined, the value will be used
     * to format all measures(not works with TimeDimension). The value of ‘formatPattern’ here is a string to
     * define the format pattern of numbers, and value of ‘dataUnit’ is a postfix string to indicate the unit
     * of measure. If value type is Object whose key is measure/timeDimension name, the possible value type
     * is string or an object with ‘formatPattern’ and ‘dataUnit’ values defined. And each string value will
     * be used to format the specified measure or time dimension. And TimeDimension does not support 'dataUnit'.
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): any;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * The pattern is used to format the measures/timeDimensions displayed in Tooltip. If value type of format
     * string is String or an object with 'formatPattern' and 'dataUnit' values defined, the value will be used
     * to format all measures(not works with TimeDimension). The value of ‘formatPattern’ here is a string to
     * define the format pattern of numbers, and value of ‘dataUnit’ is a postfix string to indicate the unit
     * of measure. If value type is Object whose key is measure/timeDimension name, the possible value type
     * is string or an object with ‘formatPattern’ and ‘dataUnit’ values defined. And each string value will
     * be used to format the specified measure or time dimension. And TimeDimension does not support 'dataUnit'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      oFormatString?: any
    ): this;
  }
  /**
   * Describes the settings that can be provided to the VizTooltip constructor.
   */
  export interface $VizTooltipSettings extends $BaseControlSettings {
    /**
     * The pattern is used to format the measures/timeDimensions displayed in Tooltip. If value type of format
     * string is String or an object with 'formatPattern' and 'dataUnit' values defined, the value will be used
     * to format all measures(not works with TimeDimension). The value of ‘formatPattern’ here is a string to
     * define the format pattern of numbers, and value of ‘dataUnit’ is a postfix string to indicate the unit
     * of measure. If value type is Object whose key is measure/timeDimension name, the possible value type
     * is string or an object with ‘formatPattern’ and ‘dataUnit’ values defined. And each string value will
     * be used to format the specified measure or time dimension. And TimeDimension does not support 'dataUnit'.
     */
    formatString?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/core/BaseChart" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Dataset from "sap/viz/ui5/data/Dataset";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import Event from "sap/ui/base/Event";

  /**
   * An abstract base class for all VIZ charts
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely
   */
  export default class BaseChart extends Control {
    /**
     * Constructor for a new ui5/core/BaseChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseChartSettings
    );
    /**
     * Constructor for a new ui5/core/BaseChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseChartSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.core.BaseChart with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BaseChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.core.BaseChart.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeCreateViz beforeCreateViz} event of this
     * `sap.viz.ui5.core.BaseChart`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.core.BaseChart` itself.
     *
     * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value
     * for the parameter with the same name of the createViz call.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeCreateViz(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: BaseChart$BeforeCreateVizEvent) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.core.BaseChart` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeCreateViz beforeCreateViz} event of this
     * `sap.viz.ui5.core.BaseChart`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.core.BaseChart` itself.
     *
     * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value
     * for the parameter with the same name of the createViz call.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeCreateViz(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: BaseChart$BeforeCreateVizEvent) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.core.BaseChart` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataset in the aggregation {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataset(): this;
    /**
     * Destroys the noData in the aggregation {@link #getNoData noData}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyNoData(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeCreateViz beforeCreateViz} event of
     * this `sap.viz.ui5.core.BaseChart`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeCreateViz(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: BaseChart$BeforeCreateVizEvent) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:beforeCreateViz beforeCreateViz} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeCreateViz(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: BaseChart$BeforeCreateVizEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getCss css}.
     *
     * CSS style of Chart.
     *
     *
     * @returns Value of property `css`
     */
    getCss(): string;
    /**
     * Gets content of aggregation {@link #getDataset dataset}.
     *
     * Dataset for this chart
     */
    getDataset(): Dataset;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the Chart as a CSS size.
     *
     * Default value is `'480px'`.
     *
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getNoData noData}.
     *
     * Control tree to display when there is no data available
     */
    getNoData(): Control;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the Chart as a CSS size.
     *
     * Default value is `'640px'`.
     *
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getCss css}.
     *
     * CSS style of Chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCss(
      /**
       * New value for property `css`
       */
      sCss?: string
    ): this;
    /**
     * Sets the aggregated {@link #getDataset dataset}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataset(
      /**
       * The dataset to set
       */
      oDataset: Dataset
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the Chart as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'480px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getNoData noData}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNoData(
      /**
       * The noData to set
       */
      oNoData: Control
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the Chart as a CSS size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'640px'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  /**
   * Describes the settings that can be provided to the BaseChart constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely
   */
  export interface $BaseChartSettings extends $ControlSettings {
    /**
     * Width of the Chart as a CSS size.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the Chart as a CSS size.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * CSS style of Chart.
     */
    css?: string | PropertyBindingInfo;

    /**
     * Dataset for this chart
     */
    dataset?: Dataset;

    /**
     * Control tree to display when there is no data available
     */
    noData?: Control;

    /**
     * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value
     * for the parameter with the same name of the createViz call.
     */
    beforeCreateViz?: (oEvent: BaseChart$BeforeCreateVizEvent) => void;
  }

  /**
   * Parameters of the BaseChart#beforeCreateViz event.
   */
  export interface BaseChart$BeforeCreateVizEventParameters {
    /**
     * Value for the parameter with the same name of the createViz call.
     */
    usrOptions?: object;
  }

  /**
   * Event object of the BaseChart#beforeCreateViz event.
   */
  export type BaseChart$BeforeCreateVizEvent = Event<
    BaseChart$BeforeCreateVizEventParameters,
    BaseChart
  >;
}

declare module "sap/viz/ui5/core/BaseStructuredType" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Abstract base class for all elements that represent VIZ modules or complex property types
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely
   */
  export default class BaseStructuredType extends UI5Element {
    /**
     * Constructor for a new ui5/core/BaseStructuredType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseStructuredTypeSettings
    );
    /**
     * Constructor for a new ui5/core/BaseStructuredType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BaseStructuredTypeSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.core.BaseStructuredType with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BaseStructuredType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.core.BaseStructuredType.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  /**
   * Describes the settings that can be provided to the BaseStructuredType constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely
   */
  export interface $BaseStructuredTypeSettings extends $ElementSettings {}
}

declare module "sap/viz/ui5/data/CustomDataset" {
  import {
    default as Dataset,
    $DatasetSettings,
  } from "sap/viz/ui5/data/Dataset";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A dataset for raw data format.
   *
   * @since 1.31
   */
  export default class CustomDataset extends Dataset {
    /**
     * Constructor for a new ui5/data/CustomDataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CustomDatasetSettings
    );
    /**
     * Constructor for a new ui5/data/CustomDataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CustomDatasetSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.data.CustomDataset with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.data.Dataset.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomDataset>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.data.CustomDataset.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getData data}.
     *
     * Data containing dimensions and measures. The format and structure of this data is depends on the chart.
     *
     *
     * @returns Value of property `data`
     */
    getData(): object;
    /**
     * Sets a new value for property {@link #getData data}.
     *
     * Data containing dimensions and measures. The format and structure of this data is depends on the chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setData(
      /**
       * New value for property `data`
       */
      oData: object
    ): this;
  }
  /**
   * Describes the settings that can be provided to the CustomDataset constructor.
   */
  export interface $CustomDatasetSettings extends $DatasetSettings {
    /**
     * Data containing dimensions and measures. The format and structure of this data is depends on the chart.
     */
    data?: object | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/data/Dataset" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Abstract Dataset implementation
   *
   * @since 1.7.2
   */
  export default class Dataset extends UI5Element {
    /**
     * Constructor for a new ui5/data/Dataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DatasetSettings
    );
    /**
     * Constructor for a new ui5/data/Dataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DatasetSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.data.Dataset with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dataset>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.data.Dataset.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  /**
   * Describes the settings that can be provided to the Dataset constructor.
   */
  export interface $DatasetSettings extends $ElementSettings {}
}

declare module "sap/viz/ui5/data/DimensionDefinition" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Definition of a single dimension in a dataset
   *
   * @since 1.7.2
   */
  export default class DimensionDefinition extends UI5Element {
    /**
     * Constructor for a new ui5/data/DimensionDefinition.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DimensionDefinitionSettings
    );
    /**
     * Constructor for a new ui5/data/DimensionDefinition.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DimensionDefinitionSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.data.DimensionDefinition with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DimensionDefinition>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.data.DimensionDefinition.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAxis axis}.
     *
     * Number of axis this dimension belongs to. Currently must be 1 or 2. Skip this property when use VizFrame.
     *
     *
     * @returns Value of property `axis`
     */
    getAxis(): int;
    /**
     * Gets current value of property {@link #getDataType dataType}.
     *
     * Data type of the dimension as displayed in the chart. Enumeration: string, number, date. Currently only
     * in time series chart, it is required to set data type to 'date' if this column is going to be fed on
     * 'timeAxis'.
     *
     *
     * @returns Value of property `dataType`
     */
    getDataType(): string;
    /**
     * Gets current value of property {@link #getDisplayValue displayValue}.
     *
     * Display value for the dimension. Usually bound to some model field. It doesn't work with 'waterfallType'
     *
     *
     * @returns Value of property `displayValue`
     */
    getDisplayValue(): any;
    /**
     * Gets current value of property {@link #getIdentity identity}.
     *
     * Id of the dimension as displayed in the chart
     *
     *
     * @returns Value of property `identity`
     */
    getIdentity(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Name of the dimension as displayed in the chart
     *
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getSorter sorter}.
     *
     * `Sorter` Object of the dimension. There is a default comparator function, if no custom comparator is
     * given. The function returns -1, 0 or 1, depending on the order of the two items and is suitable to be
     * used as a comparator method for Array.sort. The object contains two entries:
     * 	 - `bDescending:`{boolean} (optional) define whether the sort order is descending. Default is false.
     *
     * 	 - `fnComparator:`{function} (optional) a user defined comparator function, which have two input values
     *     to compare. The input value is an object, which contains value and displayValue (optional).
     *
     *
     * @returns Value of property `sorter`
     */
    getSorter(): object;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value for the dimension. Usually bound to some model field.
     *
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * Sets a new value for property {@link #getAxis axis}.
     *
     * Number of axis this dimension belongs to. Currently must be 1 or 2. Skip this property when use VizFrame.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxis(
      /**
       * New value for property `axis`
       */
      iAxis?: int
    ): this;
    /**
     * Sets a new value for property {@link #getDataType dataType}.
     *
     * Data type of the dimension as displayed in the chart. Enumeration: string, number, date. Currently only
     * in time series chart, it is required to set data type to 'date' if this column is going to be fed on
     * 'timeAxis'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataType(
      /**
       * New value for property `dataType`
       */
      sDataType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayValue displayValue}.
     *
     * Display value for the dimension. Usually bound to some model field. It doesn't work with 'waterfallType'
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayValue(
      /**
       * New value for property `displayValue`
       */
      oDisplayValue?: any
    ): this;
    /**
     * Sets a new value for property {@link #getIdentity identity}.
     *
     * Id of the dimension as displayed in the chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIdentity(
      /**
       * New value for property `identity`
       */
      sIdentity?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Name of the dimension as displayed in the chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSorter sorter}.
     *
     * `Sorter` Object of the dimension. There is a default comparator function, if no custom comparator is
     * given. The function returns -1, 0 or 1, depending on the order of the two items and is suitable to be
     * used as a comparator method for Array.sort. The object contains two entries:
     * 	 - `bDescending:`{boolean} (optional) define whether the sort order is descending. Default is false.
     *
     * 	 - `fnComparator:`{function} (optional) a user defined comparator function, which have two input values
     *     to compare. The input value is an object, which contains value and displayValue (optional).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSorter(
      /**
       * New value for property `sorter`
       */
      oSorter?: object
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value for the dimension. Usually bound to some model field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue?: any
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DimensionDefinition constructor.
   */
  export interface $DimensionDefinitionSettings extends $ElementSettings {
    /**
     * Number of axis this dimension belongs to. Currently must be 1 or 2. Skip this property when use VizFrame.
     */
    axis?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Value for the dimension. Usually bound to some model field.
     */
    value?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Name of the dimension as displayed in the chart
     */
    name?: string | PropertyBindingInfo;

    /**
     * Id of the dimension as displayed in the chart
     */
    identity?: string | PropertyBindingInfo;

    /**
     * Display value for the dimension. Usually bound to some model field. It doesn't work with 'waterfallType'
     */
    displayValue?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Data type of the dimension as displayed in the chart. Enumeration: string, number, date. Currently only
     * in time series chart, it is required to set data type to 'date' if this column is going to be fed on
     * 'timeAxis'.
     */
    dataType?: string | PropertyBindingInfo;

    /**
     * `Sorter` Object of the dimension. There is a default comparator function, if no custom comparator is
     * given. The function returns -1, 0 or 1, depending on the order of the two items and is suitable to be
     * used as a comparator method for Array.sort. The object contains two entries:
     * 	 - `bDescending:`{boolean} (optional) define whether the sort order is descending. Default is false.
     *
     * 	 - `fnComparator:`{function} (optional) a user defined comparator function, which have two input values
     *     to compare. The input value is an object, which contains value and displayValue (optional).
     */
    sorter?: object | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/data/FlattenedDataset" {
  import {
    default as Dataset,
    $DatasetSettings,
  } from "sap/viz/ui5/data/Dataset";

  import UI5Element from "sap/ui/core/Element";

  import DimensionDefinition from "sap/viz/ui5/data/DimensionDefinition";

  import MeasureDefinition from "sap/viz/ui5/data/MeasureDefinition";

  import Event from "sap/ui/base/Event";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Context from "sap/ui/model/Context";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * A dataset for flattened (redundant) data using a tabular format.
   *
   * @since 1.7.2
   */
  export default class FlattenedDataset extends Dataset {
    /**
     * Constructor for a new ui5/data/FlattenedDataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FlattenedDatasetSettings
    );
    /**
     * Constructor for a new ui5/data/FlattenedDataset.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FlattenedDatasetSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.data.FlattenedDataset with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.data.Dataset.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlattenedDataset>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.data.FlattenedDataset.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some data to the aggregation {@link #getData data}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addData(
      /**
       * The data to add; if empty, nothing is inserted
       */
      oData: UI5Element
    ): this;
    /**
     * Adds some dimension to the aggregation {@link #getDimensions dimensions}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDimension(
      /**
       * The dimension to add; if empty, nothing is inserted
       */
      oDimension: DimensionDefinition
    ): this;
    /**
     * Adds some measure to the aggregation {@link #getMeasures measures}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addMeasure(
      /**
       * The measure to add; if empty, nothing is inserted
       */
      oMeasure: MeasureDefinition
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataChange dataChange} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data change event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataChange dataChange} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data change event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataError dataError} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data error event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataError dataError} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data error event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataRefresh dataRefresh} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data refresh event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataRefresh(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataRefresh dataRefresh} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.data.FlattenedDataset` itself.
     *
     * data refresh event
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDataRefresh(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.data.FlattenedDataset` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getData data} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    bindData(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the data in the aggregation {@link #getData data}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyData(): this;
    /**
     * Destroys all the dimensions in the aggregation {@link #getDimensions dimensions}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDimensions(): this;
    /**
     * Destroys all the measures in the aggregation {@link #getMeasures measures}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMeasures(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataChange dataChange} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDataChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataError dataError} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDataError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataRefresh dataRefresh} event of this `sap.viz.ui5.data.FlattenedDataset`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDataRefresh(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Find the model context for a given 'criteria' into chart data.
     *
     * The native sap.viz library provides data objects with the `selectData` event. Applications can call this
     * method for each data in a selectData event to find the corresponding UI5 model context.
     *
     * When the dataset has not been converted into a VIZ dataset yet (e.g. no rendering yet) or when the coordinates
     * of the path are not within the range of the current dataset, then undefined will be returned.
     *
     * Example when use sap.viz.ui5.*:
     * ```javascript
     *
     * selectData: function(oEvent) {
     *   var aSelectData = oEvent.getParameter("data");
     *   var oContext = this.getDataset().findContext(aSelectData[0].data[0].ctx.path);
     * }
     * ```
     *  Example when use sap.viz.ui5.controls.VizFrame:
     * ```javascript
     *
     * selectData: function(oEvent) {
     *   var aSelectData = oEvent.getParameter("data");
     *   var oContext = this.getDataset().findContext(aSelectData[0].data);
     * }
     * ```
     *
     *
     * @experimental As of version 1.16.6. Might later be integrated into the selectData event.
     *
     * @returns the model context for the given criteria or undefined.
     */
    findContext(
      /**
       * a structure as provided by the sap.viz library
       */
      oCriteria: object
    ): Context;
    /**
     * Fires event {@link #event:dataChange dataChange} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDataChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:dataError dataError} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDataError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:dataRefresh dataRefresh} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDataRefresh(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContext context}.
     *
     * Additional data which works with data context in this dataset. The input could be an array. Each item
     * represents a dimension that is added as the additional information based on data context. The input could
     * be a string of dimension id, or object like this {id: "name", showInTooltip: true}. If showInTooltip
     * is false, the dimensions set in this API will not show in popover or tooltip. However other dimensions
     * in data context will show. In selection event, all dimension information (including the dimension set
     * in this API) will be included. Context will be shown by default in tooltip if only set context with string
     * or string of array.
     *
     *
     * @returns Value of property `context`
     */
    getContext(): any;
    /**
     * Gets content of aggregation {@link #getData data}.
     *
     * Data containing dimensions and measures.
     *
     * **Note:** This aggregation can only be bound against a model, it cannot be managed programmatically using
     * the aggregation mutator methods like addData.
     */
    getData(): UI5Element[];
    /**
     * Gets content of aggregation {@link #getDimensions dimensions}.
     *
     * List of definitions of all dimensions in this dataset
     */
    getDimensions(): DimensionDefinition[];
    /**
     * Gets content of aggregation {@link #getMeasures measures}.
     *
     * list of definitions of all measures in this dataset
     */
    getMeasures(): MeasureDefinition[];
    /**
     * Checks for the provided `sap.ui.core.Element` in the aggregation {@link #getData data}. and returns its
     * index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfData(
      /**
       * The data whose index is looked for
       */
      oData: UI5Element
    ): int;
    /**
     * Checks for the provided `sap.viz.ui5.data.DimensionDefinition` in the aggregation {@link #getDimensions dimensions}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDimension(
      /**
       * The dimension whose index is looked for
       */
      oDimension: DimensionDefinition
    ): int;
    /**
     * Checks for the provided `sap.viz.ui5.data.MeasureDefinition` in the aggregation {@link #getMeasures measures}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfMeasure(
      /**
       * The measure whose index is looked for
       */
      oMeasure: MeasureDefinition
    ): int;
    /**
     * Inserts a data into the aggregation {@link #getData data}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertData(
      /**
       * The data to insert; if empty, nothing is inserted
       */
      oData: UI5Element,
      /**
       * The `0`-based index the data should be inserted at; for a negative value of `iIndex`, the data is inserted
       * at position 0; for a value greater than the current size of the aggregation, the data is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a dimension into the aggregation {@link #getDimensions dimensions}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDimension(
      /**
       * The dimension to insert; if empty, nothing is inserted
       */
      oDimension: DimensionDefinition,
      /**
       * The `0`-based index the dimension should be inserted at; for a negative value of `iIndex`, the dimension
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dimension
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a measure into the aggregation {@link #getMeasures measures}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertMeasure(
      /**
       * The measure to insert; if empty, nothing is inserted
       */
      oMeasure: MeasureDefinition,
      /**
       * The `0`-based index the measure should be inserted at; for a negative value of `iIndex`, the measure
       * is inserted at position 0; for a value greater than the current size of the aggregation, the measure
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getData data}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllData(): UI5Element[];
    /**
     * Removes all the controls from the aggregation {@link #getDimensions dimensions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDimensions(): DimensionDefinition[];
    /**
     * Removes all the controls from the aggregation {@link #getMeasures measures}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllMeasures(): MeasureDefinition[];
    /**
     * Removes a data from the aggregation {@link #getData data}.
     *
     *
     * @returns The removed data or `null`
     */
    removeData(
      /**
       * The data to remove or its index or id
       */
      vData: int | string | UI5Element
    ): UI5Element | null;
    /**
     * Removes a dimension from the aggregation {@link #getDimensions dimensions}.
     *
     *
     * @returns The removed dimension or `null`
     */
    removeDimension(
      /**
       * The dimension to remove or its index or id
       */
      vDimension: int | string | DimensionDefinition
    ): DimensionDefinition | null;
    /**
     * Removes a measure from the aggregation {@link #getMeasures measures}.
     *
     *
     * @returns The removed measure or `null`
     */
    removeMeasure(
      /**
       * The measure to remove or its index or id
       */
      vMeasure: int | string | MeasureDefinition
    ): MeasureDefinition | null;
    /**
     * Sets a new value for property {@link #getContext context}.
     *
     * Additional data which works with data context in this dataset. The input could be an array. Each item
     * represents a dimension that is added as the additional information based on data context. The input could
     * be a string of dimension id, or object like this {id: "name", showInTooltip: true}. If showInTooltip
     * is false, the dimensions set in this API will not show in popover or tooltip. However other dimensions
     * in data context will show. In selection event, all dimension information (including the dimension set
     * in this API) will be included. Context will be shown by default in tooltip if only set context with string
     * or string of array.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContext(
      /**
       * New value for property `context`
       */
      oContext: any
    ): this;
    /**
     * Set chart's default selection. This api will do nothing when use VizFrame.
     *
     * @deprecated As of version 1.19. Please use selection API {@link sap.viz.ui5.core.BaseChart.prototype.selection}.
     */
    setDefaultSelection(
      /**
       * Array of default selection info
       */
      selectionInfos: object[]
    ): void;
    /**
     * Unbinds aggregation {@link #getData data} from model data.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unbindData(): this;
  }
  /**
   * Describes the settings that can be provided to the FlattenedDataset constructor.
   */
  export interface $FlattenedDatasetSettings extends $DatasetSettings {
    /**
     * Additional data which works with data context in this dataset. The input could be an array. Each item
     * represents a dimension that is added as the additional information based on data context. The input could
     * be a string of dimension id, or object like this {id: "name", showInTooltip: true}. If showInTooltip
     * is false, the dimensions set in this API will not show in popover or tooltip. However other dimensions
     * in data context will show. In selection event, all dimension information (including the dimension set
     * in this API) will be included. Context will be shown by default in tooltip if only set context with string
     * or string of array.
     */
    context?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * List of definitions of all dimensions in this dataset
     */
    dimensions?:
      | DimensionDefinition[]
      | DimensionDefinition
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * list of definitions of all measures in this dataset
     */
    measures?:
      | MeasureDefinition[]
      | MeasureDefinition
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Data containing dimensions and measures.
     *
     * **Note:** This aggregation can only be bound against a model, it cannot be managed programmatically using
     * the aggregation mutator methods like addData.
     */
    data?: UI5Element[] | UI5Element | AggregationBindingInfo | `{${string}}`;

    /**
     * data change event
     */
    dataChange?: (oEvent: Event) => void;

    /**
     * data refresh event
     */
    dataRefresh?: (oEvent: Event) => void;

    /**
     * data error event
     */
    dataError?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the FlattenedDataset#dataChange event.
   */
  export interface FlattenedDataset$DataChangeEventParameters {}

  /**
   * Event object of the FlattenedDataset#dataChange event.
   */
  export type FlattenedDataset$DataChangeEvent = Event<
    FlattenedDataset$DataChangeEventParameters,
    FlattenedDataset
  >;

  /**
   * Parameters of the FlattenedDataset#dataError event.
   */
  export interface FlattenedDataset$DataErrorEventParameters {}

  /**
   * Event object of the FlattenedDataset#dataError event.
   */
  export type FlattenedDataset$DataErrorEvent = Event<
    FlattenedDataset$DataErrorEventParameters,
    FlattenedDataset
  >;

  /**
   * Parameters of the FlattenedDataset#dataRefresh event.
   */
  export interface FlattenedDataset$DataRefreshEventParameters {}

  /**
   * Event object of the FlattenedDataset#dataRefresh event.
   */
  export type FlattenedDataset$DataRefreshEvent = Event<
    FlattenedDataset$DataRefreshEventParameters,
    FlattenedDataset
  >;
}

declare module "sap/viz/ui5/data/MeasureDefinition" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Definition of a single Measure
   *
   * @since 1.7.2
   */
  export default class MeasureDefinition extends UI5Element {
    /**
     * Constructor for a new ui5/data/MeasureDefinition.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MeasureDefinitionSettings
    );
    /**
     * Constructor for a new ui5/data/MeasureDefinition.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MeasureDefinitionSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.data.MeasureDefinition with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MeasureDefinition>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.data.MeasureDefinition.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFormat format}.
     *
     * Format pattern for values of the measure
     *
     *
     * @returns Value of property `format`
     */
    getFormat(): any;
    /**
     * Gets current value of property {@link #getGroup group}.
     *
     * Measure group this measure belongs to. Order is significant, number should start from 1. Skip this property
     * when use VizFrame.
     *
     * Default value is `1`.
     *
     *
     * @returns Value of property `group`
     */
    getGroup(): int;
    /**
     * Gets current value of property {@link #getIdentity identity}.
     *
     * Id of the measure as displayed in the chart
     *
     *
     * @returns Value of property `identity`
     */
    getIdentity(): string;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Name of the measure as displayed in the chart
     *
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getRange range}.
     *
     * Value range
     *
     * Default value is `[]`.
     *
     *
     * @returns Value of property `range`
     */
    getRange(): any[];
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * Unit of measure
     *
     *
     * @returns Value of property `unit`
     */
    getUnit(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value for the measure. Usually bound to some model field.
     *
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * Sets a new value for property {@link #getFormat format}.
     *
     * Format pattern for values of the measure
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormat(
      /**
       * New value for property `format`
       */
      oFormat?: any
    ): this;
    /**
     * Sets a new value for property {@link #getGroup group}.
     *
     * Measure group this measure belongs to. Order is significant, number should start from 1. Skip this property
     * when use VizFrame.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroup(
      /**
       * New value for property `group`
       */
      iGroup?: int
    ): this;
    /**
     * Sets a new value for property {@link #getIdentity identity}.
     *
     * Id of the measure as displayed in the chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIdentity(
      /**
       * New value for property `identity`
       */
      sIdentity?: string
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Name of the measure as displayed in the chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRange range}.
     *
     * Value range
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRange(
      /**
       * New value for property `range`
       */
      sRange?: any[]
    ): this;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * Unit of measure
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value for the measure. Usually bound to some model field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue?: any
    ): this;
  }
  /**
   * Describes the settings that can be provided to the MeasureDefinition constructor.
   */
  export interface $MeasureDefinitionSettings extends $ElementSettings {
    /**
     * Measure group this measure belongs to. Order is significant, number should start from 1. Skip this property
     * when use VizFrame.
     */
    group?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Value for the measure. Usually bound to some model field.
     */
    value?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Name of the measure as displayed in the chart
     */
    name?: string | PropertyBindingInfo;

    /**
     * Id of the measure as displayed in the chart
     */
    identity?: string | PropertyBindingInfo;

    /**
     * Format pattern for values of the measure
     */
    format?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Value range
     */
    range?: any[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Unit of measure
     */
    unit?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/Donut" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import Datatransform from "sap/viz/ui5/types/Datatransform";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Pie from "sap/viz/ui5/types/Pie";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Donut
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'donut'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Donut extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Donut
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DonutSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Donut
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DonutSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Donut with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Donut>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Donut.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Donut` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Donut` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the dataTransform in the aggregation {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataTransform(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Donut`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Donut`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Donut`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Donut`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getDataTransform dataTransform}.
     *
     * Module sap.viz.modules.datatransform
     */
    getDataTransform(): Datatransform;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.pie
     */
    getPlotArea(): Pie;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataTransform(
      /**
       * The dataTransform to set
       */
      oDataTransform: Datatransform
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Pie
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Donut constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'donut'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DonutSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.pie
     */
    plotArea?: Pie;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.datatransform
     */
    dataTransform?: Datatransform;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Donut#deselectData event.
   */
  export interface Donut$DeselectDataEventParameters {}

  /**
   * Event object of the Donut#deselectData event.
   */
  export type Donut$DeselectDataEvent = Event<
    Donut$DeselectDataEventParameters,
    Donut
  >;

  /**
   * Parameters of the Donut#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Donut$HideTooltipEventParameters {}

  /**
   * Event object of the Donut#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Donut$HideTooltipEvent = Event<
    Donut$HideTooltipEventParameters,
    Donut
  >;

  /**
   * Parameters of the Donut#initialized event.
   */
  export interface Donut$InitializedEventParameters {}

  /**
   * Event object of the Donut#initialized event.
   */
  export type Donut$InitializedEvent = Event<
    Donut$InitializedEventParameters,
    Donut
  >;

  /**
   * Parameters of the Donut#selectData event.
   */
  export interface Donut$SelectDataEventParameters {}

  /**
   * Event object of the Donut#selectData event.
   */
  export type Donut$SelectDataEvent = Event<
    Donut$SelectDataEventParameters,
    Donut
  >;

  /**
   * Parameters of the Donut#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Donut$ShowTooltipEventParameters {}

  /**
   * Event object of the Donut#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Donut$ShowTooltipEvent = Event<
    Donut$ShowTooltipEventParameters,
    Donut
  >;
}

declare module "sap/viz/ui5/DualBar" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bar from "sap/viz/ui5/types/Bar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualBar
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_bar'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualBar extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualBarSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualBarSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualBar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualBar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualBar` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xAxis2 in the aggregation {@link #getXAxis2 xAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis2(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.bar
     */
    getPlotArea(): Bar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXAxis2 xAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis2(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Bar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis2 xAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis2(
      /**
       * The xAxis2 to set
       */
      oXAxis2: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualBar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_bar'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualBarSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.bar
     */
    plotArea?: Bar;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualBar#deselectData event.
   */
  export interface DualBar$DeselectDataEventParameters {}

  /**
   * Event object of the DualBar#deselectData event.
   */
  export type DualBar$DeselectDataEvent = Event<
    DualBar$DeselectDataEventParameters,
    DualBar
  >;

  /**
   * Parameters of the DualBar#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualBar$HideTooltipEventParameters {}

  /**
   * Event object of the DualBar#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualBar$HideTooltipEvent = Event<
    DualBar$HideTooltipEventParameters,
    DualBar
  >;

  /**
   * Parameters of the DualBar#initialized event.
   */
  export interface DualBar$InitializedEventParameters {}

  /**
   * Event object of the DualBar#initialized event.
   */
  export type DualBar$InitializedEvent = Event<
    DualBar$InitializedEventParameters,
    DualBar
  >;

  /**
   * Parameters of the DualBar#selectData event.
   */
  export interface DualBar$SelectDataEventParameters {}

  /**
   * Event object of the DualBar#selectData event.
   */
  export type DualBar$SelectDataEvent = Event<
    DualBar$SelectDataEventParameters,
    DualBar
  >;

  /**
   * Parameters of the DualBar#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualBar$ShowTooltipEventParameters {}

  /**
   * Event object of the DualBar#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualBar$ShowTooltipEvent = Event<
    DualBar$ShowTooltipEventParameters,
    DualBar
  >;
}

declare module "sap/viz/ui5/DualColumn" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import VerticalBar from "sap/viz/ui5/types/VerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualColumn
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_column'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualColumn extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualColumnSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualColumnSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualColumn with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualColumn.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.verticalbar
     */
    getPlotArea(): VerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: VerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualColumn constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_column'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualColumnSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.verticalbar
     */
    plotArea?: VerticalBar;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualColumn#deselectData event.
   */
  export interface DualColumn$DeselectDataEventParameters {}

  /**
   * Event object of the DualColumn#deselectData event.
   */
  export type DualColumn$DeselectDataEvent = Event<
    DualColumn$DeselectDataEventParameters,
    DualColumn
  >;

  /**
   * Parameters of the DualColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualColumn$HideTooltipEventParameters {}

  /**
   * Event object of the DualColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualColumn$HideTooltipEvent = Event<
    DualColumn$HideTooltipEventParameters,
    DualColumn
  >;

  /**
   * Parameters of the DualColumn#initialized event.
   */
  export interface DualColumn$InitializedEventParameters {}

  /**
   * Event object of the DualColumn#initialized event.
   */
  export type DualColumn$InitializedEvent = Event<
    DualColumn$InitializedEventParameters,
    DualColumn
  >;

  /**
   * Parameters of the DualColumn#selectData event.
   */
  export interface DualColumn$SelectDataEventParameters {}

  /**
   * Event object of the DualColumn#selectData event.
   */
  export type DualColumn$SelectDataEvent = Event<
    DualColumn$SelectDataEventParameters,
    DualColumn
  >;

  /**
   * Parameters of the DualColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualColumn$ShowTooltipEventParameters {}

  /**
   * Event object of the DualColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualColumn$ShowTooltipEvent = Event<
    DualColumn$ShowTooltipEventParameters,
    DualColumn
  >;
}

declare module "sap/viz/ui5/DualCombination" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Combination from "sap/viz/ui5/types/Combination";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualCombination
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualCombination extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualCombination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualCombinationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualCombination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualCombinationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualCombination with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualCombination>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualCombination.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualCombination` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualCombination` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualCombination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualCombination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualCombination`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.combination
     */
    getPlotArea(): Combination;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Combination
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualCombination constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualCombinationSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.combination
     */
    plotArea?: Combination;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualCombination#deselectData event.
   */
  export interface DualCombination$DeselectDataEventParameters {}

  /**
   * Event object of the DualCombination#deselectData event.
   */
  export type DualCombination$DeselectDataEvent = Event<
    DualCombination$DeselectDataEventParameters,
    DualCombination
  >;

  /**
   * Parameters of the DualCombination#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualCombination$HideTooltipEventParameters {}

  /**
   * Event object of the DualCombination#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualCombination$HideTooltipEvent = Event<
    DualCombination$HideTooltipEventParameters,
    DualCombination
  >;

  /**
   * Parameters of the DualCombination#initialized event.
   */
  export interface DualCombination$InitializedEventParameters {}

  /**
   * Event object of the DualCombination#initialized event.
   */
  export type DualCombination$InitializedEvent = Event<
    DualCombination$InitializedEventParameters,
    DualCombination
  >;

  /**
   * Parameters of the DualCombination#selectData event.
   */
  export interface DualCombination$SelectDataEventParameters {}

  /**
   * Event object of the DualCombination#selectData event.
   */
  export type DualCombination$SelectDataEvent = Event<
    DualCombination$SelectDataEventParameters,
    DualCombination
  >;

  /**
   * Parameters of the DualCombination#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualCombination$ShowTooltipEventParameters {}

  /**
   * Event object of the DualCombination#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualCombination$ShowTooltipEvent = Event<
    DualCombination$ShowTooltipEventParameters,
    DualCombination
  >;
}

declare module "sap/viz/ui5/DualLine" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Line from "sap/viz/ui5/types/Line";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualLine
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_line'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualLine extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualLine
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualLineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualLine
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualLineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualLine with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualLine>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualLine.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualLine` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualLine` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualLine`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualLine`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualLine`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualLine`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.line
     */
    getPlotArea(): Line;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Line
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualLine constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_line'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualLineSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.line
     */
    plotArea?: Line;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualLine#deselectData event.
   */
  export interface DualLine$DeselectDataEventParameters {}

  /**
   * Event object of the DualLine#deselectData event.
   */
  export type DualLine$DeselectDataEvent = Event<
    DualLine$DeselectDataEventParameters,
    DualLine
  >;

  /**
   * Parameters of the DualLine#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualLine$HideTooltipEventParameters {}

  /**
   * Event object of the DualLine#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualLine$HideTooltipEvent = Event<
    DualLine$HideTooltipEventParameters,
    DualLine
  >;

  /**
   * Parameters of the DualLine#initialized event.
   */
  export interface DualLine$InitializedEventParameters {}

  /**
   * Event object of the DualLine#initialized event.
   */
  export type DualLine$InitializedEvent = Event<
    DualLine$InitializedEventParameters,
    DualLine
  >;

  /**
   * Parameters of the DualLine#selectData event.
   */
  export interface DualLine$SelectDataEventParameters {}

  /**
   * Event object of the DualLine#selectData event.
   */
  export type DualLine$SelectDataEvent = Event<
    DualLine$SelectDataEventParameters,
    DualLine
  >;

  /**
   * Parameters of the DualLine#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualLine$ShowTooltipEventParameters {}

  /**
   * Event object of the DualLine#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualLine$ShowTooltipEvent = Event<
    DualLine$ShowTooltipEventParameters,
    DualLine
  >;
}

declare module "sap/viz/ui5/DualStackedColumn" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import StackedVerticalBar from "sap/viz/ui5/types/StackedVerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualStackedColumn
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualStackedColumn extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualStackedColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualStackedColumnSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualStackedColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualStackedColumnSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualStackedColumn with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualStackedColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualStackedColumn.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.stackedverticalbar
     */
    getPlotArea(): StackedVerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: StackedVerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualStackedColumn constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'dual_stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualStackedColumnSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.stackedverticalbar
     */
    plotArea?: StackedVerticalBar;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualStackedColumn#deselectData event.
   */
  export interface DualStackedColumn$DeselectDataEventParameters {}

  /**
   * Event object of the DualStackedColumn#deselectData event.
   */
  export type DualStackedColumn$DeselectDataEvent = Event<
    DualStackedColumn$DeselectDataEventParameters,
    DualStackedColumn
  >;

  /**
   * Parameters of the DualStackedColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualStackedColumn$HideTooltipEventParameters {}

  /**
   * Event object of the DualStackedColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualStackedColumn$HideTooltipEvent = Event<
    DualStackedColumn$HideTooltipEventParameters,
    DualStackedColumn
  >;

  /**
   * Parameters of the DualStackedColumn#initialized event.
   */
  export interface DualStackedColumn$InitializedEventParameters {}

  /**
   * Event object of the DualStackedColumn#initialized event.
   */
  export type DualStackedColumn$InitializedEvent = Event<
    DualStackedColumn$InitializedEventParameters,
    DualStackedColumn
  >;

  /**
   * Parameters of the DualStackedColumn#selectData event.
   */
  export interface DualStackedColumn$SelectDataEventParameters {}

  /**
   * Event object of the DualStackedColumn#selectData event.
   */
  export type DualStackedColumn$SelectDataEvent = Event<
    DualStackedColumn$SelectDataEventParameters,
    DualStackedColumn
  >;

  /**
   * Parameters of the DualStackedColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualStackedColumn$ShowTooltipEventParameters {}

  /**
   * Event object of the DualStackedColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualStackedColumn$ShowTooltipEvent = Event<
    DualStackedColumn$ShowTooltipEventParameters,
    DualStackedColumn
  >;
}

declare module "sap/viz/ui5/DualStackedColumn100" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import StackedVerticalBar from "sap/viz/ui5/types/StackedVerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.DualStackedColumn100
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': '100_dual_stacked_column'})`) **control to benefit from new
   * charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class DualStackedColumn100 extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.DualStackedColumn100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DualStackedColumn100Settings
    );
    /**
     * Constructor for a new sap.viz.ui5.DualStackedColumn100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DualStackedColumn100Settings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.DualStackedColumn100 with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DualStackedColumn100>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.DualStackedColumn100.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.DualStackedColumn100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.DualStackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Destroys the yAxis2 in the aggregation {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis2(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.DualStackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.stackedverticalbar
     */
    getPlotArea(): StackedVerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getYAxis2 yAxis2}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis2(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: StackedVerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis2 yAxis2}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis2(
      /**
       * The yAxis2 to set
       */
      oYAxis2: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the DualStackedColumn100 constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': '100_dual_stacked_column'})`) **control to benefit from new
   * charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DualStackedColumn100Settings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.stackedverticalbar
     */
    plotArea?: StackedVerticalBar;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis2?: Axis;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the DualStackedColumn100#deselectData event.
   */
  export interface DualStackedColumn100$DeselectDataEventParameters {}

  /**
   * Event object of the DualStackedColumn100#deselectData event.
   */
  export type DualStackedColumn100$DeselectDataEvent = Event<
    DualStackedColumn100$DeselectDataEventParameters,
    DualStackedColumn100
  >;

  /**
   * Parameters of the DualStackedColumn100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualStackedColumn100$HideTooltipEventParameters {}

  /**
   * Event object of the DualStackedColumn100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualStackedColumn100$HideTooltipEvent = Event<
    DualStackedColumn100$HideTooltipEventParameters,
    DualStackedColumn100
  >;

  /**
   * Parameters of the DualStackedColumn100#initialized event.
   */
  export interface DualStackedColumn100$InitializedEventParameters {}

  /**
   * Event object of the DualStackedColumn100#initialized event.
   */
  export type DualStackedColumn100$InitializedEvent = Event<
    DualStackedColumn100$InitializedEventParameters,
    DualStackedColumn100
  >;

  /**
   * Parameters of the DualStackedColumn100#selectData event.
   */
  export interface DualStackedColumn100$SelectDataEventParameters {}

  /**
   * Event object of the DualStackedColumn100#selectData event.
   */
  export type DualStackedColumn100$SelectDataEvent = Event<
    DualStackedColumn100$SelectDataEventParameters,
    DualStackedColumn100
  >;

  /**
   * Parameters of the DualStackedColumn100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface DualStackedColumn100$ShowTooltipEventParameters {}

  /**
   * Event object of the DualStackedColumn100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type DualStackedColumn100$ShowTooltipEvent = Event<
    DualStackedColumn100$ShowTooltipEventParameters,
    DualStackedColumn100
  >;
}

declare module "sap/viz/ui5/format/ChartFormatter" {
  /**
   * Provides methods set chart formatter for VizFrame.
   */
  export default class ChartFormatter {
    constructor();
    /**
     * List (Enum) type sap.viz.ui5.format.ChartFormatter.DefaultPattern
     *
     * This enum is part of the 'sap/viz/ui5/format/ChartFormatter' module export and must be accessed by the
     * property 'DefaultPattern'.
     */
    static DefaultPattern: typeof DefaultPattern;

    /**
     * Get an instance of ChartFormatter
     */
    static getInstance(): void;
    /**
     * Format the value according to the custom format function
     */
    format(): void;
  }
  /**
   * List (Enum) type sap.viz.ui5.format.ChartFormatter.DefaultPattern
   *
   * This enum is part of the 'sap/viz/ui5/format/ChartFormatter' module export and must be accessed by the
   * property 'DefaultPattern'.
   */
  enum DefaultPattern {
    /**
     * Binary file size
     *
     * e.g. 1 Kibibyte = 1024 Byte
     */
    BINARYFILESIZE = "BinaryFileSize",
    /**
     * type: Currency
     *
     * style: "standard"
     *
     * e.g. 234234.234 is formatted as 234,234.23
     *
     * @deprecated As of version 1.48.0.
     */
    CURRENCY = "Currency",
    /**
     * Decimal file size
     *
     * e.g. 1 Kilobyte = 1000 Byte
     */
    DECIMALFILESIZE = "DecimalFileSize",
    /**
     * type: Float
     *
     * style: "long"
     *
     * e.g. 2.3 million
     */
    LONGFLOAT = "LongFloat",
    /**
     * Medium day
     *
     * e.g. 01
     */
    MEDIUMDAY = "MediumDay",
    /**
     * Medium hour
     *
     * e.g. 18
     */
    MEDIUMHOUR = "MediumHour",
    /**
     * Medium minute
     *
     * e.g. 18
     */
    MEDIUMMINUTE = "MediumMinute",
    /**
     * Medium month
     *
     * e.g. Aug
     */
    MEDIUMMONTH = "MediumMonth",
    /**
     * Medium quarter
     *
     * e.g. Q3
     */
    MEDIUMQUARTER = "MediumQuarter",
    /**
     * Medium second
     *
     * e.g. 59
     */
    MEDIUMSECOND = "MediumSecond",
    /**
     * Medium week
     *
     * e.g. CW35
     */
    MEDIUMWEEK = "MediumWeek",
    /**
     * Medium year
     *
     * e.g. 2015
     */
    MEDIUMYEAR = "MediumYear",
    /**
     * Medium format pattern for combination of year, month, and day
     *
     * e.g. Aug 28, 2015
     */
    MEDIUMYEARMONTHDAY = "MediumYearMonthDay",
    /**
     * type: Percentage
     *
     * style: "standard"
     *
     * e.g. 0.0234 is formatted as 2.34%
     *
     * @deprecated As of version 1.48.0.
     */
    PERCENT = "Percent",
    /**
     * Quarter
     *
     * e.g. Q3
     *
     * @deprecated As of version 1.48.0.
     */
    QUARTER = "Quarter",
    /**
     * type: Float
     *
     * style: "short"
     *
     * e.g. 2.3M
     */
    SHORTFLOAT = "ShortFloat",
    /**
     * type: Float
     *
     * style: "short"
     *
     * maxFractionDigits: 2
     *
     * e.g. 2.34234234 is formatted as 2.34
     */
    SHORTFLOAT_MFD2 = "ShortFloat_MFD2",
    /**
     * type: Integer
     *
     * style: "short"
     *
     * e.g. 234M
     */
    SHORTINTEGER = "ShortInteger",
    /**
     * type: Currency
     *
     * style: "standard"
     *
     * e.g. 234234.234 is formatted as 234,234.23
     */
    STANDARDCURRENCY = "StandardCurrency",
    /**
     * type: Float
     *
     * style: "standard"
     *
     * e.g. 234,234.234
     */
    STANDARDFLOAT = "StandardFloat",
    /**
     * type: Integer
     *
     * style: "standard"
     *
     * e.g. 234234234
     */
    STANDARDINTEGER = "StandardInteger",
    /**
     * type: Percentage
     *
     * style: "standard"
     *
     * e.g. 0.0234234 is formatted as 2.34234%
     */
    STANDARDPERCENT = "StandardPercent",
    /**
     * type: Percentage
     *
     * style: "standard"
     *
     * maxFractionDigits: 2
     *
     * e.g. 0.0234234 is formatted as 2.34%
     */
    STANDARDPERCENT_MFD2 = "StandardPercent_MFD2",
    /**
     * Week
     *
     * e.g. CW35
     *
     * @deprecated As of version 1.48.0.
     */
    WEEK = "Week",
    /**
     * Format pattern for combination of year, month, and day
     *
     * e.g. Aug 28, 2015
     *
     * @deprecated As of version 1.48.0.
     */
    YEARMONTHDAY = "YearMonthDay",
  }
}

declare module "sap/viz/ui5/Heatmap" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Heatmap1 from "sap/viz/ui5/types/Heatmap";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Heatmap
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'heatmap'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Heatmap extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Heatmap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HeatmapSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Heatmap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HeatmapSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Heatmap with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Heatmap>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Heatmap.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Heatmap` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Heatmap` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Heatmap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Heatmap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Heatmap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.heatmap
     */
    getPlotArea(): Heatmap1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Heatmap1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Heatmap constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'heatmap'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $HeatmapSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.heatmap
     */
    plotArea?: Heatmap1;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Heatmap#deselectData event.
   */
  export interface Heatmap$DeselectDataEventParameters {}

  /**
   * Event object of the Heatmap#deselectData event.
   */
  export type Heatmap$DeselectDataEvent = Event<
    Heatmap$DeselectDataEventParameters,
    Heatmap
  >;

  /**
   * Parameters of the Heatmap#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Heatmap$HideTooltipEventParameters {}

  /**
   * Event object of the Heatmap#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Heatmap$HideTooltipEvent = Event<
    Heatmap$HideTooltipEventParameters,
    Heatmap
  >;

  /**
   * Parameters of the Heatmap#initialized event.
   */
  export interface Heatmap$InitializedEventParameters {}

  /**
   * Event object of the Heatmap#initialized event.
   */
  export type Heatmap$InitializedEvent = Event<
    Heatmap$InitializedEventParameters,
    Heatmap
  >;

  /**
   * Parameters of the Heatmap#selectData event.
   */
  export interface Heatmap$SelectDataEventParameters {}

  /**
   * Event object of the Heatmap#selectData event.
   */
  export type Heatmap$SelectDataEvent = Event<
    Heatmap$SelectDataEventParameters,
    Heatmap
  >;

  /**
   * Parameters of the Heatmap#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Heatmap$ShowTooltipEventParameters {}

  /**
   * Event object of the Heatmap#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Heatmap$ShowTooltipEvent = Event<
    Heatmap$ShowTooltipEventParameters,
    Heatmap
  >;
}

declare module "sap/viz/ui5/HorizontalArea" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Area from "sap/viz/ui5/types/Area";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.HorizontalArea
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class HorizontalArea extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.HorizontalArea
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HorizontalAreaSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.HorizontalArea
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HorizontalAreaSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.HorizontalArea with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HorizontalArea>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.HorizontalArea.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.area
     */
    getPlotArea(): Area;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Area
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the HorizontalArea constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $HorizontalAreaSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.area
     */
    plotArea?: Area;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the HorizontalArea#deselectData event.
   */
  export interface HorizontalArea$DeselectDataEventParameters {}

  /**
   * Event object of the HorizontalArea#deselectData event.
   */
  export type HorizontalArea$DeselectDataEvent = Event<
    HorizontalArea$DeselectDataEventParameters,
    HorizontalArea
  >;

  /**
   * Parameters of the HorizontalArea#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface HorizontalArea$HideTooltipEventParameters {}

  /**
   * Event object of the HorizontalArea#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type HorizontalArea$HideTooltipEvent = Event<
    HorizontalArea$HideTooltipEventParameters,
    HorizontalArea
  >;

  /**
   * Parameters of the HorizontalArea#initialized event.
   */
  export interface HorizontalArea$InitializedEventParameters {}

  /**
   * Event object of the HorizontalArea#initialized event.
   */
  export type HorizontalArea$InitializedEvent = Event<
    HorizontalArea$InitializedEventParameters,
    HorizontalArea
  >;

  /**
   * Parameters of the HorizontalArea#selectData event.
   */
  export interface HorizontalArea$SelectDataEventParameters {}

  /**
   * Event object of the HorizontalArea#selectData event.
   */
  export type HorizontalArea$SelectDataEvent = Event<
    HorizontalArea$SelectDataEventParameters,
    HorizontalArea
  >;

  /**
   * Parameters of the HorizontalArea#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface HorizontalArea$ShowTooltipEventParameters {}

  /**
   * Event object of the HorizontalArea#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type HorizontalArea$ShowTooltipEvent = Event<
    HorizontalArea$ShowTooltipEventParameters,
    HorizontalArea
  >;
}

declare module "sap/viz/ui5/HorizontalArea100" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Area from "sap/viz/ui5/types/Area";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.HorizontalArea100
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class HorizontalArea100 extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.HorizontalArea100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HorizontalArea100Settings
    );
    /**
     * Constructor for a new sap.viz.ui5.HorizontalArea100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HorizontalArea100Settings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.HorizontalArea100 with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HorizontalArea100>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.HorizontalArea100.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.HorizontalArea100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.HorizontalArea100` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.HorizontalArea100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.area
     */
    getPlotArea(): Area;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Area
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the HorizontalArea100 constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $HorizontalArea100Settings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.area
     */
    plotArea?: Area;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the HorizontalArea100#deselectData event.
   */
  export interface HorizontalArea100$DeselectDataEventParameters {}

  /**
   * Event object of the HorizontalArea100#deselectData event.
   */
  export type HorizontalArea100$DeselectDataEvent = Event<
    HorizontalArea100$DeselectDataEventParameters,
    HorizontalArea100
  >;

  /**
   * Parameters of the HorizontalArea100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface HorizontalArea100$HideTooltipEventParameters {}

  /**
   * Event object of the HorizontalArea100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type HorizontalArea100$HideTooltipEvent = Event<
    HorizontalArea100$HideTooltipEventParameters,
    HorizontalArea100
  >;

  /**
   * Parameters of the HorizontalArea100#initialized event.
   */
  export interface HorizontalArea100$InitializedEventParameters {}

  /**
   * Event object of the HorizontalArea100#initialized event.
   */
  export type HorizontalArea100$InitializedEvent = Event<
    HorizontalArea100$InitializedEventParameters,
    HorizontalArea100
  >;

  /**
   * Parameters of the HorizontalArea100#selectData event.
   */
  export interface HorizontalArea100$SelectDataEventParameters {}

  /**
   * Event object of the HorizontalArea100#selectData event.
   */
  export type HorizontalArea100$SelectDataEvent = Event<
    HorizontalArea100$SelectDataEventParameters,
    HorizontalArea100
  >;

  /**
   * Parameters of the HorizontalArea100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface HorizontalArea100$ShowTooltipEventParameters {}

  /**
   * Event object of the HorizontalArea100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type HorizontalArea100$ShowTooltipEvent = Event<
    HorizontalArea100$ShowTooltipEventParameters,
    HorizontalArea100
  >;
}

declare module "sap/viz/ui5/Line" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Line1 from "sap/viz/ui5/types/Line";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Line
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'line'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Line extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Line with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Line.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Line` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Line` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.line
     */
    getPlotArea(): Line1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Line1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'line'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $LineSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.line
     */
    plotArea?: Line1;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Line#deselectData event.
   */
  export interface Line$DeselectDataEventParameters {}

  /**
   * Event object of the Line#deselectData event.
   */
  export type Line$DeselectDataEvent = Event<
    Line$DeselectDataEventParameters,
    Line
  >;

  /**
   * Parameters of the Line#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Line$HideTooltipEventParameters {}

  /**
   * Event object of the Line#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Line$HideTooltipEvent = Event<
    Line$HideTooltipEventParameters,
    Line
  >;

  /**
   * Parameters of the Line#initialized event.
   */
  export interface Line$InitializedEventParameters {}

  /**
   * Event object of the Line#initialized event.
   */
  export type Line$InitializedEvent = Event<
    Line$InitializedEventParameters,
    Line
  >;

  /**
   * Parameters of the Line#selectData event.
   */
  export interface Line$SelectDataEventParameters {}

  /**
   * Event object of the Line#selectData event.
   */
  export type Line$SelectDataEvent = Event<
    Line$SelectDataEventParameters,
    Line
  >;

  /**
   * Parameters of the Line#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Line$ShowTooltipEventParameters {}

  /**
   * Event object of the Line#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Line$ShowTooltipEvent = Event<
    Line$ShowTooltipEventParameters,
    Line
  >;
}

declare module "sap/viz/ui5/Pie" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import Datatransform from "sap/viz/ui5/types/Datatransform";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Pie1 from "sap/viz/ui5/types/Pie";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Pie
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'pie'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Pie extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Pie
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PieSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Pie
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PieSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Pie with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Pie>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Pie.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Pie` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Pie` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the dataTransform in the aggregation {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataTransform(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Pie`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Pie`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Pie`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Pie`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getDataTransform dataTransform}.
     *
     * Module sap.viz.modules.datatransform
     */
    getDataTransform(): Datatransform;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.pie
     */
    getPlotArea(): Pie1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataTransform(
      /**
       * The dataTransform to set
       */
      oDataTransform: Datatransform
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Pie1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Pie constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'pie'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $PieSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.pie
     */
    plotArea?: Pie1;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.datatransform
     */
    dataTransform?: Datatransform;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Pie#deselectData event.
   */
  export interface Pie$DeselectDataEventParameters {}

  /**
   * Event object of the Pie#deselectData event.
   */
  export type Pie$DeselectDataEvent = Event<
    Pie$DeselectDataEventParameters,
    Pie
  >;

  /**
   * Parameters of the Pie#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Pie$HideTooltipEventParameters {}

  /**
   * Event object of the Pie#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Pie$HideTooltipEvent = Event<Pie$HideTooltipEventParameters, Pie>;

  /**
   * Parameters of the Pie#initialized event.
   */
  export interface Pie$InitializedEventParameters {}

  /**
   * Event object of the Pie#initialized event.
   */
  export type Pie$InitializedEvent = Event<Pie$InitializedEventParameters, Pie>;

  /**
   * Parameters of the Pie#selectData event.
   */
  export interface Pie$SelectDataEventParameters {}

  /**
   * Event object of the Pie#selectData event.
   */
  export type Pie$SelectDataEvent = Event<Pie$SelectDataEventParameters, Pie>;

  /**
   * Parameters of the Pie#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Pie$ShowTooltipEventParameters {}

  /**
   * Event object of the Pie#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Pie$ShowTooltipEvent = Event<Pie$ShowTooltipEventParameters, Pie>;
}

declare module "sap/viz/ui5/Scatter" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import Datatransform from "sap/viz/ui5/types/Datatransform";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Scatter1 from "sap/viz/ui5/types/Scatter";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Scatter
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'scatter'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Scatter extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Scatter
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ScatterSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Scatter
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ScatterSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Scatter with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scatter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Scatter.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Scatter` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Scatter` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the dataTransform in the aggregation {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataTransform(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Scatter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Scatter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Scatter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Scatter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getDataTransform dataTransform}.
     *
     * Module sap.viz.modules.datatransform
     */
    getDataTransform(): Datatransform;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.scatter
     */
    getPlotArea(): Scatter1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getDataTransform dataTransform}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataTransform(
      /**
       * The dataTransform to set
       */
      oDataTransform: Datatransform
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Scatter1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Scatter constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'scatter'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $ScatterSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.scatter
     */
    plotArea?: Scatter1;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.datatransform
     */
    dataTransform?: Datatransform;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Scatter#deselectData event.
   */
  export interface Scatter$DeselectDataEventParameters {}

  /**
   * Event object of the Scatter#deselectData event.
   */
  export type Scatter$DeselectDataEvent = Event<
    Scatter$DeselectDataEventParameters,
    Scatter
  >;

  /**
   * Parameters of the Scatter#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Scatter$HideTooltipEventParameters {}

  /**
   * Event object of the Scatter#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Scatter$HideTooltipEvent = Event<
    Scatter$HideTooltipEventParameters,
    Scatter
  >;

  /**
   * Parameters of the Scatter#initialized event.
   */
  export interface Scatter$InitializedEventParameters {}

  /**
   * Event object of the Scatter#initialized event.
   */
  export type Scatter$InitializedEvent = Event<
    Scatter$InitializedEventParameters,
    Scatter
  >;

  /**
   * Parameters of the Scatter#selectData event.
   */
  export interface Scatter$SelectDataEventParameters {}

  /**
   * Event object of the Scatter#selectData event.
   */
  export type Scatter$SelectDataEvent = Event<
    Scatter$SelectDataEventParameters,
    Scatter
  >;

  /**
   * Parameters of the Scatter#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Scatter$ShowTooltipEventParameters {}

  /**
   * Event object of the Scatter#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Scatter$ShowTooltipEvent = Event<
    Scatter$ShowTooltipEventParameters,
    Scatter
  >;
}

declare module "sap/viz/ui5/StackedColumn" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import StackedVerticalBar from "sap/viz/ui5/types/StackedVerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.StackedColumn
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class StackedColumn extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.StackedColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedColumnSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.StackedColumn
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedColumnSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.StackedColumn with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StackedColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.StackedColumn.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.stackedverticalbar
     */
    getPlotArea(): StackedVerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: StackedVerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the StackedColumn constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $StackedColumnSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.stackedverticalbar
     */
    plotArea?: StackedVerticalBar;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the StackedColumn#deselectData event.
   */
  export interface StackedColumn$DeselectDataEventParameters {}

  /**
   * Event object of the StackedColumn#deselectData event.
   */
  export type StackedColumn$DeselectDataEvent = Event<
    StackedColumn$DeselectDataEventParameters,
    StackedColumn
  >;

  /**
   * Parameters of the StackedColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface StackedColumn$HideTooltipEventParameters {}

  /**
   * Event object of the StackedColumn#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type StackedColumn$HideTooltipEvent = Event<
    StackedColumn$HideTooltipEventParameters,
    StackedColumn
  >;

  /**
   * Parameters of the StackedColumn#initialized event.
   */
  export interface StackedColumn$InitializedEventParameters {}

  /**
   * Event object of the StackedColumn#initialized event.
   */
  export type StackedColumn$InitializedEvent = Event<
    StackedColumn$InitializedEventParameters,
    StackedColumn
  >;

  /**
   * Parameters of the StackedColumn#selectData event.
   */
  export interface StackedColumn$SelectDataEventParameters {}

  /**
   * Event object of the StackedColumn#selectData event.
   */
  export type StackedColumn$SelectDataEvent = Event<
    StackedColumn$SelectDataEventParameters,
    StackedColumn
  >;

  /**
   * Parameters of the StackedColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface StackedColumn$ShowTooltipEventParameters {}

  /**
   * Event object of the StackedColumn#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type StackedColumn$ShowTooltipEvent = Event<
    StackedColumn$ShowTooltipEventParameters,
    StackedColumn
  >;
}

declare module "sap/viz/ui5/StackedColumn100" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import StackedVerticalBar from "sap/viz/ui5/types/StackedVerticalBar";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.StackedColumn100
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': '100_stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class StackedColumn100 extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.StackedColumn100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedColumn100Settings
    );
    /**
     * Constructor for a new sap.viz.ui5.StackedColumn100
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedColumn100Settings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.StackedColumn100 with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StackedColumn100>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.StackedColumn100.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.StackedColumn100` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.StackedColumn100` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.StackedColumn100`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.stackedverticalbar
     */
    getPlotArea(): StackedVerticalBar;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: StackedVerticalBar
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the StackedColumn100 constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': '100_stacked_column'})`) **control to benefit from new charting
   * enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $StackedColumn100Settings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.stackedverticalbar
     */
    plotArea?: StackedVerticalBar;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the StackedColumn100#deselectData event.
   */
  export interface StackedColumn100$DeselectDataEventParameters {}

  /**
   * Event object of the StackedColumn100#deselectData event.
   */
  export type StackedColumn100$DeselectDataEvent = Event<
    StackedColumn100$DeselectDataEventParameters,
    StackedColumn100
  >;

  /**
   * Parameters of the StackedColumn100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface StackedColumn100$HideTooltipEventParameters {}

  /**
   * Event object of the StackedColumn100#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type StackedColumn100$HideTooltipEvent = Event<
    StackedColumn100$HideTooltipEventParameters,
    StackedColumn100
  >;

  /**
   * Parameters of the StackedColumn100#initialized event.
   */
  export interface StackedColumn100$InitializedEventParameters {}

  /**
   * Event object of the StackedColumn100#initialized event.
   */
  export type StackedColumn100$InitializedEvent = Event<
    StackedColumn100$InitializedEventParameters,
    StackedColumn100
  >;

  /**
   * Parameters of the StackedColumn100#selectData event.
   */
  export interface StackedColumn100$SelectDataEventParameters {}

  /**
   * Event object of the StackedColumn100#selectData event.
   */
  export type StackedColumn100$SelectDataEvent = Event<
    StackedColumn100$SelectDataEventParameters,
    StackedColumn100
  >;

  /**
   * Parameters of the StackedColumn100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface StackedColumn100$ShowTooltipEventParameters {}

  /**
   * Event object of the StackedColumn100#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type StackedColumn100$ShowTooltipEvent = Event<
    StackedColumn100$ShowTooltipEventParameters,
    StackedColumn100
  >;
}

declare module "sap/viz/ui5/TimeBubble" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Background from "sap/viz/ui5/types/Background";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bubble from "sap/viz/ui5/types/Bubble";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import Axis from "sap/viz/ui5/types/Axis";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.TimeBubble
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'time_bubble'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class TimeBubble extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.TimeBubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TimeBubbleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.TimeBubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TimeBubbleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.TimeBubble with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimeBubble>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.TimeBubble.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.TimeBubble` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.TimeBubble` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the sizeLegend in the aggregation {@link #getSizeLegend sizeLegend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySizeLegend(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xAxis in the aggregation {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXAxis(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Destroys the yAxis in the aggregation {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyYAxis(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.TimeBubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.TimeBubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.TimeBubble`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Module sap.viz.modules.background
     */
    getBackground(): Background;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.bubble
     */
    getPlotArea(): Bubble;
    /**
     * Gets content of aggregation {@link #getSizeLegend sizeLegend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getSizeLegend(): Common;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXAxis xAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getXAxis(): Axis;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Gets content of aggregation {@link #getYAxis yAxis}.
     *
     * Module sap.viz.modules.axis
     */
    getYAxis(): Axis;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Background
    ): this;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Bubble
    ): this;
    /**
     * Sets the aggregated {@link #getSizeLegend sizeLegend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSizeLegend(
      /**
       * The sizeLegend to set
       */
      oSizeLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXAxis xAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXAxis(
      /**
       * The xAxis to set
       */
      oXAxis: Axis
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
    /**
     * Sets the aggregated {@link #getYAxis yAxis}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAxis(
      /**
       * The yAxis to set
       */
      oYAxis: Axis
    ): this;
  }
  /**
   * Describes the settings that can be provided to the TimeBubble constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame}**(`new
   * sap.viz.ui5.controls.VizFrame({'vizType': 'time_bubble'})`) **control to benefit from new charting enhancements
   * and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $TimeBubbleSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.legend.common
     */
    sizeLegend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.axis
     */
    xAxis?: Axis;

    /**
     * Module sap.viz.modules.axis
     */
    yAxis?: Axis;

    /**
     * Module sap.viz.modules.background
     */
    background?: Background;

    /**
     * Module sap.viz.modules.bubble
     */
    plotArea?: Bubble;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the TimeBubble#deselectData event.
   */
  export interface TimeBubble$DeselectDataEventParameters {}

  /**
   * Event object of the TimeBubble#deselectData event.
   */
  export type TimeBubble$DeselectDataEvent = Event<
    TimeBubble$DeselectDataEventParameters,
    TimeBubble
  >;

  /**
   * Parameters of the TimeBubble#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface TimeBubble$HideTooltipEventParameters {}

  /**
   * Event object of the TimeBubble#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type TimeBubble$HideTooltipEvent = Event<
    TimeBubble$HideTooltipEventParameters,
    TimeBubble
  >;

  /**
   * Parameters of the TimeBubble#initialized event.
   */
  export interface TimeBubble$InitializedEventParameters {}

  /**
   * Event object of the TimeBubble#initialized event.
   */
  export type TimeBubble$InitializedEvent = Event<
    TimeBubble$InitializedEventParameters,
    TimeBubble
  >;

  /**
   * Parameters of the TimeBubble#selectData event.
   */
  export interface TimeBubble$SelectDataEventParameters {}

  /**
   * Event object of the TimeBubble#selectData event.
   */
  export type TimeBubble$SelectDataEvent = Event<
    TimeBubble$SelectDataEventParameters,
    TimeBubble
  >;

  /**
   * Parameters of the TimeBubble#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface TimeBubble$ShowTooltipEventParameters {}

  /**
   * Event object of the TimeBubble#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type TimeBubble$ShowTooltipEvent = Event<
    TimeBubble$ShowTooltipEventParameters,
    TimeBubble
  >;
}

declare module "sap/viz/ui5/Treemap" {
  import {
    default as BaseChart,
    $BaseChartSettings,
  } from "sap/viz/ui5/core/BaseChart";

  import Event from "sap/ui/base/Event";

  import Datalabel from "sap/viz/ui5/types/Datalabel";

  import RootContainer from "sap/viz/ui5/types/RootContainer";

  import Interaction from "sap/viz/ui5/types/controller/Interaction";

  import Common from "sap/viz/ui5/types/legend/Common";

  import Legend from "sap/viz/ui5/types/Legend";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Treemap1 from "sap/viz/ui5/types/Treemap";

  import Title from "sap/viz/ui5/types/Title";

  import Tooltip from "sap/viz/ui5/types/Tooltip";

  import XYContainer from "sap/viz/ui5/types/XYContainer";

  /**
   * Chart sap.viz.ui5.Treemap
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Treemap extends BaseChart {
    /**
     * Constructor for a new sap.viz.ui5.Treemap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TreemapSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.Treemap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TreemapSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.Treemap with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseChart.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Treemap>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.Treemap.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.Treemap` itself.
     *
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.Treemap` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the dataLabel in the aggregation {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataLabel(): this;
    /**
     * Destroys the general in the aggregation {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGeneral(): this;
    /**
     * Destroys the interaction in the aggregation {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyInteraction(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys the legendGroup in the aggregation {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegendGroup(): this;
    /**
     * Destroys the plotArea in the aggregation {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlotArea(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Destroys the xyContainer in the aggregation {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyXyContainer(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.Treemap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.Treemap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.Treemap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.Treemap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getDataLabel dataLabel}.
     *
     * Module sap.viz.modules.datalabel
     */
    getDataLabel(): Datalabel;
    /**
     * Gets content of aggregation {@link #getGeneral general}.
     *
     * Module sap.viz.modules.rootContainer
     */
    getGeneral(): RootContainer;
    /**
     * Gets content of aggregation {@link #getInteraction interaction}.
     *
     * Module sap.viz.modules.controller.interaction
     */
    getInteraction(): Interaction;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * Module sap.viz.modules.legend.common
     */
    getLegend(): Common;
    /**
     * Gets content of aggregation {@link #getLegendGroup legendGroup}.
     *
     * Module sap.viz.modules.legend
     */
    getLegendGroup(): Legend;
    /**
     * Gets content of aggregation {@link #getPlotArea plotArea}.
     *
     * Module sap.viz.modules.treemap
     */
    getPlotArea(): Treemap1;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Module sap.viz.modules.title
     */
    getTitle(): Title;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Module sap.viz.chart.elements.Tooltip
     */
    getToolTip(): Tooltip;
    /**
     * Gets content of aggregation {@link #getXyContainer xyContainer}.
     *
     * Module sap.viz.modules.xycontainer
     */
    getXyContainer(): XYContainer;
    /**
     * Sets the aggregated {@link #getDataLabel dataLabel}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLabel(
      /**
       * The dataLabel to set
       */
      oDataLabel: Datalabel
    ): this;
    /**
     * Sets the aggregated {@link #getGeneral general}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGeneral(
      /**
       * The general to set
       */
      oGeneral: RootContainer
    ): this;
    /**
     * Sets the aggregated {@link #getInteraction interaction}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInteraction(
      /**
       * The interaction to set
       */
      oInteraction: Interaction
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Common
    ): this;
    /**
     * Sets the aggregated {@link #getLegendGroup legendGroup}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendGroup(
      /**
       * The legendGroup to set
       */
      oLegendGroup: Legend
    ): this;
    /**
     * Sets the aggregated {@link #getPlotArea plotArea}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotArea(
      /**
       * The plotArea to set
       */
      oPlotArea: Treemap1
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Title
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Tooltip
    ): this;
    /**
     * Sets the aggregated {@link #getXyContainer xyContainer}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXyContainer(
      /**
       * The xyContainer to set
       */
      oXyContainer: XYContainer
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Treemap constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $TreemapSettings extends $BaseChartSettings {
    /**
     * Module sap.viz.modules.rootContainer
     */
    general?: RootContainer;

    /**
     * Module sap.viz.modules.title
     */
    title?: Title;

    /**
     * Module sap.viz.modules.legend
     */
    legendGroup?: Legend;

    /**
     * Module sap.viz.modules.legend.common
     */
    legend?: Common;

    /**
     * Module sap.viz.modules.xycontainer
     */
    xyContainer?: XYContainer;

    /**
     * Module sap.viz.modules.datalabel
     */
    dataLabel?: Datalabel;

    /**
     * Module sap.viz.modules.treemap
     */
    plotArea?: Treemap1;

    /**
     * Module sap.viz.chart.elements.Tooltip
     */
    toolTip?: Tooltip;

    /**
     * Module sap.viz.modules.controller.interaction
     */
    interaction?: Interaction;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would
     * be passed in accordance with the following format.{name:"showTooltip",data:{body:[{ //All measures
     * name:"...",val:[{//measure value is an array containing only one item value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."},selectedValues:...//this
     * number specify how many values are selected}}
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations)
     * instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the Treemap#deselectData event.
   */
  export interface Treemap$DeselectDataEventParameters {}

  /**
   * Event object of the Treemap#deselectData event.
   */
  export type Treemap$DeselectDataEvent = Event<
    Treemap$DeselectDataEventParameters,
    Treemap
  >;

  /**
   * Parameters of the Treemap#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Treemap$HideTooltipEventParameters {}

  /**
   * Event object of the Treemap#hideTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Treemap$HideTooltipEvent = Event<
    Treemap$HideTooltipEventParameters,
    Treemap
  >;

  /**
   * Parameters of the Treemap#initialized event.
   */
  export interface Treemap$InitializedEventParameters {}

  /**
   * Event object of the Treemap#initialized event.
   */
  export type Treemap$InitializedEvent = Event<
    Treemap$InitializedEventParameters,
    Treemap
  >;

  /**
   * Parameters of the Treemap#selectData event.
   */
  export interface Treemap$SelectDataEventParameters {}

  /**
   * Event object of the Treemap#selectData event.
   */
  export type Treemap$SelectDataEvent = Event<
    Treemap$SelectDataEventParameters,
    Treemap
  >;

  /**
   * Parameters of the Treemap#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface Treemap$ShowTooltipEventParameters {}

  /**
   * Event object of the Treemap#showTooltip event.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export type Treemap$ShowTooltipEvent = Event<
    Treemap$ShowTooltipEventParameters,
    Treemap
  >;
}

declare module "sap/viz/ui5/types/Area" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Area_animation from "sap/viz/ui5/types/Area_animation";

  import { ui5 } from "sap/viz/library";

  import Area_hoverline from "sap/viz/ui5/types/Area_hoverline";

  import Area_marker from "sap/viz/ui5/types/Area_marker";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Area_tooltip from "sap/viz/ui5/types/Area_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Area extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Area
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $AreaSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Area
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $AreaSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Area with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Area.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the hoverline in the aggregation {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyHoverline(): this;
    /**
     * Destroys the marker in the aggregation {@link #getMarker marker}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMarker(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Area_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Area_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets content of aggregation {@link #getHoverline hoverline}.
     *
     * Settings for the hoverline.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getHoverline(): Area_hoverline;
    /**
     * Gets content of aggregation {@link #getMarker marker}.
     *
     * Settings for marker and data point graphics
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getMarker(): Area_marker;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Set the display mode of the area chart
     *
     * Default value is `comparison`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `mode`
     */
    getMode(): ui5.types.Area_mode;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set whether the area chart is vertical or horizontal
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Area_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Area_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Area_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Area_drawingEffect
        | keyof typeof ui5.types.Area_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets the aggregated {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverline(
      /**
       * The hoverline to set
       */
      oHoverline: Area_hoverline
    ): this;
    /**
     * Sets the aggregated {@link #getMarker marker}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMarker(
      /**
       * The marker to set
       */
      oMarker: Area_marker
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Set the display mode of the area chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `comparison`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ui5.types.Area_mode | keyof typeof ui5.types.Area_mode
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set whether the area chart is vertical or horizontal
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Area_orientation
        | keyof typeof ui5.types.Area_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Area_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $AreaSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the area chart is vertical or horizontal
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (ui5.types.Area_orientation | keyof typeof ui5.types.Area_orientation)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.Area_drawingEffect
          | keyof typeof ui5.types.Area_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the display mode of the area chart
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    mode?:
      | (ui5.types.Area_mode | keyof typeof ui5.types.Area_mode)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Area_tooltip;

    /**
     * Settings for animations in the plot area
     */
    animation?: Area_animation;

    /**
     * Settings for marker and data point graphics
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    marker?: Area_marker;

    /**
     * Settings for the hoverline.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hoverline?: Area_hoverline;
  }
}

declare module "sap/viz/ui5/types/Area_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Area_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Area_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Area_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Area_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Area_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Area_animationSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Area_hoverline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the hoverline.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Area_hoverline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Area_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_hoverlineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Area_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_hoverlineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Area_hoverline with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area_hoverline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Area_hoverline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the hoverline.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the hoverline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area_hoverline constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Area_hoverlineSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the hoverline.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Area_marker" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for marker and data point graphics
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Area_marker extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Area_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_markerSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Area_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_markerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Area_marker with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area_marker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Area_marker.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `number`
     */
    getNumber(): int;
    /**
     * Gets current value of property {@link #getShape shape}.
     *
     * Set the shape of the markers
     *
     * Default value is `circle`.
     *
     *
     * @returns Value of property `shape`
     */
    getShape(): ui5.types.Area_marker_shape;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Set the marker size for data points, ranging from '4' and '32'. If you enter a value outside that range,
     * the marker size defaults to '4'.
     *
     * Default value is `8`.
     *
     *
     * @returns Value of property `size`
     */
    getSize(): int;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the markers
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumber(
      /**
       * New value for property `number`
       */
      iNumber: int
    ): this;
    /**
     * Sets a new value for property {@link #getShape shape}.
     *
     * Set the shape of the markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `circle`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShape(
      /**
       * New value for property `shape`
       */
      sShape?:
        | ui5.types.Area_marker_shape
        | keyof typeof ui5.types.Area_marker_shape
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Set the marker size for data points, ranging from '4' and '32'. If you enter a value outside that range,
     * the marker size defaults to '4'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `8`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      iSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area_marker constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Area_markerSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the markers
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of the markers
     */
    shape?:
      | (ui5.types.Area_marker_shape | keyof typeof ui5.types.Area_marker_shape)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the marker size for data points, ranging from '4' and '32'. If you enter a value outside that range,
     * the marker size defaults to '4'.
     */
    size?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    number?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Area_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Area_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Area_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Area_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Area_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Area_tooltip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Area_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Area_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Area_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Area_tooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Axis_axisline from "sap/viz/ui5/types/Axis_axisline";

  import Axis_axisTick from "sap/viz/ui5/types/Axis_axisTick";

  import Axis_gridline from "sap/viz/ui5/types/Axis_gridline";

  import Axis_indicator from "sap/viz/ui5/types/Axis_indicator";

  import Axis_label from "sap/viz/ui5/types/Axis_label";

  import Axis_layoutInfo from "sap/viz/ui5/types/Axis_layoutInfo";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import Axis_scale from "sap/viz/ui5/types/Axis_scale";

  import Axis_title from "sap/viz/ui5/types/Axis_title";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Axis
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $AxisSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $AxisSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the axisline in the aggregation {@link #getAxisline axisline}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAxisline(): this;
    /**
     * Destroys the axisTick in the aggregation {@link #getAxisTick axisTick}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAxisTick(): this;
    /**
     * Destroys the gridline in the aggregation {@link #getGridline gridline}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGridline(): this;
    /**
     * Destroys the indicator in the aggregation {@link #getIndicator indicator}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyIndicator(): this;
    /**
     * Destroys the label in the aggregation {@link #getLabel label}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLabel(): this;
    /**
     * Destroys the layoutInfo in the aggregation {@link #getLayoutInfo layoutInfo}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayoutInfo(): this;
    /**
     * Destroys the scale in the aggregation {@link #getScale scale}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyScale(): this;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Gets content of aggregation {@link #getAxisline axisline}.
     *
     * Settings for the axis line
     */
    getAxisline(): Axis_axisline;
    /**
     * Gets content of aggregation {@link #getAxisTick axisTick}.
     *
     * Settings for the ticks on the axis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getAxisTick(): Axis_axisTick;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Set the color of the axis line
     *
     * Default value is `'#6c6c6c'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Gets current value of property {@link #getEnableLabelSelection enableLabelSelection}.
     *
     * Set whether the label selection effect is enabled. For mobile devices, the default value is 'false'.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `enableLabelSelection`
     */
    getEnableLabelSelection(): boolean;
    /**
     * Gets current value of property {@link #getForceLabelArea forceLabelArea}.
     *
     * Set whether the label area is limited to the text area
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `forceLabelArea`
     */
    getForceLabelArea(): boolean;
    /**
     * Gets content of aggregation {@link #getGridline gridline}.
     *
     * Settings for the gridlines on the axis
     */
    getGridline(): Axis_gridline;
    /**
     * Gets current value of property {@link #getHideTitleFirst hideTitleFirst}.
     *
     * Hide axis title firstly if the space is limited.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `hideTitleFirst`
     */
    getHideTitleFirst(): boolean;
    /**
     * Gets content of aggregation {@link #getIndicator indicator}.
     *
     * Settings for the axis indicator
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getIndicator(): Axis_indicator;
    /**
     * Gets current value of property {@link #getIsIndependentMode isIndependentMode}.
     *
     * Set whether the axis works in independent mode. Currently, this property is used only for boxplot charts.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isIndependentMode`
     */
    getIsIndependentMode(): boolean;
    /**
     * Gets current value of property {@link #getIsKeepFirstAndLastLabel isKeepFirstAndLastLabel}.
     *
     * Try to keep the first label and last label when the space is limited.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isKeepFirstAndLastLabel`
     */
    getIsKeepFirstAndLastLabel(): boolean;
    /**
     * Gets current value of property {@link #getIsPercentMode isPercentMode}.
     *
     * Show the label as a percentage. For example '0.1' would show as '10'.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isPercentMode`
     */
    getIsPercentMode(): boolean;
    /**
     * Gets current value of property {@link #getIsTruncateAvailable isTruncateAvailable}.
     *
     * Set whether truncation logic is available for the category axis
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isTruncateAvailable`
     */
    getIsTruncateAvailable(): boolean;
    /**
     * Gets content of aggregation {@link #getLabel label}.
     *
     * Settings for the labels on this axis
     */
    getLabel(): Axis_label;
    /**
     * Gets content of aggregation {@link #getLayoutInfo layoutInfo}.
     *
     * Settings for the layout of the category axis. This property only works for category type axes.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getLayoutInfo(): Axis_layoutInfo;
    /**
     * Gets current value of property {@link #getLineSize lineSize}.
     *
     * Set the thickness of the axis line
     *
     * Default value is `1`.
     *
     *
     * @returns Value of property `lineSize`
     */
    getLineSize(): int;
    /**
     * Gets current value of property {@link #getMaxSizeRatio maxSizeRatio}.
     *
     * The ratio to limit axis' space in its container, which only accepts values between 0 and 1(0 and 1 included).
     * All the invalid values would be replaced by default value.
     *
     * Default value is `0.25`.
     *
     *
     * @returns Value of property `maxSizeRatio`
     */
    getMaxSizeRatio(): float;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Set the position of the axis
     *
     * Default value is `bottom`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `position`
     */
    getPosition(): ui5.types.Axis_position;
    /**
     * Gets content of aggregation {@link #getScale scale}.
     *
     * Set the scale of the value axis. This property only works on value type axes.
     */
    getScale(): Axis_scale;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Settings for the axis title
     */
    getTitle(): Axis_title;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Set the axis type
     *
     * Default value is `value`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `type`
     */
    getType(): ui5.types.Axis_type;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the entire axis, including the axis line, gridlines, and labels
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets the aggregated {@link #getAxisline axisline}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisline(
      /**
       * The axisline to set
       */
      oAxisline: Axis_axisline
    ): this;
    /**
     * Sets the aggregated {@link #getAxisTick axisTick}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisTick(
      /**
       * The axisTick to set
       */
      oAxisTick: Axis_axisTick
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Set the color of the axis line
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#6c6c6c'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnableLabelSelection enableLabelSelection}.
     *
     * Set whether the label selection effect is enabled. For mobile devices, the default value is 'false'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableLabelSelection(
      /**
       * New value for property `enableLabelSelection`
       */
      bEnableLabelSelection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getForceLabelArea forceLabelArea}.
     *
     * Set whether the label area is limited to the text area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setForceLabelArea(
      /**
       * New value for property `forceLabelArea`
       */
      bForceLabelArea?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getGridline gridline}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGridline(
      /**
       * The gridline to set
       */
      oGridline: Axis_gridline
    ): this;
    /**
     * Sets a new value for property {@link #getHideTitleFirst hideTitleFirst}.
     *
     * Hide axis title firstly if the space is limited.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideTitleFirst(
      /**
       * New value for property `hideTitleFirst`
       */
      bHideTitleFirst?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getIndicator indicator}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIndicator(
      /**
       * The indicator to set
       */
      oIndicator: Axis_indicator
    ): this;
    /**
     * Sets a new value for property {@link #getIsIndependentMode isIndependentMode}.
     *
     * Set whether the axis works in independent mode. Currently, this property is used only for boxplot charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsIndependentMode(
      /**
       * New value for property `isIndependentMode`
       */
      bIsIndependentMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsKeepFirstAndLastLabel isKeepFirstAndLastLabel}.
     *
     * Try to keep the first label and last label when the space is limited.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsKeepFirstAndLastLabel(
      /**
       * New value for property `isKeepFirstAndLastLabel`
       */
      bIsKeepFirstAndLastLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsPercentMode isPercentMode}.
     *
     * Show the label as a percentage. For example '0.1' would show as '10'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsPercentMode(
      /**
       * New value for property `isPercentMode`
       */
      bIsPercentMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsTruncateAvailable isTruncateAvailable}.
     *
     * Set whether truncation logic is available for the category axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsTruncateAvailable(
      /**
       * New value for property `isTruncateAvailable`
       */
      bIsTruncateAvailable?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getLabel label}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * The label to set
       */
      oLabel: Axis_label
    ): this;
    /**
     * Sets the aggregated {@link #getLayoutInfo layoutInfo}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayoutInfo(
      /**
       * The layoutInfo to set
       */
      oLayoutInfo: Axis_layoutInfo
    ): this;
    /**
     * Sets a new value for property {@link #getLineSize lineSize}.
     *
     * Set the thickness of the axis line
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLineSize(
      /**
       * New value for property `lineSize`
       */
      iLineSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMaxSizeRatio maxSizeRatio}.
     *
     * The ratio to limit axis' space in its container, which only accepts values between 0 and 1(0 and 1 included).
     * All the invalid values would be replaced by default value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.25`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxSizeRatio(
      /**
       * New value for property `maxSizeRatio`
       */
      fMaxSizeRatio?: float
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Set the position of the axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `bottom`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?: ui5.types.Axis_position | keyof typeof ui5.types.Axis_position
    ): this;
    /**
     * Sets the aggregated {@link #getScale scale}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScale(
      /**
       * The scale to set
       */
      oScale: Axis_scale
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Axis_title
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Set the axis type
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `value`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ui5.types.Axis_type | keyof typeof ui5.types.Axis_type
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the entire axis, including the axis line, gridlines, and labels
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $AxisSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the axis works in independent mode. Currently, this property is used only for boxplot charts.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isIndependentMode?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Show the label as a percentage. For example '0.1' would show as '10'.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isPercentMode?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Try to keep the first label and last label when the space is limited.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isKeepFirstAndLastLabel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the thickness of the axis line
     */
    lineSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color of the axis line
     */
    color?: string | PropertyBindingInfo;

    /**
     * Set the axis type
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    type?:
      | (ui5.types.Axis_type | keyof typeof ui5.types.Axis_type)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the visibility of the entire axis, including the axis line, gridlines, and labels
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the position of the axis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    position?:
      | (ui5.types.Axis_position | keyof typeof ui5.types.Axis_position)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether truncation logic is available for the category axis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isTruncateAvailable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the label area is limited to the text area
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    forceLabelArea?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the label selection effect is enabled. For mobile devices, the default value is 'false'.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    enableLabelSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Hide axis title firstly if the space is limited.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideTitleFirst?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The ratio to limit axis' space in its container, which only accepts values between 0 and 1(0 and 1 included).
     * All the invalid values would be replaced by default value.
     */
    maxSizeRatio?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the axis title
     */
    title?: Axis_title;

    /**
     * Settings for the gridlines on the axis
     */
    gridline?: Axis_gridline;

    /**
     * Settings for the axis line
     */
    axisline?: Axis_axisline;

    /**
     * Settings for the labels on this axis
     */
    label?: Axis_label;

    /**
     * Settings for the axis indicator
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    indicator?: Axis_indicator;

    /**
     * Set the scale of the value axis. This property only works on value type axes.
     */
    scale?: Axis_scale;

    /**
     * Settings for the layout of the category axis. This property only works for category type axes.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    layoutInfo?: Axis_layoutInfo;

    /**
     * Settings for the ticks on the axis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    axisTick?: Axis_axisTick;
  }
}

declare module "sap/viz/ui5/types/Axis_axisline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the axis line
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis_axisline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_axisline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_axislineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_axisline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_axislineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_axisline with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_axisline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_axisline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the axis line
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the axis line
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_axisline constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Axis_axislineSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the axis line
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_axisTick" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the ticks on the axis
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Axis_axisTick extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_axisTick
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_axisTickSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_axisTick
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_axisTickSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_axisTick with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_axisTick>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_axisTick.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set visibility of the ticks on the axis. For mobile devices, the default value is 'false'.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set visibility of the ticks on the axis. For mobile devices, the default value is 'false'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_axisTick constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Axis_axisTickSettings extends $BaseStructuredTypeSettings {
    /**
     * Set visibility of the ticks on the axis. For mobile devices, the default value is 'false'.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_gridline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the gridlines on the axis
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis_gridline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_gridline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_gridlineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_gridline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_gridlineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_gridline with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_gridline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_gridline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Set the color of the gridlines on the axis
     *
     * Default value is `'#d8d8d8'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Gets current value of property {@link #getDisable disable}.
     *
     * Disable gridline or not
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `disable`
     */
    getDisable(): boolean;
    /**
     * Gets current value of property {@link #getShowFirstLine showFirstLine}.
     *
     * Set whether the first gridline on the axis appears
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showFirstLine`
     */
    getShowFirstLine(): boolean;
    /**
     * Gets current value of property {@link #getShowLastLine showLastLine}.
     *
     * Set whether the last gridline on the axis appears
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showLastLine`
     */
    getShowLastLine(): boolean;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Set the line size of gridlines on the axis
     *
     * Default value is `1`.
     *
     *
     * @returns Value of property `size`
     */
    getSize(): int;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Set the line type of gridlines on the axis
     *
     * Default value is `line`.
     *
     *
     * @returns Value of property `type`
     */
    getType(): ui5.types.Axis_gridline_type;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of gridlines on the axis
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Set the color of the gridlines on the axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#d8d8d8'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDisable disable}.
     *
     * Disable gridline or not
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisable(
      /**
       * New value for property `disable`
       */
      bDisable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowFirstLine showFirstLine}.
     *
     * Set whether the first gridline on the axis appears
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowFirstLine(
      /**
       * New value for property `showFirstLine`
       */
      bShowFirstLine?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowLastLine showLastLine}.
     *
     * Set whether the last gridline on the axis appears
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowLastLine(
      /**
       * New value for property `showLastLine`
       */
      bShowLastLine?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Set the line size of gridlines on the axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      iSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Set the line type of gridlines on the axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `line`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?:
        | ui5.types.Axis_gridline_type
        | keyof typeof ui5.types.Axis_gridline_type
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of gridlines on the axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_gridline constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Axis_gridlineSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of gridlines on the axis
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Disable gridline or not
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    disable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the first gridline on the axis appears
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showFirstLine?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the last gridline on the axis appears
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showLastLine?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the line type of gridlines on the axis
     */
    type?:
      | (
          | ui5.types.Axis_gridline_type
          | keyof typeof ui5.types.Axis_gridline_type
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color of the gridlines on the axis
     */
    color?: string | PropertyBindingInfo;

    /**
     * Set the line size of gridlines on the axis
     */
    size?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_indicator" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the axis indicator
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Axis_indicator extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_indicator
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_indicatorSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_indicator
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_indicatorSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_indicator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_indicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_indicator.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * Set the visibility of the axis indicator
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * Set the visibility of the axis indicator
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_indicator constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Axis_indicatorSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the axis indicator
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_label" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the labels on this axis
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis_label extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_label
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_labelSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_label
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_labelSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_label with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_label>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_label.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set the format strings for labels on the value axis. If a single format string is entered, it is applied
     * to all measures. A two-dimensional array of format strings can be entered for scatter matrix charts and
     * multiple charts with measureNamesDimension, to apply different formats to each sub-chart. For all other
     * chart types, the first value of the first dimension of a two-dimensional array is used as a global format
     * string. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The letter
     * "u" is used at the end of a format string to format values in SI units. If the letter "u" is added to
     * a value between 1e12 and 1e-3 before SI units are applied, the value is formatted in exponential style.
     * The remaining syntax matches Excel format strings. The following is a simple example of a two-dimensional
     * array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): any;
    /**
     * Gets current value of property {@link #getHideSubLevels hideSubLevels}.
     *
     * Set the visibility of the sub levels of labels on this axis
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `hideSubLevels`
     */
    getHideSubLevels(): boolean;
    /**
     * Gets current value of property {@link #getNumberFormat numberFormat}.
     *
     * Set the number format for the value axis
     *
     * Default value is `empty string`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `numberFormat`
     */
    getNumberFormat(): string;
    /**
     * Gets current value of property {@link #getUnitFormatType unitFormatType}.
     *
     * Set the unit format type. If set MetricUnits, unit K,M,G,T will be applied, eg, 5000 will display as
     * 5K, 5000000 will display as 5M, 5000000000 will display as 5G and so on. If set FinancialUnits, unit
     * K,M,B,T will be applied. 5000000000 will display as 5B.
     *
     * Default value is `FinancialUnits`.
     *
     *
     * @returns Value of property `unitFormatType`
     */
    getUnitFormatType(): ui5.types.Axis_label_unitFormatType;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the labels on this axis
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set the format strings for labels on the value axis. If a single format string is entered, it is applied
     * to all measures. A two-dimensional array of format strings can be entered for scatter matrix charts and
     * multiple charts with measureNamesDimension, to apply different formats to each sub-chart. For all other
     * chart types, the first value of the first dimension of a two-dimensional array is used as a global format
     * string. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The letter
     * "u" is used at the end of a format string to format values in SI units. If the letter "u" is added to
     * a value between 1e12 and 1e-3 before SI units are applied, the value is formatted in exponential style.
     * The remaining syntax matches Excel format strings. The following is a simple example of a two-dimensional
     * array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      oFormatString?: any
    ): this;
    /**
     * Sets a new value for property {@link #getHideSubLevels hideSubLevels}.
     *
     * Set the visibility of the sub levels of labels on this axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideSubLevels(
      /**
       * New value for property `hideSubLevels`
       */
      bHideSubLevels?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNumberFormat numberFormat}.
     *
     * Set the number format for the value axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumberFormat(
      /**
       * New value for property `numberFormat`
       */
      sNumberFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUnitFormatType unitFormatType}.
     *
     * Set the unit format type. If set MetricUnits, unit K,M,G,T will be applied, eg, 5000 will display as
     * 5K, 5000000 will display as 5M, 5000000000 will display as 5G and so on. If set FinancialUnits, unit
     * K,M,B,T will be applied. 5000000000 will display as 5B.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `FinancialUnits`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUnitFormatType(
      /**
       * New value for property `unitFormatType`
       */
      sUnitFormatType?:
        | ui5.types.Axis_label_unitFormatType
        | keyof typeof ui5.types.Axis_label_unitFormatType
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the labels on this axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_label constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Axis_labelSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the labels on this axis
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number format for the value axis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    numberFormat?: string | PropertyBindingInfo;

    /**
     * Set the format strings for labels on the value axis. If a single format string is entered, it is applied
     * to all measures. A two-dimensional array of format strings can be entered for scatter matrix charts and
     * multiple charts with measureNamesDimension, to apply different formats to each sub-chart. For all other
     * chart types, the first value of the first dimension of a two-dimensional array is used as a global format
     * string. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The letter
     * "u" is used at the end of a format string to format values in SI units. If the letter "u" is added to
     * a value between 1e12 and 1e-3 before SI units are applied, the value is formatted in exponential style.
     * The remaining syntax matches Excel format strings. The following is a simple example of a two-dimensional
     * array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     */
    formatString?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the unit format type. If set MetricUnits, unit K,M,G,T will be applied, eg, 5000 will display as
     * 5K, 5000000 will display as 5M, 5000000000 will display as 5G and so on. If set FinancialUnits, unit
     * K,M,B,T will be applied. 5000000000 will display as 5B.
     */
    unitFormatType?:
      | (
          | ui5.types.Axis_label_unitFormatType
          | keyof typeof ui5.types.Axis_label_unitFormatType
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the visibility of the sub levels of labels on this axis
     */
    hideSubLevels?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_layoutInfo" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the layout of the category axis. This property only works for category type axes.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Axis_layoutInfo extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_layoutInfo
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_layoutInfoSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_layoutInfo
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_layoutInfoSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_layoutInfo with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_layoutInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_layoutInfo.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Set the height of the xAxis
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `height`
     */
    getHeight(): float;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Set the width of the xAxis
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `width`
     */
    getWidth(): float;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Set the height of the xAxis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      fHeight?: float
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Set the width of the xAxis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      fWidth?: float
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_layoutInfo constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Axis_layoutInfoSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the width of the xAxis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    width?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the height of the xAxis
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    height?: float | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_scale" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Set the scale of the value axis. This property only works on value type axes.
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis_scale extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_scale
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_scaleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_scale
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_scaleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_scale with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_scale>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_scale.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFixedRange fixedRange}.
     *
     * Set whether the axis range is limited to the range between the minValue and maxValue
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `fixedRange`
     */
    getFixedRange(): boolean;
    /**
     * Gets current value of property {@link #getFixedTicks fixedTicks}.
     *
     * Set the specific ticks for value axis. The format should be [{value : "/value/", text : "/text/"}...].
     * If its length is less than 2, this property will not take effect.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `fixedTicks`
     */
    getFixedTicks(): object[];
    /**
     * Gets current value of property {@link #getMaxValue maxValue}.
     *
     * Set the maxValue of the value axis
     *
     * Default value is `0`.
     *
     *
     * @returns Value of property `maxValue`
     */
    getMaxValue(): float;
    /**
     * Gets current value of property {@link #getMinValue minValue}.
     *
     * Set the minValue of the value axis
     *
     * Default value is `0`.
     *
     *
     * @returns Value of property `minValue`
     */
    getMinValue(): float;
    /**
     * Sets a new value for property {@link #getFixedRange fixedRange}.
     *
     * Set whether the axis range is limited to the range between the minValue and maxValue
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFixedRange(
      /**
       * New value for property `fixedRange`
       */
      bFixedRange?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFixedTicks fixedTicks}.
     *
     * Set the specific ticks for value axis. The format should be [{value : "/value/", text : "/text/"}...].
     * If its length is less than 2, this property will not take effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFixedTicks(
      /**
       * New value for property `fixedTicks`
       */
      sFixedTicks: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getMaxValue maxValue}.
     *
     * Set the maxValue of the value axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxValue(
      /**
       * New value for property `maxValue`
       */
      fMaxValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinValue minValue}.
     *
     * Set the minValue of the value axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinValue(
      /**
       * New value for property `minValue`
       */
      fMinValue?: float
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_scale constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Axis_scaleSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the axis range is limited to the range between the minValue and maxValue
     */
    fixedRange?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minValue of the value axis
     */
    minValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the maxValue of the value axis
     */
    maxValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the specific ticks for value axis. The format should be [{value : "/value/", text : "/text/"}...].
     * If its length is less than 2, this property will not take effect.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    fixedTicks?: object[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Axis_title" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the axis title
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Axis_title extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_titleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Axis_title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Axis_titleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Axis_title with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Axis_title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Axis_title.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getApplyAxislineColor applyAxislineColor}.
     *
     * Set the title color to match the color of the axis line
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `applyAxislineColor`
     */
    getApplyAxislineColor(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Set the text of the axis title
     *
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the axis title
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getApplyAxislineColor applyAxislineColor}.
     *
     * Set the title color to match the color of the axis line
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setApplyAxislineColor(
      /**
       * New value for property `applyAxislineColor`
       */
      bApplyAxislineColor?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Set the text of the axis title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the axis title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Axis_title constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Axis_titleSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the axis title
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the text of the axis title
     */
    text?: string | PropertyBindingInfo;

    /**
     * Set the title color to match the color of the axis line
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    applyAxislineColor?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Background" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Background_border from "sap/viz/ui5/types/Background_border";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Background
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BackgroundSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BackgroundSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the border in the aggregation {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBorder(): this;
    /**
     * Gets content of aggregation {@link #getBorder border}.
     *
     * Settings for the border
     */
    getBorder(): Background_border;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Define the color for the plot background body.
     *
     * Default value is `'transparent'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Gets current value of property {@link #getDirection direction}.
     *
     * Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect'
     * value is set to 'glossy'.
     *
     * Default value is `vertical`.
     *
     *
     * @returns Value of property `direction`
     */
    getDirection(): ui5.types.Background_direction;
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy.
     * If this value is set to 'normal', the background is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Background_drawingEffect;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets the aggregated {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorder(
      /**
       * The border to set
       */
      oBorder: Background_border
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Define the color for the plot background body.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'transparent'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDirection direction}.
     *
     * Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect'
     * value is set to 'glossy'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDirection(
      /**
       * New value for property `direction`
       */
      sDirection?:
        | ui5.types.Background_direction
        | keyof typeof ui5.types.Background_direction
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy.
     * If this value is set to 'normal', the background is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Background_drawingEffect
        | keyof typeof ui5.types.Background_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BackgroundSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy.
     * If this value is set to 'normal', the background is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.Background_drawingEffect
          | keyof typeof ui5.types.Background_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect'
     * value is set to 'glossy'.
     */
    direction?:
      | (
          | ui5.types.Background_direction
          | keyof typeof ui5.types.Background_direction
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Define the color for the plot background body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    color?: string | PropertyBindingInfo;

    /**
     * Settings for the border
     */
    border?: Background_border;
  }
}

declare module "sap/viz/ui5/types/Background_border" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Background_border_bottom from "sap/viz/ui5/types/Background_border_bottom";

  import Background_border_left from "sap/viz/ui5/types/Background_border_left";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Background_border_right from "sap/viz/ui5/types/Background_border_right";

  import Background_border_top from "sap/viz/ui5/types/Background_border_top";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background_border extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_borderSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_borderSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background_border with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background_border>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background_border.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the bottom in the aggregation {@link #getBottom bottom}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBottom(): this;
    /**
     * Destroys the left in the aggregation {@link #getLeft left}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLeft(): this;
    /**
     * Destroys the right in the aggregation {@link #getRight right}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyRight(): this;
    /**
     * Destroys the top in the aggregation {@link #getTop top}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTop(): this;
    /**
     * Gets content of aggregation {@link #getBottom bottom}.
     *
     * Settings for the bottom border
     */
    getBottom(): Background_border_bottom;
    /**
     * Gets content of aggregation {@link #getLeft left}.
     *
     * Settings for the left border
     */
    getLeft(): Background_border_left;
    /**
     * Gets content of aggregation {@link #getRight right}.
     *
     * Settings for the right border
     */
    getRight(): Background_border_right;
    /**
     * Gets current value of property {@link #getStroke stroke}.
     *
     * Settings for the color of the stroke.
     *
     * Default value is `'#d8d8d8'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `stroke`
     */
    getStroke(): string;
    /**
     * Gets current value of property {@link #getStrokeWidth strokeWidth}.
     *
     * Settings for the width of the stroke.
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `strokeWidth`
     */
    getStrokeWidth(): int;
    /**
     * Gets content of aggregation {@link #getTop top}.
     *
     * Settings for the top border
     */
    getTop(): Background_border_top;
    /**
     * Sets the aggregated {@link #getBottom bottom}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBottom(
      /**
       * The bottom to set
       */
      oBottom: Background_border_bottom
    ): this;
    /**
     * Sets the aggregated {@link #getLeft left}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLeft(
      /**
       * The left to set
       */
      oLeft: Background_border_left
    ): this;
    /**
     * Sets the aggregated {@link #getRight right}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRight(
      /**
       * The right to set
       */
      oRight: Background_border_right
    ): this;
    /**
     * Sets a new value for property {@link #getStroke stroke}.
     *
     * Settings for the color of the stroke.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#d8d8d8'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStroke(
      /**
       * New value for property `stroke`
       */
      sStroke?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
     *
     * Settings for the width of the stroke.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStrokeWidth(
      /**
       * New value for property `strokeWidth`
       */
      iStrokeWidth?: int
    ): this;
    /**
     * Sets the aggregated {@link #getTop top}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTop(
      /**
       * The top to set
       */
      oTop: Background_border_top
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background_border constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Background_borderSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Settings for the color of the stroke.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    stroke?: string | PropertyBindingInfo;

    /**
     * Settings for the width of the stroke.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    strokeWidth?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the left border
     */
    left?: Background_border_left;

    /**
     * Settings for the right border
     */
    right?: Background_border_right;

    /**
     * Settings for the top border
     */
    top?: Background_border_top;

    /**
     * Settings for the bottom border
     */
    bottom?: Background_border_bottom;
  }
}

declare module "sap/viz/ui5/types/Background_border_bottom" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the bottom border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background_border_bottom extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_bottom
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_bottomSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_bottom
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_bottomSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background_border_bottom with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background_border_bottom>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background_border_bottom.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background_border_bottom constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Background_border_bottomSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Background_border_left" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the left border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background_border_left extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_left
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_leftSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_left
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_leftSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background_border_left with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background_border_left>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background_border_left.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background_border_left constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Background_border_leftSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Background_border_right" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the right border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background_border_right extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_right
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_rightSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_right
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_rightSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background_border_right with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background_border_right>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background_border_right.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background_border_right constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Background_border_rightSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Background_border_top" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the top border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Background_border_top extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_top
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_topSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Background_border_top
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Background_border_topSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Background_border_top with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Background_border_top>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Background_border_top.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Background_border_top constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Background_border_topSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bar" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Bar_animation from "sap/viz/ui5/types/Bar_animation";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bar_tooltip from "sap/viz/ui5/types/Bar_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Bar
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bar extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BarSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BarSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bar with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Bar_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Bar_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getImageFill imageFill}.
     *
     * Set where the image fill is enabled.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `imageFill`
     */
    getImageFill(): boolean;
    /**
     * Gets current value of property {@link #getImagePalette imagePalette}.
     *
     * Set the images that fill the bars.
     *
     * Default value is `['http://www.sap.com/global/ui/images/global/sap-logo.png']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `imagePalette`
     */
    getImagePalette(): string[];
    /**
     * Gets current value of property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isRoundCorner`
     */
    getIsRoundCorner(): boolean;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Bar_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Bar_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Bar_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Bar_drawingEffect
        | keyof typeof ui5.types.Bar_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getImageFill imageFill}.
     *
     * Set where the image fill is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImageFill(
      /**
       * New value for property `imageFill`
       */
      bImageFill?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getImagePalette imagePalette}.
     *
     * Set the images that fill the bars.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['http://www.sap.com/global/ui/images/global/sap-logo.png']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImagePalette(
      /**
       * New value for property `imagePalette`
       */
      sImagePalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsRoundCorner(
      /**
       * New value for property `isRoundCorner`
       */
      bIsRoundCorner?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Bar_orientation
        | keyof typeof ui5.types.Bar_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Bar_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BarSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (ui5.types.Bar_orientation | keyof typeof ui5.types.Bar_orientation)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (ui5.types.Bar_drawingEffect | keyof typeof ui5.types.Bar_drawingEffect)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether bars have rounded corners
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isRoundCorner?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set where the image fill is enabled.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    imageFill?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the images that fill the bars.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    imagePalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Bar_tooltip;

    /**
     * Settings for animations in the plot area
     */
    animation?: Bar_animation;
  }
}

declare module "sap/viz/ui5/types/Bar_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bar_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bar_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bar_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bar_animation with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bar_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bar_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bar_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Bar_animationSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bar_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip related properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Bar_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bar_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bar_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bar_tooltip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bar_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bar_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bar_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Bar_tooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bubble" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Bubble_animation from "sap/viz/ui5/types/Bubble_animation";

  import Bubble_axisTooltip from "sap/viz/ui5/types/Bubble_axisTooltip";

  import { ui5 } from "sap/viz/library";

  import Bubble_hoverline from "sap/viz/ui5/types/Bubble_hoverline";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Bubble
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bubble extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BubbleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BubbleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bubble with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bubble>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bubble.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the axisTooltip in the aggregation {@link #getAxisTooltip axisTooltip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAxisTooltip(): this;
    /**
     * Destroys the hoverline in the aggregation {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyHoverline(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in bubble and scatter charts
     */
    getAnimation(): Bubble_animation;
    /**
     * Gets content of aggregation {@link #getAxisTooltip axisTooltip}.
     *
     * Set tooltip related properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getAxisTooltip(): Bubble_axisTooltip;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color of the bubbles
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the bubbles
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Bubble_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets content of aggregation {@link #getHoverline hoverline}.
     *
     * Settings for hoverline properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getHoverline(): Bubble_hoverline;
    /**
     * Gets current value of property {@link #getMaxBubbleHeight maxBubbleHeight}.
     *
     * Set the max value of bubble height values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxBubbleHeight`
     */
    getMaxBubbleHeight(): float;
    /**
     * Gets current value of property {@link #getMaxBubbleWidth maxBubbleWidth}.
     *
     * Set the max value of bubble width values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxBubbleWidth`
     */
    getMaxBubbleWidth(): float;
    /**
     * Gets current value of property {@link #getMaxPriValue maxPriValue}.
     *
     * Set the max value of primary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxPriValue`
     */
    getMaxPriValue(): float;
    /**
     * Gets current value of property {@link #getMaxSecValue maxSecValue}.
     *
     * Set the max value of secondary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxSecValue`
     */
    getMaxSecValue(): float;
    /**
     * Gets current value of property {@link #getMinBubbleHeight minBubbleHeight}.
     *
     * Set the minimum value of bubble height values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minBubbleHeight`
     */
    getMinBubbleHeight(): float;
    /**
     * Gets current value of property {@link #getMinBubbleWidth minBubbleWidth}.
     *
     * Set the minimum value of bubble width values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minBubbleWidth`
     */
    getMinBubbleWidth(): float;
    /**
     * Gets current value of property {@link #getMinMarkerSize minMarkerSize}.
     *
     * Set the minimum size of the data points
     *
     *
     * @returns Value of property `minMarkerSize`
     */
    getMinMarkerSize(): int;
    /**
     * Gets current value of property {@link #getMinPriValue minPriValue}.
     *
     * Set the minimum value of primary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minPriValue`
     */
    getMinPriValue(): float;
    /**
     * Gets current value of property {@link #getMinSecValue minSecValue}.
     *
     * Set the minimum value of secondary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minSecValue`
     */
    getMinSecValue(): float;
    /**
     * Gets current value of property {@link #getShapePalette shapePalette}.
     *
     * Set the shape of the bubbles
     *
     * Default value is `['circle', 'square', 'diamond', 'triangleUp', 'triangleDown', 'triangleLeft', 'triangleRight',
     * 'cross', 'intersection']`.
     *
     *
     * @returns Value of property `shapePalette`
     */
    getShapePalette(): string[];
    /**
     * Gets current value of property {@link #getShowNegativeValues showNegativeValues}.
     *
     * Show/hide the data of negetive value.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showNegativeValues`
     */
    getShowNegativeValues(): boolean;
    /**
     * Gets current value of property {@link #getTimeBased timeBased}.
     *
     * Set whether it is time based scatter/bubble
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `timeBased`
     */
    getTimeBased(): boolean;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Bubble_animation
    ): this;
    /**
     * Sets the aggregated {@link #getAxisTooltip axisTooltip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisTooltip(
      /**
       * The axisTooltip to set
       */
      oAxisTooltip: Bubble_axisTooltip
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color of the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Bubble_drawingEffect
        | keyof typeof ui5.types.Bubble_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets the aggregated {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverline(
      /**
       * The hoverline to set
       */
      oHoverline: Bubble_hoverline
    ): this;
    /**
     * Sets a new value for property {@link #getMaxBubbleHeight maxBubbleHeight}.
     *
     * Set the max value of bubble height values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxBubbleHeight(
      /**
       * New value for property `maxBubbleHeight`
       */
      fMaxBubbleHeight?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaxBubbleWidth maxBubbleWidth}.
     *
     * Set the max value of bubble width values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxBubbleWidth(
      /**
       * New value for property `maxBubbleWidth`
       */
      fMaxBubbleWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaxPriValue maxPriValue}.
     *
     * Set the max value of primary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxPriValue(
      /**
       * New value for property `maxPriValue`
       */
      fMaxPriValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaxSecValue maxSecValue}.
     *
     * Set the max value of secondary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxSecValue(
      /**
       * New value for property `maxSecValue`
       */
      fMaxSecValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinBubbleHeight minBubbleHeight}.
     *
     * Set the minimum value of bubble height values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinBubbleHeight(
      /**
       * New value for property `minBubbleHeight`
       */
      fMinBubbleHeight?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinBubbleWidth minBubbleWidth}.
     *
     * Set the minimum value of bubble width values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinBubbleWidth(
      /**
       * New value for property `minBubbleWidth`
       */
      fMinBubbleWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinMarkerSize minMarkerSize}.
     *
     * Set the minimum size of the data points
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinMarkerSize(
      /**
       * New value for property `minMarkerSize`
       */
      iMinMarkerSize: int
    ): this;
    /**
     * Sets a new value for property {@link #getMinPriValue minPriValue}.
     *
     * Set the minimum value of primary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinPriValue(
      /**
       * New value for property `minPriValue`
       */
      fMinPriValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinSecValue minSecValue}.
     *
     * Set the minimum value of secondary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinSecValue(
      /**
       * New value for property `minSecValue`
       */
      fMinSecValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getShapePalette shapePalette}.
     *
     * Set the shape of the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['circle', 'square', 'diamond', 'triangleUp', 'triangleDown', 'triangleLeft', 'triangleRight',
     * 'cross', 'intersection']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShapePalette(
      /**
       * New value for property `shapePalette`
       */
      sShapePalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getShowNegativeValues showNegativeValues}.
     *
     * Show/hide the data of negetive value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowNegativeValues(
      /**
       * New value for property `showNegativeValues`
       */
      bShowNegativeValues?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTimeBased timeBased}.
     *
     * Set whether it is time based scatter/bubble
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTimeBased(
      /**
       * New value for property `timeBased`
       */
      bTimeBased?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bubble constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BubbleSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the color of the bubbles
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of the bubbles
     */
    shapePalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum size of the data points
     */
    minMarkerSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of primary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxPriValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of primary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minPriValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of secondary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxSecValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of secondary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minSecValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of bubble width values
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxBubbleWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of bubble width values
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minBubbleWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of bubble height values
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxBubbleHeight?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of bubble height values
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minBubbleHeight?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether it is time based scatter/bubble
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    timeBased?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the drawing effect for the bubbles
     */
    drawingEffect?:
      | (
          | ui5.types.Bubble_drawingEffect
          | keyof typeof ui5.types.Bubble_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Show/hide the data of negetive value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showNegativeValues?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for animations in bubble and scatter charts
     */
    animation?: Bubble_animation;

    /**
     * Set tooltip related properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    axisTooltip?: Bubble_axisTooltip;

    /**
     * Settings for hoverline properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hoverline?: Bubble_hoverline;
  }
}

declare module "sap/viz/ui5/types/Bubble_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in bubble and scatter charts
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bubble_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bubble_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bubble_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bubble_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bubble_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Bubble_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bubble_axisTooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Set tooltip related properties.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Bubble_axisTooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_axisTooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_axisTooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_axisTooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_axisTooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bubble_axisTooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bubble_axisTooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bubble_axisTooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): string[];
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * enabled/disabled tooltip.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * enabled/disabled tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bubble_axisTooltip constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Bubble_axisTooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * enabled/disabled tooltip.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     */
    formatString?: string[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bubble_hoverline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for hoverline properties.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Bubble_hoverline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_hoverlineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bubble_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bubble_hoverlineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bubble_hoverline with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bubble_hoverline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bubble_hoverline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set to enabled/disabled hoverline or not.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set to enabled/disabled hoverline or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bubble_hoverline constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Bubble_hoverlineSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set to enabled/disabled hoverline or not.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Bullet" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Bullet_tooltip from "sap/viz/ui5/types/Bullet_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Bullet
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Bullet extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bullet
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BulletSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bullet
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BulletSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bullet with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bullet>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bullet.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart.
     *
     * Default value is `['#2479BC', '#d6d6d6', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Bullet_drawingEffect;
    /**
     * Gets current value of property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isRoundCorner`
     */
    getIsRoundCorner(): boolean;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Bullet_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getReferenceValuesColorPalette referenceValuesColorPalette}.
     *
     * Set the color palette reference value color in bullet chart.
     *
     * Default value is `['#FCDCDA', '#FEECDA', '#DDF3E4']`.
     *
     *
     * @returns Value of property `referenceValuesColorPalette`
     */
    getReferenceValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Bullet_tooltip;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#2479BC', '#d6d6d6', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Bullet_drawingEffect
        | keyof typeof ui5.types.Bullet_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsRoundCorner(
      /**
       * New value for property `isRoundCorner`
       */
      bIsRoundCorner?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Bullet_orientation
        | keyof typeof ui5.types.Bullet_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getReferenceValuesColorPalette referenceValuesColorPalette}.
     *
     * Set the color palette reference value color in bullet chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#FCDCDA', '#FEECDA', '#DDF3E4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setReferenceValuesColorPalette(
      /**
       * New value for property `referenceValuesColorPalette`
       */
      sReferenceValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Bullet_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bullet constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $BulletSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.Bullet_orientation
          | keyof typeof ui5.types.Bullet_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.Bullet_drawingEffect
          | keyof typeof ui5.types.Bullet_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether bars have rounded corners
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isRoundCorner?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette reference value color in bullet chart.
     */
    referenceValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Bullet_tooltip;
  }
}

declare module "sap/viz/ui5/types/Bullet_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip related properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Bullet_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Bullet_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Bullet_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Bullet_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Bullet_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Bullet_tooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bullet_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Bullet_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Bullet_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Bullet_tooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Combination" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Combination_animation from "sap/viz/ui5/types/Combination_animation";

  import Combination_bar from "sap/viz/ui5/types/Combination_bar";

  import Combination_dataShape from "sap/viz/ui5/types/Combination_dataShape";

  import { ui5 } from "sap/viz/library";

  import Combination_line from "sap/viz/ui5/types/Combination_line";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Combination_tooltip from "sap/viz/ui5/types/Combination_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Combination
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CombinationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CombinationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the bar in the aggregation {@link #getBar bar}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBar(): this;
    /**
     * Destroys the dataShape in the aggregation {@link #getDataShape dataShape}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataShape(): this;
    /**
     * Destroys the line in the aggregation {@link #getLine line}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLine(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Combination_animation;
    /**
     * Gets content of aggregation {@link #getBar bar}.
     *
     * Settings for bar properties
     */
    getBar(): Combination_bar;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getDataShape dataShape}.
     *
     * Settings for the shape of data series
     */
    getDataShape(): Combination_dataShape;
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Combination_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets content of aggregation {@link #getLine line}.
     *
     * Settings for line properties
     */
    getLine(): Combination_line;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Combination_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Combination_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Combination_animation
    ): this;
    /**
     * Sets the aggregated {@link #getBar bar}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBar(
      /**
       * The bar to set
       */
      oBar: Combination_bar
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getDataShape dataShape}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataShape(
      /**
       * The dataShape to set
       */
      oDataShape: Combination_dataShape
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Combination_drawingEffect
        | keyof typeof ui5.types.Combination_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets the aggregated {@link #getLine line}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLine(
      /**
       * The line to set
       */
      oLine: Combination_line
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Combination_orientation
        | keyof typeof ui5.types.Combination_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Combination_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $CombinationSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.Combination_orientation
          | keyof typeof ui5.types.Combination_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.Combination_drawingEffect
          | keyof typeof ui5.types.Combination_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Combination_tooltip;

    /**
     * Settings for animations in the plot area
     */
    animation?: Combination_animation;

    /**
     * Settings for the shape of data series
     */
    dataShape?: Combination_dataShape;

    /**
     * Settings for bar properties
     */
    bar?: Combination_bar;

    /**
     * Settings for line properties
     */
    line?: Combination_line;
  }
}

declare module "sap/viz/ui5/types/Combination_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Combination_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Combination_bar" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for bar properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination_bar extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_barSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_bar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_barSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_bar with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_bar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_bar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether the bars have rounded corners
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isRoundCorner`
     */
    getIsRoundCorner(): boolean;
    /**
     * Sets a new value for property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether the bars have rounded corners
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsRoundCorner(
      /**
       * New value for property `isRoundCorner`
       */
      bIsRoundCorner?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_bar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Combination_barSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the bars have rounded corners
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isRoundCorner?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Combination_dataShape" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the shape of data series
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination_dataShape extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_dataShape
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_dataShapeSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_dataShape
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_dataShapeSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_dataShape with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_dataShape>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_dataShape.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPrimaryAxis primaryAxis}.
     *
     * Set the shape of data series on the primary axis
     *
     * Default value is `['bar', 'line', 'line']`.
     *
     *
     * @returns Value of property `primaryAxis`
     */
    getPrimaryAxis(): string[];
    /**
     * Gets current value of property {@link #getSecondaryAxis secondaryAxis}.
     *
     * Set the shape of data series on the secondary axis
     *
     * Default value is `['line', 'line', 'line']`.
     *
     *
     * @returns Value of property `secondaryAxis`
     */
    getSecondaryAxis(): string[];
    /**
     * Gets current value of property {@link #getSecondAxis secondAxis}.
     *
     * Set the shape of data series on the secondary axis (Old version; still works)
     *
     * Default value is `['line', 'line', 'line']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `secondAxis`
     */
    getSecondAxis(): string[];
    /**
     * Sets a new value for property {@link #getPrimaryAxis primaryAxis}.
     *
     * Set the shape of data series on the primary axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['bar', 'line', 'line']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryAxis(
      /**
       * New value for property `primaryAxis`
       */
      sPrimaryAxis?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryAxis secondaryAxis}.
     *
     * Set the shape of data series on the secondary axis
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['line', 'line', 'line']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryAxis(
      /**
       * New value for property `secondaryAxis`
       */
      sSecondaryAxis?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondAxis secondAxis}.
     *
     * Set the shape of data series on the secondary axis (Old version; still works)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['line', 'line', 'line']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondAxis(
      /**
       * New value for property `secondAxis`
       */
      sSecondAxis?: string[]
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_dataShape constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Combination_dataShapeSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the shape of data series on the primary axis
     */
    primaryAxis?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of data series on the secondary axis
     */
    secondaryAxis?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of data series on the secondary axis (Old version; still works)
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    secondAxis?: string[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Combination_line" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Combination_line_marker from "sap/viz/ui5/types/Combination_line_marker";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for line properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination_line extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_lineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_lineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_line with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_line>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_line.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the marker in the aggregation {@link #getMarker marker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMarker(): this;
    /**
     * Gets content of aggregation {@link #getMarker marker}.
     *
     * Settings for the visual markers for data points
     */
    getMarker(): Combination_line_marker;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Set the width of lines, ranging from '1' to '7'. If you enter a value outside the range, the line width
     * will default to '2'.
     *
     * Default value is `2`.
     *
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Sets the aggregated {@link #getMarker marker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMarker(
      /**
       * The marker to set
       */
      oMarker: Combination_line_marker
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Set the width of lines, ranging from '1' to '7'. If you enter a value outside the range, the line width
     * will default to '2'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_line constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Combination_lineSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the width of lines, ranging from '1' to '7'. If you enter a value outside the range, the line width
     * will default to '2'.
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the visual markers for data points
     */
    marker?: Combination_line_marker;
  }
}

declare module "sap/viz/ui5/types/Combination_line_marker" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the visual markers for data points
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Combination_line_marker extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_line_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_line_markerSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_line_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_line_markerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_line_marker with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_line_marker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_line_marker.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `number`
     */
    getNumber(): int;
    /**
     * Gets current value of property {@link #getShape shape}.
     *
     * Set the shape of the data point markers
     *
     * Default value is `['circle']`.
     *
     *
     * @returns Value of property `shape`
     */
    getShape(): string[];
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Set the size of the data point markers, ranging from '4' to '32'. If you enter a value outside the range,
     * the size defaults to '6'.
     *
     * Default value is `6`.
     *
     *
     * @returns Value of property `size`
     */
    getSize(): int;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the data point markers
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumber(
      /**
       * New value for property `number`
       */
      iNumber: int
    ): this;
    /**
     * Sets a new value for property {@link #getShape shape}.
     *
     * Set the shape of the data point markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['circle']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShape(
      /**
       * New value for property `shape`
       */
      sShape?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Set the size of the data point markers, ranging from '4' to '32'. If you enter a value outside the range,
     * the size defaults to '6'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `6`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      iSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the data point markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_line_marker constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Combination_line_markerSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the data point markers
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of the data point markers
     */
    shape?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the size of the data point markers, ranging from '4' to '32'. If you enter a value outside the range,
     * the size defaults to '6'.
     */
    size?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    number?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Combination_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Combination_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Combination_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Combination_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Combination_tooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Combination_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Combination_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Combination_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Combination_tooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/controller/Interaction" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Interaction_pan from "sap/viz/ui5/types/controller/Interaction_pan";

  import Interaction_selectability from "sap/viz/ui5/types/controller/Interaction_selectability";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.controller.Interaction
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Interaction extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $InteractionSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $InteractionSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Interaction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.controller.Interaction.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the pan in the aggregation {@link #getPan pan}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPan(): this;
    /**
     * Destroys the selectability in the aggregation {@link #getSelectability selectability}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySelectability(): this;
    /**
     * Gets current value of property {@link #getDecorations decorations}.
     *
     * Set decorations relating to interaction. Each item that is an object of {name: 'decoration name', fn:
     * 'decoration callback function'} is a decoration. Currently two decorations are supported: showDetail
     * and hideDetail. These two decorations can be used to create a user-defined tooltip.
     *
     * If these 2 decorations are used, the default tooltip is not used, and the user should implement a custom
     * tooltip. The showDetail decoration is called when the tooltip is shown, and the hideDetail decoration
     * is called when the tooltip is hidden.
     *
     * The arguments of showDetail are one object of {mode: 'tooltip mode', data: 'data of hovering selected
     * data point', position: 'mouse position', container: 'chart container dom element', selectedNumber: 'number
     * of selected data points'}. 'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected
     * data point displays the infoMode tooltip, while hovering over a selected data point displays the actionMode
     * tooltip. 'data' is an array of dimensions and measures, where each item is an object of {name: 'dimension
     * name or measure name', value: 'dimension member or measure value', type: 'literal string of dimension
     * or measure'}. For instance, {name: 'Country', value: 'China', type: 'dimension'}, or {name: 'Profit',
     * value: 159, type: 'measure'}.
     *
     * The arguments of hideDetail are a string representing tooltip mode, i.e. what kind of tooltip should
     * be hidden.
     *
     *
     * @returns Value of property `decorations`
     */
    getDecorations(): any;
    /**
     * Gets current value of property {@link #getEnableMouseMove enableMouseMove}.
     *
     * Set whether mouse move is enabled
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `enableMouseMove`
     */
    getEnableMouseMove(): boolean;
    /**
     * Gets current value of property {@link #getEnableMouseOut enableMouseOut}.
     *
     * Set whether mouse out is enabled
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `enableMouseOut`
     */
    getEnableMouseOut(): boolean;
    /**
     * Gets current value of property {@link #getEnableMouseOver enableMouseOver}.
     *
     * Set whether mouse over is enabled
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `enableMouseOver`
     */
    getEnableMouseOver(): boolean;
    /**
     * Gets current value of property {@link #getHandlers handlers}.
     *
     * Set handlers for behavior decration.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `handlers`
     */
    getHandlers(): any;
    /**
     * Gets current value of property {@link #getHoldSelection holdSelection}.
     *
     * Set whether hold selection is enabled
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `holdSelection`
     */
    getHoldSelection(): boolean;
    /**
     * Gets content of aggregation {@link #getPan pan}.
     *
     * add documentation for aggregation pan
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getPan(): Interaction_pan;
    /**
     * Gets current value of property {@link #getPreserveSelectionWhenDragging preserveSelectionWhenDragging}.
     *
     * Set whether preserve selection when dragging is enabled
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `preserveSelectionWhenDragging`
     */
    getPreserveSelectionWhenDragging(): boolean;
    /**
     * Gets content of aggregation {@link #getSelectability selectability}.
     *
     * Settings for selectability
     */
    getSelectability(): Interaction_selectability;
    /**
     * Gets current value of property {@link #getSupportedEventNames supportedEventNames}.
     *
     * Set supported event names
     *
     * Default value is `['mouseup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'touchstart']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `supportedEventNames`
     */
    getSupportedEventNames(): string[];
    /**
     * Gets current value of property {@link #getSupportLassoEvent supportLassoEvent}.
     *
     * Set whether support lasso event is enabled
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `supportLassoEvent`
     */
    getSupportLassoEvent(): boolean;
    /**
     * Gets current value of property {@link #getTriggers triggers}.
     *
     * Set triggers for behavior decration.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `triggers`
     */
    getTriggers(): any;
    /**
     * Sets a new value for property {@link #getDecorations decorations}.
     *
     * Set decorations relating to interaction. Each item that is an object of {name: 'decoration name', fn:
     * 'decoration callback function'} is a decoration. Currently two decorations are supported: showDetail
     * and hideDetail. These two decorations can be used to create a user-defined tooltip.
     *
     * If these 2 decorations are used, the default tooltip is not used, and the user should implement a custom
     * tooltip. The showDetail decoration is called when the tooltip is shown, and the hideDetail decoration
     * is called when the tooltip is hidden.
     *
     * The arguments of showDetail are one object of {mode: 'tooltip mode', data: 'data of hovering selected
     * data point', position: 'mouse position', container: 'chart container dom element', selectedNumber: 'number
     * of selected data points'}. 'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected
     * data point displays the infoMode tooltip, while hovering over a selected data point displays the actionMode
     * tooltip. 'data' is an array of dimensions and measures, where each item is an object of {name: 'dimension
     * name or measure name', value: 'dimension member or measure value', type: 'literal string of dimension
     * or measure'}. For instance, {name: 'Country', value: 'China', type: 'dimension'}, or {name: 'Profit',
     * value: 159, type: 'measure'}.
     *
     * The arguments of hideDetail are a string representing tooltip mode, i.e. what kind of tooltip should
     * be hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDecorations(
      /**
       * New value for property `decorations`
       */
      oDecorations: any
    ): this;
    /**
     * Sets a new value for property {@link #getEnableMouseMove enableMouseMove}.
     *
     * Set whether mouse move is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableMouseMove(
      /**
       * New value for property `enableMouseMove`
       */
      bEnableMouseMove?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableMouseOut enableMouseOut}.
     *
     * Set whether mouse out is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableMouseOut(
      /**
       * New value for property `enableMouseOut`
       */
      bEnableMouseOut?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableMouseOver enableMouseOver}.
     *
     * Set whether mouse over is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableMouseOver(
      /**
       * New value for property `enableMouseOver`
       */
      bEnableMouseOver?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHandlers handlers}.
     *
     * Set handlers for behavior decration.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHandlers(
      /**
       * New value for property `handlers`
       */
      oHandlers: any
    ): this;
    /**
     * Sets a new value for property {@link #getHoldSelection holdSelection}.
     *
     * Set whether hold selection is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoldSelection(
      /**
       * New value for property `holdSelection`
       */
      bHoldSelection?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getPan pan}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPan(
      /**
       * The pan to set
       */
      oPan: Interaction_pan
    ): this;
    /**
     * Sets a new value for property {@link #getPreserveSelectionWhenDragging preserveSelectionWhenDragging}.
     *
     * Set whether preserve selection when dragging is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPreserveSelectionWhenDragging(
      /**
       * New value for property `preserveSelectionWhenDragging`
       */
      bPreserveSelectionWhenDragging?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getSelectability selectability}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelectability(
      /**
       * The selectability to set
       */
      oSelectability: Interaction_selectability
    ): this;
    /**
     * Sets a new value for property {@link #getSupportedEventNames supportedEventNames}.
     *
     * Set supported event names
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['mouseup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'touchstart']`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSupportedEventNames(
      /**
       * New value for property `supportedEventNames`
       */
      sSupportedEventNames?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSupportLassoEvent supportLassoEvent}.
     *
     * Set whether support lasso event is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSupportLassoEvent(
      /**
       * New value for property `supportLassoEvent`
       */
      bSupportLassoEvent?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTriggers triggers}.
     *
     * Set triggers for behavior decration.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTriggers(
      /**
       * New value for property `triggers`
       */
      oTriggers: any
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Interaction constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $InteractionSettings extends $BaseStructuredTypeSettings {
    /**
     * Set supported event names
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    supportedEventNames?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether mouse move is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    enableMouseMove?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether mouse over is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    enableMouseOver?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether mouse out is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    enableMouseOut?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether support lasso event is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    supportLassoEvent?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether hold selection is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    holdSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether preserve selection when dragging is enabled
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    preserveSelectionWhenDragging?:
      | boolean
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set decorations relating to interaction. Each item that is an object of {name: 'decoration name', fn:
     * 'decoration callback function'} is a decoration. Currently two decorations are supported: showDetail
     * and hideDetail. These two decorations can be used to create a user-defined tooltip.
     *
     * If these 2 decorations are used, the default tooltip is not used, and the user should implement a custom
     * tooltip. The showDetail decoration is called when the tooltip is shown, and the hideDetail decoration
     * is called when the tooltip is hidden.
     *
     * The arguments of showDetail are one object of {mode: 'tooltip mode', data: 'data of hovering selected
     * data point', position: 'mouse position', container: 'chart container dom element', selectedNumber: 'number
     * of selected data points'}. 'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected
     * data point displays the infoMode tooltip, while hovering over a selected data point displays the actionMode
     * tooltip. 'data' is an array of dimensions and measures, where each item is an object of {name: 'dimension
     * name or measure name', value: 'dimension member or measure value', type: 'literal string of dimension
     * or measure'}. For instance, {name: 'Country', value: 'China', type: 'dimension'}, or {name: 'Profit',
     * value: 159, type: 'measure'}.
     *
     * The arguments of hideDetail are a string representing tooltip mode, i.e. what kind of tooltip should
     * be hidden.
     */
    decorations?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Set triggers for behavior decration.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    triggers?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Set handlers for behavior decration.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    handlers?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for selectability
     */
    selectability?: Interaction_selectability;

    /**
     * add documentation for aggregation pan
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    pan?: Interaction_pan;
  }
}

declare module "sap/viz/ui5/types/controller/Interaction_pan" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Structured Type sap.viz.ui5.types.controller.Interaction_pan
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Interaction_pan extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction_pan
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Interaction_panSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction_pan
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Interaction_panSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction_pan with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Interaction_pan>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.controller.Interaction_pan.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * Enable/disable pan
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set orientation of pan
     *
     * Default value is `both`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.controller.Interaction_pan_orientation;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * Enable/disable pan
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set orientation of pan
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `both`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.controller.Interaction_pan_orientation
        | keyof typeof ui5.types.controller.Interaction_pan_orientation
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Interaction_pan constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Interaction_panSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Enable/disable pan
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set orientation of pan
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.controller.Interaction_pan_orientation
          | keyof typeof ui5.types.controller.Interaction_pan_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/controller/Interaction_selectability" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for selectability
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Interaction_selectability extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction_selectability
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Interaction_selectabilitySettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.controller.Interaction_selectability
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Interaction_selectabilitySettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction_selectability with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Interaction_selectability>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.controller.Interaction_selectability.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAxisLabelSelection axisLabelSelection}.
     *
     * Set whether axis labels can be selected
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `axisLabelSelection`
     */
    getAxisLabelSelection(): boolean;
    /**
     * Gets current value of property {@link #getDataPointsCacheable dataPointsCacheable}.
     *
     * Set whether data points can be cached. If it's true, data points might be cached by Interaction for better
     * performance.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `dataPointsCacheable`
     */
    getDataPointsCacheable(): boolean;
    /**
     * Gets current value of property {@link #getLassoWithCtrlKey lassoWithCtrlKey}.
     *
     * Set whether the user must hold the ctrl key to use lasso selection
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `lassoWithCtrlKey`
     */
    getLassoWithCtrlKey(): boolean;
    /**
     * Gets current value of property {@link #getLegendSelection legendSelection}.
     *
     * Set whether the legend can be selected
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `legendSelection`
     */
    getLegendSelection(): boolean;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points
     * can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points
     * can be selected at once. If this value is set to 'none', no sets of data points can be selected. The
     * values 'single' and 'multiple' are deprecated; please remove them from your chart.
     *
     * Default value is `inclusive`.
     *
     *
     * @returns Value of property `mode`
     */
    getMode(): ui5.types.controller.Interaction_selectability_mode;
    /**
     * Gets current value of property {@link #getPlotLassoSelection plotLassoSelection}.
     *
     * Set whether lasso selection can be used in the plot area
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `plotLassoSelection`
     */
    getPlotLassoSelection(): boolean;
    /**
     * Gets current value of property {@link #getPlotStdSelection plotStdSelection}.
     *
     * Set whether selection can be done in the plot area by clicking and tapping
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `plotStdSelection`
     */
    getPlotStdSelection(): boolean;
    /**
     * Sets a new value for property {@link #getAxisLabelSelection axisLabelSelection}.
     *
     * Set whether axis labels can be selected
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisLabelSelection(
      /**
       * New value for property `axisLabelSelection`
       */
      bAxisLabelSelection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataPointsCacheable dataPointsCacheable}.
     *
     * Set whether data points can be cached. If it's true, data points might be cached by Interaction for better
     * performance.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataPointsCacheable(
      /**
       * New value for property `dataPointsCacheable`
       */
      bDataPointsCacheable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLassoWithCtrlKey lassoWithCtrlKey}.
     *
     * Set whether the user must hold the ctrl key to use lasso selection
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLassoWithCtrlKey(
      /**
       * New value for property `lassoWithCtrlKey`
       */
      bLassoWithCtrlKey?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLegendSelection legendSelection}.
     *
     * Set whether the legend can be selected
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendSelection(
      /**
       * New value for property `legendSelection`
       */
      bLegendSelection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points
     * can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points
     * can be selected at once. If this value is set to 'none', no sets of data points can be selected. The
     * values 'single' and 'multiple' are deprecated; please remove them from your chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `inclusive`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?:
        | ui5.types.controller.Interaction_selectability_mode
        | keyof typeof ui5.types.controller.Interaction_selectability_mode
    ): this;
    /**
     * Sets a new value for property {@link #getPlotLassoSelection plotLassoSelection}.
     *
     * Set whether lasso selection can be used in the plot area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotLassoSelection(
      /**
       * New value for property `plotLassoSelection`
       */
      bPlotLassoSelection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlotStdSelection plotStdSelection}.
     *
     * Set whether selection can be done in the plot area by clicking and tapping
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotStdSelection(
      /**
       * New value for property `plotStdSelection`
       */
      bPlotStdSelection?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Interaction_selectability constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Interaction_selectabilitySettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points
     * can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points
     * can be selected at once. If this value is set to 'none', no sets of data points can be selected. The
     * values 'single' and 'multiple' are deprecated; please remove them from your chart.
     */
    mode?:
      | (
          | ui5.types.controller.Interaction_selectability_mode
          | keyof typeof ui5.types.controller.Interaction_selectability_mode
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether axis labels can be selected
     */
    axisLabelSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the legend can be selected
     */
    legendSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether lasso selection can be used in the plot area
     */
    plotLassoSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether selection can be done in the plot area by clicking and tapping
     */
    plotStdSelection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the user must hold the ctrl key to use lasso selection
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    lassoWithCtrlKey?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether data points can be cached. If it's true, data points might be cached by Interaction for better
     * performance.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    dataPointsCacheable?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Datalabel" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Datalabel
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Datalabel extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Datalabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DatalabelSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Datalabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DatalabelSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Datalabel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Datalabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Datalabel.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAutomaticInOutside automaticInOutside}.
     *
     * If set to 'true', the data labels will be automatically placed outside when the data label position property
     * is inside, and vice versa
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `automaticInOutside`
     */
    getAutomaticInOutside(): boolean;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set the format strings for the data labels. For dual axis charts, the first array is applied to the primary
     * axis and the second array is applied to the second axis. If you enter fewer format strings into an array
     * than there are measures in the respective axis, then the last format string is applied to all remaining
     * measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The following
     * is a simple example: [["0.00%"],["0.00%"]].
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): any[];
    /**
     * Gets current value of property {@link #getHideWhenOverlap hideWhenOverlap}.
     *
     * Always show all data labels even they are overlapped
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `hideWhenOverlap`
     */
    getHideWhenOverlap(): boolean;
    /**
     * Gets current value of property {@link #getIsBubbleChart isBubbleChart}.
     *
     * Set whether the chart is a bubble chart
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.22. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isBubbleChart`
     */
    getIsBubbleChart(): boolean;
    /**
     * Gets current value of property {@link #getIsDonut isDonut}.
     *
     * Set whether the chart is a donut chart. Use only for donut charts.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isDonut`
     */
    getIsDonut(): boolean;
    /**
     * Gets current value of property {@link #getIsGeoChart isGeoChart}.
     *
     * Set whether the chart is a geo chart
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isGeoChart`
     */
    getIsGeoChart(): boolean;
    /**
     * Gets current value of property {@link #getIsPercentMode isPercentMode}.
     *
     * Set whether the chart is a percent chart. Set for percent chart only.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isPercentMode`
     */
    getIsPercentMode(): boolean;
    /**
     * Gets current value of property {@link #getIsStackMode isStackMode}.
     *
     * Set whether the chart is a stack chart. Set for stack chart only.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isStackMode`
     */
    getIsStackMode(): boolean;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set orientation of data labels
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Datalabel_orientation;
    /**
     * Gets current value of property {@link #getOutsidePosition outsidePosition}.
     *
     * If set to 'true', the data label is positioned above the element when it is outside
     *
     * Default value is `up`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `outsidePosition`
     */
    getOutsidePosition(): ui5.types.Datalabel_outsidePosition;
    /**
     * Gets current value of property {@link #getOutsideVisible outsideVisible}.
     *
     * If set to 'true', the data label is visible when it is outside
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `outsideVisible`
     */
    getOutsideVisible(): boolean;
    /**
     * Gets current value of property {@link #getPaintingMode paintingMode}.
     *
     * Set painting mode of data labels
     *
     * Default value is `rectCoordinate`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `paintingMode`
     */
    getPaintingMode(): ui5.types.Datalabel_paintingMode;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Set position of data labels
     *
     * Default value is `inside`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `position`
     */
    getPosition(): ui5.types.Datalabel_position;
    /**
     * Gets current value of property {@link #getPositionPreference positionPreference}.
     *
     * If set to 'true', the data label position is defined by the property 'outsidePosition', regardless of
     * whether the data label value is negative
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `positionPreference`
     */
    getPositionPreference(): boolean;
    /**
     * Gets current value of property {@link #getRespectShapeWidth respectShapeWidth}.
     *
     * If set to 'true', the data label is automatically hidden when bubble width isn't enough to show the whole
     * label in single bubble chart.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `respectShapeWidth`
     */
    getRespectShapeWidth(): boolean;
    /**
     * Gets current value of property {@link #getShowZero showZero}.
     *
     * If set to 'true', the value zero is shown in the data labels
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showZero`
     */
    getShowZero(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Set the type of label
     *
     * Default value is `'value'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set whether the data labels are visible
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getAutomaticInOutside automaticInOutside}.
     *
     * If set to 'true', the data labels will be automatically placed outside when the data label position property
     * is inside, and vice versa
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAutomaticInOutside(
      /**
       * New value for property `automaticInOutside`
       */
      bAutomaticInOutside?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set the format strings for the data labels. For dual axis charts, the first array is applied to the primary
     * axis and the second array is applied to the second axis. If you enter fewer format strings into an array
     * than there are measures in the respective axis, then the last format string is applied to all remaining
     * measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The following
     * is a simple example: [["0.00%"],["0.00%"]].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: any[]
    ): this;
    /**
     * Sets a new value for property {@link #getHideWhenOverlap hideWhenOverlap}.
     *
     * Always show all data labels even they are overlapped
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideWhenOverlap(
      /**
       * New value for property `hideWhenOverlap`
       */
      bHideWhenOverlap?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsBubbleChart isBubbleChart}.
     *
     * Set whether the chart is a bubble chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.22. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsBubbleChart(
      /**
       * New value for property `isBubbleChart`
       */
      bIsBubbleChart?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsDonut isDonut}.
     *
     * Set whether the chart is a donut chart. Use only for donut charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsDonut(
      /**
       * New value for property `isDonut`
       */
      bIsDonut?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsGeoChart isGeoChart}.
     *
     * Set whether the chart is a geo chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsGeoChart(
      /**
       * New value for property `isGeoChart`
       */
      bIsGeoChart?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsPercentMode isPercentMode}.
     *
     * Set whether the chart is a percent chart. Set for percent chart only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsPercentMode(
      /**
       * New value for property `isPercentMode`
       */
      bIsPercentMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsStackMode isStackMode}.
     *
     * Set whether the chart is a stack chart. Set for stack chart only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsStackMode(
      /**
       * New value for property `isStackMode`
       */
      bIsStackMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set orientation of data labels
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Datalabel_orientation
        | keyof typeof ui5.types.Datalabel_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getOutsidePosition outsidePosition}.
     *
     * If set to 'true', the data label is positioned above the element when it is outside
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `up`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOutsidePosition(
      /**
       * New value for property `outsidePosition`
       */
      sOutsidePosition?:
        | ui5.types.Datalabel_outsidePosition
        | keyof typeof ui5.types.Datalabel_outsidePosition
    ): this;
    /**
     * Sets a new value for property {@link #getOutsideVisible outsideVisible}.
     *
     * If set to 'true', the data label is visible when it is outside
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOutsideVisible(
      /**
       * New value for property `outsideVisible`
       */
      bOutsideVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPaintingMode paintingMode}.
     *
     * Set painting mode of data labels
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `rectCoordinate`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPaintingMode(
      /**
       * New value for property `paintingMode`
       */
      sPaintingMode?:
        | ui5.types.Datalabel_paintingMode
        | keyof typeof ui5.types.Datalabel_paintingMode
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Set position of data labels
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `inside`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?:
        | ui5.types.Datalabel_position
        | keyof typeof ui5.types.Datalabel_position
    ): this;
    /**
     * Sets a new value for property {@link #getPositionPreference positionPreference}.
     *
     * If set to 'true', the data label position is defined by the property 'outsidePosition', regardless of
     * whether the data label value is negative
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPositionPreference(
      /**
       * New value for property `positionPreference`
       */
      bPositionPreference?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getRespectShapeWidth respectShapeWidth}.
     *
     * If set to 'true', the data label is automatically hidden when bubble width isn't enough to show the whole
     * label in single bubble chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRespectShapeWidth(
      /**
       * New value for property `respectShapeWidth`
       */
      bRespectShapeWidth?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowZero showZero}.
     *
     * If set to 'true', the value zero is shown in the data labels
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowZero(
      /**
       * New value for property `showZero`
       */
      bShowZero?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Set the type of label
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'value'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set whether the data labels are visible
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Datalabel constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DatalabelSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data labels are visible
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Always show all data labels even they are overlapped
     */
    hideWhenOverlap?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart is a donut chart. Use only for donut charts.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isDonut?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the type of label
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    type?: string | PropertyBindingInfo;

    /**
     * If set to 'true', the data labels will be automatically placed outside when the data label position property
     * is inside, and vice versa
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    automaticInOutside?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to 'true', the value zero is shown in the data labels
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showZero?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart is a geo chart
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isGeoChart?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart is a bubble chart
     *
     * @deprecated As of version 1.22. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isBubbleChart?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart is a stack chart. Set for stack chart only.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isStackMode?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart is a percent chart. Set for percent chart only.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isPercentMode?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to 'true', the data label position is defined by the property 'outsidePosition', regardless of
     * whether the data label value is negative
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    positionPreference?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to 'true', the data label is visible when it is outside
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    outsideVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to 'true', the data label is positioned above the element when it is outside
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    outsidePosition?:
      | (
          | ui5.types.Datalabel_outsidePosition
          | keyof typeof ui5.types.Datalabel_outsidePosition
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set painting mode of data labels
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    paintingMode?:
      | (
          | ui5.types.Datalabel_paintingMode
          | keyof typeof ui5.types.Datalabel_paintingMode
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set position of data labels
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    position?:
      | (
          | ui5.types.Datalabel_position
          | keyof typeof ui5.types.Datalabel_position
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set orientation of data labels
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.Datalabel_orientation
          | keyof typeof ui5.types.Datalabel_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * If set to 'true', the data label is automatically hidden when bubble width isn't enough to show the whole
     * label in single bubble chart.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    respectShapeWidth?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the format strings for the data labels. For dual axis charts, the first array is applied to the primary
     * axis and the second array is applied to the second axis. If you enter fewer format strings into an array
     * than there are measures in the respective axis, then the last format string is applied to all remaining
     * measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The following
     * is a simple example: [["0.00%"],["0.00%"]].
     */
    formatString?: any[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Datatransform" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Datatransform_autoBinning from "sap/viz/ui5/types/Datatransform_autoBinning";

  import Datatransform_dataSampling from "sap/viz/ui5/types/Datatransform_dataSampling";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Module sap.viz.ui5.types.Datatransform
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Datatransform extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DatatransformSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DatatransformSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Datatransform with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Datatransform>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Datatransform.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the autoBinning in the aggregation {@link #getAutoBinning autoBinning}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAutoBinning(): this;
    /**
     * Destroys the dataSampling in the aggregation {@link #getDataSampling dataSampling}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataSampling(): this;
    /**
     * Gets content of aggregation {@link #getAutoBinning autoBinning}.
     *
     * Settings for the auto-binning algorithm
     */
    getAutoBinning(): Datatransform_autoBinning;
    /**
     * Gets content of aggregation {@link #getDataSampling dataSampling}.
     *
     * Settings for the data sampling algorithm
     */
    getDataSampling(): Datatransform_dataSampling;
    /**
     * Sets the aggregated {@link #getAutoBinning autoBinning}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAutoBinning(
      /**
       * The autoBinning to set
       */
      oAutoBinning: Datatransform_autoBinning
    ): this;
    /**
     * Sets the aggregated {@link #getDataSampling dataSampling}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataSampling(
      /**
       * The dataSampling to set
       */
      oDataSampling: Datatransform_dataSampling
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Datatransform constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DatatransformSettings extends $BaseStructuredTypeSettings {
    /**
     * Settings for the auto-binning algorithm
     */
    autoBinning?: Datatransform_autoBinning;

    /**
     * Settings for the data sampling algorithm
     */
    dataSampling?: Datatransform_dataSampling;
  }
}

declare module "sap/viz/ui5/types/Datatransform_autoBinning" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the auto-binning algorithm
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Datatransform_autoBinning extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_autoBinning
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_autoBinningSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_autoBinning
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_autoBinningSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Datatransform_autoBinning with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Datatransform_autoBinning>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Datatransform_autoBinning.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getBinNumber binNumber}.
     *
     * Set the bin number.
     *
     * Default value is `10`.
     *
     *
     * @returns Value of property `binNumber`
     */
    getBinNumber(): int;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * Set whether data auto-binning is enabled.
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Sets a new value for property {@link #getBinNumber binNumber}.
     *
     * Set the bin number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `10`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBinNumber(
      /**
       * New value for property `binNumber`
       */
      iBinNumber?: int
    ): this;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * Set whether data auto-binning is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Datatransform_autoBinning constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Datatransform_autoBinningSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether data auto-binning is enabled.
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the bin number.
     */
    binNumber?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Datatransform_dataSampling" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Datatransform_dataSampling_grid from "sap/viz/ui5/types/Datatransform_dataSampling_grid";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the data sampling algorithm
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Datatransform_dataSampling extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_dataSampling
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_dataSamplingSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_dataSampling
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_dataSamplingSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Datatransform_dataSampling>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Datatransform_dataSampling.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the grid in the aggregation {@link #getGrid grid}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGrid(): this;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * Set whether data sampling is enabled.
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Gets content of aggregation {@link #getGrid grid}.
     *
     * add documentation for aggregation grid
     */
    getGrid(): Datatransform_dataSampling_grid;
    /**
     * Gets current value of property {@link #getNumberPrecondition numberPrecondition}.
     *
     * If the data point is larger than this value, data sampling is triggered.
     *
     * Default value is `3000`.
     *
     *
     * @returns Value of property `numberPrecondition`
     */
    getNumberPrecondition(): int;
    /**
     * Gets current value of property {@link #getSizeFactor sizeFactor}.
     *
     * Set the data point percentage in the original dataset
     *
     * Default value is `1`.
     *
     *
     * @returns Value of property `sizeFactor`
     */
    getSizeFactor(): int;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * Set whether data sampling is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getGrid grid}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGrid(
      /**
       * The grid to set
       */
      oGrid: Datatransform_dataSampling_grid
    ): this;
    /**
     * Sets a new value for property {@link #getNumberPrecondition numberPrecondition}.
     *
     * If the data point is larger than this value, data sampling is triggered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `3000`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumberPrecondition(
      /**
       * New value for property `numberPrecondition`
       */
      iNumberPrecondition?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSizeFactor sizeFactor}.
     *
     * Set the data point percentage in the original dataset
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSizeFactor(
      /**
       * New value for property `sizeFactor`
       */
      iSizeFactor?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Datatransform_dataSampling constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Datatransform_dataSamplingSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether data sampling is enabled.
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the data point percentage in the original dataset
     */
    sizeFactor?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * If the data point is larger than this value, data sampling is triggered.
     */
    numberPrecondition?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * add documentation for aggregation grid
     */
    grid?: Datatransform_dataSampling_grid;
  }
}

declare module "sap/viz/ui5/types/Datatransform_dataSampling_grid" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Structured Type sap.viz.ui5.types.Datatransform_dataSampling_grid
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Datatransform_dataSampling_grid extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_dataSampling_grid
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_dataSampling_gridSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Datatransform_dataSampling_grid
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Datatransform_dataSampling_gridSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling_grid with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Datatransform_dataSampling_grid>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Datatransform_dataSampling_grid.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColumn column}.
     *
     * Set the number of columns in the grid.
     *
     * Default value is `3`.
     *
     *
     * @returns Value of property `column`
     */
    getColumn(): int;
    /**
     * Gets current value of property {@link #getRow row}.
     *
     * Set the number of rows in the grid.
     *
     * Default value is `3`.
     *
     *
     * @returns Value of property `row`
     */
    getRow(): int;
    /**
     * Sets a new value for property {@link #getColumn column}.
     *
     * Set the number of columns in the grid.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `3`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColumn(
      /**
       * New value for property `column`
       */
      iColumn?: int
    ): this;
    /**
     * Sets a new value for property {@link #getRow row}.
     *
     * Set the number of rows in the grid.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `3`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRow(
      /**
       * New value for property `row`
       */
      iRow?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Datatransform_dataSampling_grid constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Datatransform_dataSampling_gridSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the number of rows in the grid.
     */
    row?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number of columns in the grid.
     */
    column?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Heatmap" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Heatmap_animation from "sap/viz/ui5/types/Heatmap_animation";

  import Heatmap_border from "sap/viz/ui5/types/Heatmap_border";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Heatmap_tooltip from "sap/viz/ui5/types/Heatmap_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Heatmap
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Heatmap extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HeatmapSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HeatmapSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Heatmap with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Heatmap>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Heatmap.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the border in the aggregation {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBorder(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Heatmap_animation;
    /**
     * Gets content of aggregation {@link #getBorder border}.
     *
     * Settings for the border
     */
    getBorder(): Heatmap_border;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getEndColor endColor}.
     *
     * Set the end color of the heat map
     *
     * Default value is `'#73C03C'`.
     *
     *
     * @returns Value of property `endColor`
     */
    getEndColor(): string;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getLegendValues legendValues}.
     *
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     *
     *
     * @returns Value of property `legendValues`
     */
    getLegendValues(): int[];
    /**
     * Gets current value of property {@link #getStartColor startColor}.
     *
     * Set the starting color of the heat map
     *
     * Default value is `'#C2E3A9'`.
     *
     *
     * @returns Value of property `startColor`
     */
    getStartColor(): string;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Heatmap_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Heatmap_animation
    ): this;
    /**
     * Sets the aggregated {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorder(
      /**
       * The border to set
       */
      oBorder: Heatmap_border
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getEndColor endColor}.
     *
     * Set the end color of the heat map
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#73C03C'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEndColor(
      /**
       * New value for property `endColor`
       */
      sEndColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getLegendValues legendValues}.
     *
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendValues(
      /**
       * New value for property `legendValues`
       */
      sLegendValues: int[]
    ): this;
    /**
     * Sets a new value for property {@link #getStartColor startColor}.
     *
     * Set the starting color of the heat map
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#C2E3A9'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStartColor(
      /**
       * New value for property `startColor`
       */
      sStartColor?: string
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Heatmap_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Heatmap constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $HeatmapSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the starting color of the heat map
     */
    startColor?: string | PropertyBindingInfo;

    /**
     * Set the end color of the heat map
     */
    endColor?: string | PropertyBindingInfo;

    /**
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     */
    legendValues?: int[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the border
     */
    border?: Heatmap_border;

    /**
     * Settings for animations in the plot area
     */
    animation?: Heatmap_animation;

    /**
     * Settings for tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Heatmap_tooltip;
  }
}

declare module "sap/viz/ui5/types/Heatmap_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Heatmap_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Heatmap_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Heatmap_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Heatmap_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Heatmap_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Heatmap_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Heatmap_border" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Heatmap_border extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_borderSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_borderSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Heatmap_border with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Heatmap_border>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Heatmap_border.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the zone edge
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the zone edge
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Heatmap_border constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Heatmap_borderSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the zone edge
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Heatmap_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Heatmap_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Heatmap_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Heatmap_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Heatmap_tooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Heatmap_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Heatmap_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Heatmap_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Heatmap_tooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/layout/Dock" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Module sap.viz.ui5.types.layout.Dock
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Dock extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.layout.Dock
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DockSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.layout.Dock
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DockSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.layout.Dock with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dock>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.layout.Dock.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  /**
   * Describes the settings that can be provided to the Dock constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $DockSettings extends $BaseStructuredTypeSettings {}
}

declare module "sap/viz/ui5/types/layout/Stack" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Module sap.viz.ui5.types.layout.Stack
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Stack extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.layout.Stack
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.layout.Stack
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.layout.Stack with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Stack>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.layout.Stack.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  /**
   * Describes the settings that can be provided to the Stack constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $StackSettings extends $BaseStructuredTypeSettings {}
}

declare module "sap/viz/ui5/types/Legend" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Legend_layout from "sap/viz/ui5/types/Legend_layout";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Module sap.viz.ui5.types.Legend
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Legend extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Legend
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LegendSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Legend
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LegendSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Legend with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Legend>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Legend.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the layout in the aggregation {@link #getLayout layout}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayout(): this;
    /**
     * Gets content of aggregation {@link #getLayout layout}.
     *
     * Settings for the layout of the legend area
     */
    getLayout(): Legend_layout;
    /**
     * Sets the aggregated {@link #getLayout layout}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayout(
      /**
       * The layout to set
       */
      oLayout: Legend_layout
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Legend constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $LegendSettings extends $BaseStructuredTypeSettings {
    /**
     * Settings for the layout of the legend area
     */
    layout?: Legend_layout;
  }
}

declare module "sap/viz/ui5/types/legend/Common" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Common_title from "sap/viz/ui5/types/legend/Common_title";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.legend.Common
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Common extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.legend.Common
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CommonSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.legend.Common
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CommonSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.legend.Common with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Common>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.legend.Common.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the title in the aggregation {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTitle(): this;
    /**
     * Gets current value of property {@link #getAlignment alignment}.
     *
     * Set the alignment of the legend
     *
     * Default value is `start`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `alignment`
     */
    getAlignment(): ui5.types.legend.Common_alignment;
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy.
     * If this value is set to 'normal', colors are matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.legend.Common_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set the format string for the legend. The following characters are reserved as tokens for format code:
     * MDYHSAmdyhsa#?%0@.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): string;
    /**
     * Gets current value of property {@link #getIsHierarchical isHierarchical}.
     *
     * Set whether the legend is hierarchical. This is only supported if the legend is located to the right
     * of the chart.
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `isHierarchical`
     */
    getIsHierarchical(): boolean;
    /**
     * Gets current value of property {@link #getIsScrollable isScrollable}.
     *
     * Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to
     * show the whole legend, an ellipsis (...) indicates the missing legend items.
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `isScrollable`
     */
    getIsScrollable(): boolean;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.
     *
     * Default value is `right`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `position`
     */
    getPosition(): ui5.types.legend.Common_position;
    /**
     * Gets content of aggregation {@link #getTitle title}.
     *
     * Settings for the legend title
     */
    getTitle(): Common_title;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Set legend type for Bubble charts. Non-bubble charts are not supported.
     *
     * Default value is `ColorLegend`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `type`
     */
    getType(): ui5.types.legend.Common_type;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the legend
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getAlignment alignment}.
     *
     * Set the alignment of the legend
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `start`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAlignment(
      /**
       * New value for property `alignment`
       */
      sAlignment?:
        | ui5.types.legend.Common_alignment
        | keyof typeof ui5.types.legend.Common_alignment
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy.
     * If this value is set to 'normal', colors are matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.legend.Common_drawingEffect
        | keyof typeof ui5.types.legend.Common_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set the format string for the legend. The following characters are reserved as tokens for format code:
     * MDYHSAmdyhsa#?%0@.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIsHierarchical isHierarchical}.
     *
     * Set whether the legend is hierarchical. This is only supported if the legend is located to the right
     * of the chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsHierarchical(
      /**
       * New value for property `isHierarchical`
       */
      bIsHierarchical?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsScrollable isScrollable}.
     *
     * Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to
     * show the whole legend, an ellipsis (...) indicates the missing legend items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsScrollable(
      /**
       * New value for property `isScrollable`
       */
      bIsScrollable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `right`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?:
        | ui5.types.legend.Common_position
        | keyof typeof ui5.types.legend.Common_position
    ): this;
    /**
     * Sets the aggregated {@link #getTitle title}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * The title to set
       */
      oTitle: Common_title
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Set legend type for Bubble charts. Non-bubble charts are not supported.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `ColorLegend`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?:
        | ui5.types.legend.Common_type
        | keyof typeof ui5.types.legend.Common_type
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the legend
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Common constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $CommonSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the legend
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the format string for the legend. The following characters are reserved as tokens for format code:
     * MDYHSAmdyhsa#?%0@.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    formatString?: string | PropertyBindingInfo;

    /**
     * Set whether the legend is hierarchical. This is only supported if the legend is located to the right
     * of the chart.
     */
    isHierarchical?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to
     * show the whole legend, an ellipsis (...) indicates the missing legend items.
     */
    isScrollable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    position?:
      | (
          | ui5.types.legend.Common_position
          | keyof typeof ui5.types.legend.Common_position
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set legend type for Bubble charts. Non-bubble charts are not supported.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    type?:
      | (
          | ui5.types.legend.Common_type
          | keyof typeof ui5.types.legend.Common_type
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the alignment of the legend
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    alignment?:
      | (
          | ui5.types.legend.Common_alignment
          | keyof typeof ui5.types.legend.Common_alignment
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy.
     * If this value is set to 'normal', colors are matte.
     */
    drawingEffect?:
      | (
          | ui5.types.legend.Common_drawingEffect
          | keyof typeof ui5.types.legend.Common_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Settings for the legend title
     */
    title?: Common_title;
  }
}

declare module "sap/viz/ui5/types/legend/Common_title" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the legend title
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Common_title extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.legend.Common_title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Common_titleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.legend.Common_title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Common_titleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.legend.Common_title with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Common_title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.legend.Common_title.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Set the text of the legend title
     *
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the legend title
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Set the text of the legend title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the legend title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Common_title constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Common_titleSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the legend title
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the text of the legend title
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Legend_layout" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the layout of the legend area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Legend_layout extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Legend_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Legend_layoutSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Legend_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Legend_layoutSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Legend_layout with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Legend_layout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Legend_layout.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Set the position of the legend area
     *
     * Default value is `right`.
     *
     *
     * @returns Value of property `position`
     */
    getPosition(): ui5.types.Legend_layout_position;
    /**
     * Gets current value of property {@link #getPriority priority}.
     *
     * Set the priority of the position for the legend area
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `priority`
     */
    getPriority(): int;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Set the position of the legend area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `right`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?:
        | ui5.types.Legend_layout_position
        | keyof typeof ui5.types.Legend_layout_position
    ): this;
    /**
     * Sets a new value for property {@link #getPriority priority}.
     *
     * Set the priority of the position for the legend area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPriority(
      /**
       * New value for property `priority`
       */
      iPriority?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Legend_layout constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Legend_layoutSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the position of the legend area
     */
    position?:
      | (
          | ui5.types.Legend_layout_position
          | keyof typeof ui5.types.Legend_layout_position
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the priority of the position for the legend area
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    priority?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Line" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Line_animation from "sap/viz/ui5/types/Line_animation";

  import { ui5 } from "sap/viz/library";

  import Line_hoverline from "sap/viz/ui5/types/Line_hoverline";

  import Line_marker from "sap/viz/ui5/types/Line_marker";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Line_tooltip from "sap/viz/ui5/types/Line_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Line
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Line extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Line
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Line with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Line.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the hoverline in the aggregation {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyHoverline(): this;
    /**
     * Destroys the marker in the aggregation {@link #getMarker marker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMarker(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations.
     */
    getAnimation(): Line_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Line_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets content of aggregation {@link #getHoverline hoverline}.
     *
     * Settings for the hoverline.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getHoverline(): Line_hoverline;
    /**
     * Gets content of aggregation {@link #getMarker marker}.
     *
     * Settings for marker/data point graphics
     */
    getMarker(): Line_marker;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.Line_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getShowGroupDetail showGroupDetail}.
     *
     * mouse over show one catergory detail
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showGroupDetail`
     */
    getShowGroupDetail(): boolean;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Line_tooltip;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Set the width of the lines, ranging from '1' to '7'. If you enter a value outside that range, the line
     * width defaults to '2'.
     *
     * Default value is `2`.
     *
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Line_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Line_drawingEffect
        | keyof typeof ui5.types.Line_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets the aggregated {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverline(
      /**
       * The hoverline to set
       */
      oHoverline: Line_hoverline
    ): this;
    /**
     * Sets the aggregated {@link #getMarker marker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMarker(
      /**
       * The marker to set
       */
      oMarker: Line_marker
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.Line_orientation
        | keyof typeof ui5.types.Line_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getShowGroupDetail showGroupDetail}.
     *
     * mouse over show one catergory detail
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowGroupDetail(
      /**
       * New value for property `showGroupDetail`
       */
      bShowGroupDetail?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Line_tooltip
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Set the width of the lines, ranging from '1' to '7'. If you enter a value outside that range, the line
     * width defaults to '2'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $LineSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (ui5.types.Line_orientation | keyof typeof ui5.types.Line_orientation)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.Line_drawingEffect
          | keyof typeof ui5.types.Line_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the width of the lines, ranging from '1' to '7'. If you enter a value outside that range, the line
     * width defaults to '2'.
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * mouse over show one catergory detail
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showGroupDetail?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Line_tooltip;

    /**
     * Settings for animations.
     */
    animation?: Line_animation;

    /**
     * Settings for marker/data point graphics
     */
    marker?: Line_marker;

    /**
     * Settings for the hoverline.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hoverline?: Line_hoverline;
  }
}

declare module "sap/viz/ui5/types/Line_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations.
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Line_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Line_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Line_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Line_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Line_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Line_animationSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Line_hoverline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the hoverline.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Line_hoverline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Line_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_hoverlineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Line_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_hoverlineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Line_hoverline with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line_hoverline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Line_hoverline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the hoverline.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the hoverline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line_hoverline constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Line_hoverlineSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the hoverline.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Line_marker" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ui5 } from "sap/viz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for marker/data point graphics
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Line_marker extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Line_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_markerSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Line_marker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_markerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Line_marker with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line_marker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Line_marker.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `number`
     */
    getNumber(): int;
    /**
     * Gets current value of property {@link #getShape shape}.
     *
     * Set the shape of the markers
     *
     * Default value is `circle`.
     *
     *
     * @returns Value of property `shape`
     */
    getShape(): ui5.types.Line_marker_shape;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Set the marker size for data points, ranging from '4' to '32'. If you enter a value outside that range,
     * the marker size defaults to '6'.
     *
     * Default value is `6`.
     *
     *
     * @returns Value of property `size`
     */
    getSize(): int;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the markers
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumber(
      /**
       * New value for property `number`
       */
      iNumber: int
    ): this;
    /**
     * Sets a new value for property {@link #getShape shape}.
     *
     * Set the shape of the markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `circle`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShape(
      /**
       * New value for property `shape`
       */
      sShape?:
        | ui5.types.Line_marker_shape
        | keyof typeof ui5.types.Line_marker_shape
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Set the marker size for data points, ranging from '4' to '32'. If you enter a value outside that range,
     * the marker size defaults to '6'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `6`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      iSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the markers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line_marker constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Line_markerSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the markers
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of the markers
     */
    shape?:
      | (ui5.types.Line_marker_shape | keyof typeof ui5.types.Line_marker_shape)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the marker size for data points, ranging from '4' to '32'. If you enter a value outside that range,
     * the marker size defaults to '6'.
     */
    size?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number to enable events for markers when they are invisible. If the total amount of markers is
     * bigger than this value, markers will remain hidden when selected or hovered over. The default value is
     * Number.POSITIVE_INFINITY, which is the largest possible value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    number?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Line_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Line_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Line_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Line_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Line_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Line_tooltip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Line_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Line_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Line_tooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Pie" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Pie_animation from "sap/viz/ui5/types/Pie_animation";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Pie_tooltip from "sap/viz/ui5/types/Pie_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Pie
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Pie extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Pie
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PieSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Pie
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PieSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Pie with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Pie>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Pie.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Pie_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the sectors of the pie chart
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect of the pie
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Pie_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Rules to format data points, sample: [{condition: [{Key1:"Value1", Key2:"Value2"}], color:"#00ff00"},
     * {condition: [{Key3:"Value3"}], color:"#00ffff"}]. Each rule has two properties: "condition" and "color".
     * The relation among the condition object in "condition" array is "OR", which means the data point that
     * met any condition in the array will apply the "color". If multiple rules could apply on the same data
     * point, the last rule would take effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getIsDonut isDonut}.
     *
     * Set the chart to display as a donut or a pie. If this value is set to 'true', the chart displays as a
     * donut. If this value is set to 'false', the chart displays as a pie.
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `isDonut`
     */
    getIsDonut(): boolean;
    /**
     * Gets current value of property {@link #getIsGeoPie isGeoPie}.
     *
     * Set whether the chart displays as a geo pie chart. If this value is set to 'true', the chart displays
     * as a geo pie chart. If this value is set to 'false', the chart does not display as a geo pie chart.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isGeoPie`
     */
    getIsGeoPie(): boolean;
    /**
     * Gets current value of property {@link #getPlotScale plotScale}.
     *
     * Set the plot scale of the pie
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `plotScale`
     */
    getPlotScale(): float;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Pie_tooltip;
    /**
     * Gets current value of property {@link #getValign valign}.
     *
     * Set the vertical aligment of the chart
     *
     * Default value is `top`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `valign`
     */
    getValign(): ui5.types.Pie_valign;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Pie_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the sectors of the pie chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect of the pie
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Pie_drawingEffect
        | keyof typeof ui5.types.Pie_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Rules to format data points, sample: [{condition: [{Key1:"Value1", Key2:"Value2"}], color:"#00ff00"},
     * {condition: [{Key3:"Value3"}], color:"#00ffff"}]. Each rule has two properties: "condition" and "color".
     * The relation among the condition object in "condition" array is "OR", which means the data point that
     * met any condition in the array will apply the "color". If multiple rules could apply on the same data
     * point, the last rule would take effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getIsDonut isDonut}.
     *
     * Set the chart to display as a donut or a pie. If this value is set to 'true', the chart displays as a
     * donut. If this value is set to 'false', the chart displays as a pie.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsDonut(
      /**
       * New value for property `isDonut`
       */
      bIsDonut?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsGeoPie isGeoPie}.
     *
     * Set whether the chart displays as a geo pie chart. If this value is set to 'true', the chart displays
     * as a geo pie chart. If this value is set to 'false', the chart does not display as a geo pie chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsGeoPie(
      /**
       * New value for property `isGeoPie`
       */
      bIsGeoPie?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlotScale plotScale}.
     *
     * Set the plot scale of the pie
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlotScale(
      /**
       * New value for property `plotScale`
       */
      fPlotScale?: float
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Pie_tooltip
    ): this;
    /**
     * Sets a new value for property {@link #getValign valign}.
     *
     * Set the vertical aligment of the chart
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `top`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValign(
      /**
       * New value for property `valign`
       */
      sValign?: ui5.types.Pie_valign | keyof typeof ui5.types.Pie_valign
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Pie constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $PieSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the color palette for the sectors of the pie chart
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the chart to display as a donut or a pie. If this value is set to 'true', the chart displays as a
     * donut. If this value is set to 'false', the chart displays as a pie.
     */
    isDonut?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the chart displays as a geo pie chart. If this value is set to 'true', the chart displays
     * as a geo pie chart. If this value is set to 'false', the chart does not display as a geo pie chart.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isGeoPie?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the vertical aligment of the chart
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    valign?:
      | (ui5.types.Pie_valign | keyof typeof ui5.types.Pie_valign)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect of the pie
     */
    drawingEffect?:
      | (ui5.types.Pie_drawingEffect | keyof typeof ui5.types.Pie_drawingEffect)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Rules to format data points, sample: [{condition: [{Key1:"Value1", Key2:"Value2"}], color:"#00ff00"},
     * {condition: [{Key3:"Value3"}], color:"#00ffff"}]. Each rule has two properties: "condition" and "color".
     * The relation among the condition object in "condition" array is "OR", which means the data point that
     * met any condition in the array will apply the "color". If multiple rules could apply on the same data
     * point, the last rule would take effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the plot scale of the pie
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    plotScale?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for animations in the plot area
     */
    animation?: Pie_animation;

    /**
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Pie_tooltip;
  }
}

declare module "sap/viz/ui5/types/Pie_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Pie_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Pie_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Pie_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Pie_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Pie_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Pie_animation with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Pie_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Pie_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Pie_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Pie_animationSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Pie_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip related properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Pie_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Pie_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Pie_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Pie_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Pie_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Pie_tooltip with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Pie_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Pie_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any
     * character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): string[];
    /**
     * Gets current value of property {@link #getPercentageFormat percentageFormat}.
     *
     * Set the number format of the percentage label in tooltip
     *
     * Default value is `'.0%'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `percentageFormat`
     */
    getPercentageFormat(): string;
    /**
     * Gets current value of property {@link #getValueFormat valueFormat}.
     *
     * Set the number format of the measure value in tooltip
     *
     * Default value is `'n'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `valueFormat`
     */
    getValueFormat(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set whether tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any
     * character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getPercentageFormat percentageFormat}.
     *
     * Set the number format of the percentage label in tooltip
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'.0%'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPercentageFormat(
      /**
       * New value for property `percentageFormat`
       */
      sPercentageFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueFormat valueFormat}.
     *
     * Set the number format of the measure value in tooltip
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'n'`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueFormat(
      /**
       * New value for property `valueFormat`
       */
      sValueFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set whether tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Pie_tooltip constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Pie_tooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * Set whether tooltip is enabled
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the number format of the measure value in tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    valueFormat?: string | PropertyBindingInfo;

    /**
     * Set the number format of the percentage label in tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    percentageFormat?: string | PropertyBindingInfo;

    /**
     * Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any
     * character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     */
    formatString?: string[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/RootContainer" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import RootContainer_layout from "sap/viz/ui5/types/RootContainer_layout";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Module sap.viz.ui5.types.RootContainer
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class RootContainer extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.RootContainer
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $RootContainerSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.RootContainer
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $RootContainerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.RootContainer with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RootContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.RootContainer.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the layout in the aggregation {@link #getLayout layout}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayout(): this;
    /**
     * Gets content of aggregation {@link #getLayout layout}.
     *
     * Settings for the layout of the root container
     */
    getLayout(): RootContainer_layout;
    /**
     * Sets the aggregated {@link #getLayout layout}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayout(
      /**
       * The layout to set
       */
      oLayout: RootContainer_layout
    ): this;
  }
  /**
   * Describes the settings that can be provided to the RootContainer constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $RootContainerSettings extends $BaseStructuredTypeSettings {
    /**
     * Settings for the layout of the root container
     */
    layout?: RootContainer_layout;
  }
}

declare module "sap/viz/ui5/types/RootContainer_layout" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the layout of the root container
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class RootContainer_layout extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.RootContainer_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $RootContainer_layoutSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.RootContainer_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $RootContainer_layoutSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.RootContainer_layout with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RootContainer_layout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.RootContainer_layout.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAdjustPolicy adjustPolicy}.
     *
     * Indicates the layout adjust policy
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `adjustPolicy`
     */
    getAdjustPolicy(): string;
    /**
     * Gets current value of property {@link #getHgap hgap}.
     *
     * Horizontal gap value between UI components
     *
     * Default value is `8`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `hgap`
     */
    getHgap(): int;
    /**
     * Gets current value of property {@link #getHideAxisTitleFirst hideAxisTitleFirst}.
     *
     * Hide axis title firstly if the space is limited.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `hideAxisTitleFirst`
     */
    getHideAxisTitleFirst(): boolean;
    /**
     * Gets current value of property {@link #getPadding padding}.
     *
     * Set the universal padding value. This single value is applied to all sides of the chart. Individual settings
     * for each edge are also supported.
     *
     * Default value is `24`.
     *
     *
     * @returns Value of property `padding`
     */
    getPadding(): int;
    /**
     * Gets current value of property {@link #getPaddingBottom paddingBottom}.
     *
     * Set the padding value for the bottom side
     *
     *
     * @returns Value of property `paddingBottom`
     */
    getPaddingBottom(): int;
    /**
     * Gets current value of property {@link #getPaddingLeft paddingLeft}.
     *
     * Set the padding value for the left side
     *
     *
     * @returns Value of property `paddingLeft`
     */
    getPaddingLeft(): int;
    /**
     * Gets current value of property {@link #getPaddingRight paddingRight}.
     *
     * Set the padding value for the right side
     *
     *
     * @returns Value of property `paddingRight`
     */
    getPaddingRight(): int;
    /**
     * Gets current value of property {@link #getPaddingTop paddingTop}.
     *
     * Set the padding value for the top side
     *
     *
     * @returns Value of property `paddingTop`
     */
    getPaddingTop(): int;
    /**
     * Gets current value of property {@link #getVgap vgap}.
     *
     * Vertical gap value between UI components
     *
     * Default value is `8`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `vgap`
     */
    getVgap(): int;
    /**
     * Sets a new value for property {@link #getAdjustPolicy adjustPolicy}.
     *
     * Indicates the layout adjust policy
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAdjustPolicy(
      /**
       * New value for property `adjustPolicy`
       */
      sAdjustPolicy: string
    ): this;
    /**
     * Sets a new value for property {@link #getHgap hgap}.
     *
     * Horizontal gap value between UI components
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `8`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHgap(
      /**
       * New value for property `hgap`
       */
      iHgap?: int
    ): this;
    /**
     * Sets a new value for property {@link #getHideAxisTitleFirst hideAxisTitleFirst}.
     *
     * Hide axis title firstly if the space is limited.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideAxisTitleFirst(
      /**
       * New value for property `hideAxisTitleFirst`
       */
      bHideAxisTitleFirst?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPadding padding}.
     *
     * Set the universal padding value. This single value is applied to all sides of the chart. Individual settings
     * for each edge are also supported.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `24`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPadding(
      /**
       * New value for property `padding`
       */
      iPadding?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPaddingBottom paddingBottom}.
     *
     * Set the padding value for the bottom side
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPaddingBottom(
      /**
       * New value for property `paddingBottom`
       */
      iPaddingBottom: int
    ): this;
    /**
     * Sets a new value for property {@link #getPaddingLeft paddingLeft}.
     *
     * Set the padding value for the left side
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPaddingLeft(
      /**
       * New value for property `paddingLeft`
       */
      iPaddingLeft: int
    ): this;
    /**
     * Sets a new value for property {@link #getPaddingRight paddingRight}.
     *
     * Set the padding value for the right side
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPaddingRight(
      /**
       * New value for property `paddingRight`
       */
      iPaddingRight: int
    ): this;
    /**
     * Sets a new value for property {@link #getPaddingTop paddingTop}.
     *
     * Set the padding value for the top side
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPaddingTop(
      /**
       * New value for property `paddingTop`
       */
      iPaddingTop: int
    ): this;
    /**
     * Sets a new value for property {@link #getVgap vgap}.
     *
     * Vertical gap value between UI components
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `8`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVgap(
      /**
       * New value for property `vgap`
       */
      iVgap?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the RootContainer_layout constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $RootContainer_layoutSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Indicates the layout adjust policy
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    adjustPolicy?: string | PropertyBindingInfo;

    /**
     * Set the universal padding value. This single value is applied to all sides of the chart. Individual settings
     * for each edge are also supported.
     */
    padding?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the padding value for the top side
     */
    paddingTop?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the padding value for the left side
     */
    paddingLeft?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the padding value for the right side
     */
    paddingRight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the padding value for the bottom side
     */
    paddingBottom?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Vertical gap value between UI components
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    vgap?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Horizontal gap value between UI components
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hgap?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Hide axis title firstly if the space is limited.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hideAxisTitleFirst?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Scatter" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Scatter_animation from "sap/viz/ui5/types/Scatter_animation";

  import Scatter_axisTooltip from "sap/viz/ui5/types/Scatter_axisTooltip";

  import { ui5 } from "sap/viz/library";

  import Scatter_hoverline from "sap/viz/ui5/types/Scatter_hoverline";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Scatter
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Scatter extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ScatterSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ScatterSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Scatter with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scatter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Scatter.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the axisTooltip in the aggregation {@link #getAxisTooltip axisTooltip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAxisTooltip(): this;
    /**
     * Destroys the hoverline in the aggregation {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyHoverline(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in bubble and scatter charts
     */
    getAnimation(): Scatter_animation;
    /**
     * Gets content of aggregation {@link #getAxisTooltip axisTooltip}.
     *
     * Set tooltip related properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getAxisTooltip(): Scatter_axisTooltip;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color of the bubbles
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the bubbles
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Scatter_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets content of aggregation {@link #getHoverline hoverline}.
     *
     * Settings for hoverline properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getHoverline(): Scatter_hoverline;
    /**
     * Gets current value of property {@link #getMarkerSize markerSize}.
     *
     * Set the marker size for data points. The available range is from '4' to '32'.
     *
     * Default value is `10`.
     *
     *
     * @returns Value of property `markerSize`
     */
    getMarkerSize(): int;
    /**
     * Gets current value of property {@link #getMaxPriValue maxPriValue}.
     *
     * Set the max value of primary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxPriValue`
     */
    getMaxPriValue(): float;
    /**
     * Gets current value of property {@link #getMaxSecValue maxSecValue}.
     *
     * Set the max value of secondary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `maxSecValue`
     */
    getMaxSecValue(): float;
    /**
     * Gets current value of property {@link #getMinPriValue minPriValue}.
     *
     * Set the minimum value of primary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minPriValue`
     */
    getMinPriValue(): float;
    /**
     * Gets current value of property {@link #getMinSecValue minSecValue}.
     *
     * Set the minimum value of secondary values
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `minSecValue`
     */
    getMinSecValue(): float;
    /**
     * Gets current value of property {@link #getShapePalette shapePalette}.
     *
     * Set the shape of the bubbles
     *
     * Default value is `['circle', 'square', 'diamond', 'triangleUp', 'triangleDown', 'triangleLeft', 'triangleRight',
     * 'cross', 'intersection']`.
     *
     *
     * @returns Value of property `shapePalette`
     */
    getShapePalette(): string[];
    /**
     * Gets current value of property {@link #getShowNegativeValues showNegativeValues}.
     *
     * Show/hide the data of negetive value.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `showNegativeValues`
     */
    getShowNegativeValues(): boolean;
    /**
     * Gets current value of property {@link #getTimeBased timeBased}.
     *
     * Set whether it is time based scatter/bubble
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `timeBased`
     */
    getTimeBased(): boolean;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Scatter_animation
    ): this;
    /**
     * Sets the aggregated {@link #getAxisTooltip axisTooltip}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisTooltip(
      /**
       * The axisTooltip to set
       */
      oAxisTooltip: Scatter_axisTooltip
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color of the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Scatter_drawingEffect
        | keyof typeof ui5.types.Scatter_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets the aggregated {@link #getHoverline hoverline}.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverline(
      /**
       * The hoverline to set
       */
      oHoverline: Scatter_hoverline
    ): this;
    /**
     * Sets a new value for property {@link #getMarkerSize markerSize}.
     *
     * Set the marker size for data points. The available range is from '4' to '32'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `10`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMarkerSize(
      /**
       * New value for property `markerSize`
       */
      iMarkerSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMaxPriValue maxPriValue}.
     *
     * Set the max value of primary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxPriValue(
      /**
       * New value for property `maxPriValue`
       */
      fMaxPriValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaxSecValue maxSecValue}.
     *
     * Set the max value of secondary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxSecValue(
      /**
       * New value for property `maxSecValue`
       */
      fMaxSecValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinPriValue minPriValue}.
     *
     * Set the minimum value of primary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinPriValue(
      /**
       * New value for property `minPriValue`
       */
      fMinPriValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMinSecValue minSecValue}.
     *
     * Set the minimum value of secondary values
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinSecValue(
      /**
       * New value for property `minSecValue`
       */
      fMinSecValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getShapePalette shapePalette}.
     *
     * Set the shape of the bubbles
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['circle', 'square', 'diamond', 'triangleUp', 'triangleDown', 'triangleLeft', 'triangleRight',
     * 'cross', 'intersection']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShapePalette(
      /**
       * New value for property `shapePalette`
       */
      sShapePalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getShowNegativeValues showNegativeValues}.
     *
     * Show/hide the data of negetive value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowNegativeValues(
      /**
       * New value for property `showNegativeValues`
       */
      bShowNegativeValues?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTimeBased timeBased}.
     *
     * Set whether it is time based scatter/bubble
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTimeBased(
      /**
       * New value for property `timeBased`
       */
      bTimeBased?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Scatter constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $ScatterSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the color of the bubbles
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the shape of the bubbles
     */
    shapePalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of primary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxPriValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of primary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minPriValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the max value of secondary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    maxSecValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the minimum value of secondary values
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    minSecValue?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether it is time based scatter/bubble
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    timeBased?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the drawing effect for the bubbles
     */
    drawingEffect?:
      | (
          | ui5.types.Scatter_drawingEffect
          | keyof typeof ui5.types.Scatter_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Show/hide the data of negetive value.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    showNegativeValues?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the marker size for data points. The available range is from '4' to '32'.
     */
    markerSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for animations in bubble and scatter charts
     */
    animation?: Scatter_animation;

    /**
     * Set tooltip related properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    axisTooltip?: Scatter_axisTooltip;

    /**
     * Settings for hoverline properties.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    hoverline?: Scatter_hoverline;
  }
}

declare module "sap/viz/ui5/types/Scatter_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in bubble and scatter charts
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Scatter_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Scatter_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scatter_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Scatter_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Scatter_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Scatter_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Scatter_axisTooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Set tooltip related properties.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Scatter_axisTooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_axisTooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_axisTooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_axisTooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_axisTooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Scatter_axisTooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scatter_axisTooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Scatter_axisTooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): string[];
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * enabled/disabled tooltip.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * enabled/disabled tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Scatter_axisTooltip constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Scatter_axisTooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * enabled/disabled tooltip.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to
     * yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
     */
    formatString?: string[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Scatter_hoverline" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for hoverline properties.
   *
   * @since 1.7.2
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Scatter_hoverline extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_hoverlineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Scatter_hoverline
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Scatter_hoverlineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Scatter_hoverline with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scatter_hoverline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Scatter_hoverline.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set to enabled/disabled hoverline or not.
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set to enabled/disabled hoverline or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Scatter_hoverline constructor.
   *
   * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Scatter_hoverlineSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set to enabled/disabled hoverline or not.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/StackedVerticalBar" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import StackedVerticalBar_animation from "sap/viz/ui5/types/StackedVerticalBar_animation";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import StackedVerticalBar_tooltip from "sap/viz/ui5/types/StackedVerticalBar_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.StackedVerticalBar
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class StackedVerticalBar extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBarSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBarSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StackedVerticalBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.StackedVerticalBar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): StackedVerticalBar_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.StackedVerticalBar_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isRoundCorner`
     */
    getIsRoundCorner(): boolean;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Set the display mode for stacked vertical bar charts
     *
     * Default value is `comparison`.
     *
     *
     * @returns Value of property `mode`
     */
    getMode(): ui5.types.StackedVerticalBar_mode;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.StackedVerticalBar_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): StackedVerticalBar_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: StackedVerticalBar_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.StackedVerticalBar_drawingEffect
        | keyof typeof ui5.types.StackedVerticalBar_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsRoundCorner(
      /**
       * New value for property `isRoundCorner`
       */
      bIsRoundCorner?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Set the display mode for stacked vertical bar charts
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `comparison`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?:
        | ui5.types.StackedVerticalBar_mode
        | keyof typeof ui5.types.StackedVerticalBar_mode
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.StackedVerticalBar_orientation
        | keyof typeof ui5.types.StackedVerticalBar_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: StackedVerticalBar_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the StackedVerticalBar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $StackedVerticalBarSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.StackedVerticalBar_orientation
          | keyof typeof ui5.types.StackedVerticalBar_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.StackedVerticalBar_drawingEffect
          | keyof typeof ui5.types.StackedVerticalBar_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether bars have rounded corners
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isRoundCorner?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the display mode for stacked vertical bar charts
     */
    mode?:
      | (
          | ui5.types.StackedVerticalBar_mode
          | keyof typeof ui5.types.StackedVerticalBar_mode
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: StackedVerticalBar_tooltip;

    /**
     * Settings for animations in the plot area
     */
    animation?: StackedVerticalBar_animation;
  }
}

declare module "sap/viz/ui5/types/StackedVerticalBar_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class StackedVerticalBar_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBar_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBar_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_animation with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StackedVerticalBar_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.StackedVerticalBar_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the StackedVerticalBar_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $StackedVerticalBar_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/StackedVerticalBar_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip related properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class StackedVerticalBar_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBar_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.StackedVerticalBar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StackedVerticalBar_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_tooltip with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StackedVerticalBar_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.StackedVerticalBar_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the StackedVerticalBar_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $StackedVerticalBar_tooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Title" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import { ui5 } from "sap/viz/library";

  import Title_layout from "sap/viz/ui5/types/Title_layout";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Title
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Title extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TitleSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Title
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TitleSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Title with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Title.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the layout in the aggregation {@link #getLayout layout}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayout(): this;
    /**
     * Gets current value of property {@link #getAlignment alignment}.
     *
     * Set the alignment of the main title
     *
     * Default value is `center`.
     *
     *
     * @returns Value of property `alignment`
     */
    getAlignment(): ui5.types.Title_alignment;
    /**
     * Gets content of aggregation {@link #getLayout layout}.
     *
     * Settings for layout of title
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getLayout(): Title_layout;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Set the text of the main title
     *
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the main title
     *
     * Default value is `false`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getAlignment alignment}.
     *
     * Set the alignment of the main title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `center`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAlignment(
      /**
       * New value for property `alignment`
       */
      sAlignment?:
        | ui5.types.Title_alignment
        | keyof typeof ui5.types.Title_alignment
    ): this;
    /**
     * Sets the aggregated {@link #getLayout layout}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayout(
      /**
       * The layout to set
       */
      oLayout: Title_layout
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Set the text of the main title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the main title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Title constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $TitleSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the main title
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the text of the main title
     */
    text?: string | PropertyBindingInfo;

    /**
     * Set the alignment of the main title
     */
    alignment?:
      | (ui5.types.Title_alignment | keyof typeof ui5.types.Title_alignment)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Settings for layout of title
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    layout?: Title_layout;
  }
}

declare module "sap/viz/ui5/types/Title_layout" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for layout of title
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Title_layout extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Title_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Title_layoutSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Title_layout
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Title_layoutSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Title_layout with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Title_layout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Title_layout.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Set the position of the title
     *
     * Default value is `'right'`.
     *
     *
     * @returns Value of property `position`
     */
    getPosition(): string;
    /**
     * Gets current value of property {@link #getPriority priority}.
     *
     * Set the priority of the position for the title
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `priority`
     */
    getPriority(): int;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Set the position of the title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'right'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPriority priority}.
     *
     * Set the priority of the position for the title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPriority(
      /**
       * New value for property `priority`
       */
      iPriority?: int
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Title_layout constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Title_layoutSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the position of the title
     */
    position?: string | PropertyBindingInfo;

    /**
     * Set the priority of the position for the title
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    priority?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Tooltip_background from "sap/viz/ui5/types/Tooltip_background";

  import Tooltip_bodyDimensionLabel from "sap/viz/ui5/types/Tooltip_bodyDimensionLabel";

  import Tooltip_bodyDimensionValue from "sap/viz/ui5/types/Tooltip_bodyDimensionValue";

  import Tooltip_bodyMeasureLabel from "sap/viz/ui5/types/Tooltip_bodyMeasureLabel";

  import Tooltip_bodyMeasureValue from "sap/viz/ui5/types/Tooltip_bodyMeasureValue";

  import Tooltip_closeButton from "sap/viz/ui5/types/Tooltip_closeButton";

  import { ui5 } from "sap/viz/library";

  import Tooltip_footerLabel from "sap/viz/ui5/types/Tooltip_footerLabel";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Tooltip_separationLine from "sap/viz/ui5/types/Tooltip_separationLine";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the background in the aggregation {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBackground(): this;
    /**
     * Destroys the bodyDimensionLabel in the aggregation {@link #getBodyDimensionLabel bodyDimensionLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBodyDimensionLabel(): this;
    /**
     * Destroys the bodyDimensionValue in the aggregation {@link #getBodyDimensionValue bodyDimensionValue}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBodyDimensionValue(): this;
    /**
     * Destroys the bodyMeasureLabel in the aggregation {@link #getBodyMeasureLabel bodyMeasureLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBodyMeasureLabel(): this;
    /**
     * Destroys the bodyMeasureValue in the aggregation {@link #getBodyMeasureValue bodyMeasureValue}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBodyMeasureValue(): this;
    /**
     * Destroys the closeButton in the aggregation {@link #getCloseButton closeButton}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCloseButton(): this;
    /**
     * Destroys the footerLabel in the aggregation {@link #getFooterLabel footerLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFooterLabel(): this;
    /**
     * Destroys the separationLine in the aggregation {@link #getSeparationLine separationLine}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySeparationLine(): this;
    /**
     * Gets content of aggregation {@link #getBackground background}.
     *
     * Define the background style of the tooltip.
     */
    getBackground(): Tooltip_background;
    /**
     * Gets content of aggregation {@link #getBodyDimensionLabel bodyDimensionLabel}.
     *
     * Define the color of the dimension name of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getBodyDimensionLabel(): Tooltip_bodyDimensionLabel;
    /**
     * Gets content of aggregation {@link #getBodyDimensionValue bodyDimensionValue}.
     *
     * Define the color of the dimension value of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getBodyDimensionValue(): Tooltip_bodyDimensionValue;
    /**
     * Gets content of aggregation {@link #getBodyMeasureLabel bodyMeasureLabel}.
     *
     * Define the color of the measure name of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getBodyMeasureLabel(): Tooltip_bodyMeasureLabel;
    /**
     * Gets content of aggregation {@link #getBodyMeasureValue bodyMeasureValue}.
     *
     * Define the color of the measure value of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getBodyMeasureValue(): Tooltip_bodyMeasureValue;
    /**
     * Gets content of aggregation {@link #getCloseButton closeButton}.
     *
     * Define the background and border color of tooltip close button.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getCloseButton(): Tooltip_closeButton;
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the tooltip
     *
     * Default value is `normal`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.Tooltip_drawingEffect;
    /**
     * Gets content of aggregation {@link #getFooterLabel footerLabel}.
     *
     * Define the style of the label of the tooltip footer.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getFooterLabel(): Tooltip_footerLabel;
    /**
     * Gets current value of property {@link #getFormatString formatString}.
     *
     * Set the format strings for text in the tooltip. For dual axis charts, the first array is applied to the
     * primary axis and the second array is applied to the second axis. If you enter fewer format strings into
     * an array than there are measures in the respective axis, then the last format string is applied to all
     * remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.The
     * following is an example of an array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     *
     *
     * @returns Value of property `formatString`
     */
    getFormatString(): any[];
    /**
     * Gets current value of property {@link #getLayinChart layinChart}.
     *
     * Set whether the tooltip appears in the chart area
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `layinChart`
     */
    getLayinChart(): boolean;
    /**
     * Gets current value of property {@link #getPostRender postRender}.
     *
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called after the tooltip is rendered. The user can select
     * and change dom elements' properties under the tooltip element.
     *
     *
     * @returns Value of property `postRender`
     */
    getPostRender(): any;
    /**
     * Gets current value of property {@link #getPreRender preRender}.
     *
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called before the tooltip is rendered. The input parameter
     * is a dom element, which is at the bottom of the tooltip. Any dom element such as a button can be appended
     * to this parent node. It can only be called when the tooltip is in actionMode.
     *
     *
     * @returns Value of property `preRender`
     */
    getPreRender(): any;
    /**
     * Gets content of aggregation {@link #getSeparationLine separationLine}.
     *
     * Define the color of the value of the tooltip separation line.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getSeparationLine(): Tooltip_separationLine;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the tooltip
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets the aggregated {@link #getBackground background}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackground(
      /**
       * The background to set
       */
      oBackground: Tooltip_background
    ): this;
    /**
     * Sets the aggregated {@link #getBodyDimensionLabel bodyDimensionLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBodyDimensionLabel(
      /**
       * The bodyDimensionLabel to set
       */
      oBodyDimensionLabel: Tooltip_bodyDimensionLabel
    ): this;
    /**
     * Sets the aggregated {@link #getBodyDimensionValue bodyDimensionValue}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBodyDimensionValue(
      /**
       * The bodyDimensionValue to set
       */
      oBodyDimensionValue: Tooltip_bodyDimensionValue
    ): this;
    /**
     * Sets the aggregated {@link #getBodyMeasureLabel bodyMeasureLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBodyMeasureLabel(
      /**
       * The bodyMeasureLabel to set
       */
      oBodyMeasureLabel: Tooltip_bodyMeasureLabel
    ): this;
    /**
     * Sets the aggregated {@link #getBodyMeasureValue bodyMeasureValue}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBodyMeasureValue(
      /**
       * The bodyMeasureValue to set
       */
      oBodyMeasureValue: Tooltip_bodyMeasureValue
    ): this;
    /**
     * Sets the aggregated {@link #getCloseButton closeButton}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCloseButton(
      /**
       * The closeButton to set
       */
      oCloseButton: Tooltip_closeButton
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the tooltip
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.Tooltip_drawingEffect
        | keyof typeof ui5.types.Tooltip_drawingEffect
    ): this;
    /**
     * Sets the aggregated {@link #getFooterLabel footerLabel}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFooterLabel(
      /**
       * The footerLabel to set
       */
      oFooterLabel: Tooltip_footerLabel
    ): this;
    /**
     * Sets a new value for property {@link #getFormatString formatString}.
     *
     * Set the format strings for text in the tooltip. For dual axis charts, the first array is applied to the
     * primary axis and the second array is applied to the second axis. If you enter fewer format strings into
     * an array than there are measures in the respective axis, then the last format string is applied to all
     * remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.The
     * following is an example of an array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatString(
      /**
       * New value for property `formatString`
       */
      sFormatString?: any[]
    ): this;
    /**
     * Sets a new value for property {@link #getLayinChart layinChart}.
     *
     * Set whether the tooltip appears in the chart area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayinChart(
      /**
       * New value for property `layinChart`
       */
      bLayinChart?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPostRender postRender}.
     *
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called after the tooltip is rendered. The user can select
     * and change dom elements' properties under the tooltip element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPostRender(
      /**
       * New value for property `postRender`
       */
      oPostRender?: any
    ): this;
    /**
     * Sets a new value for property {@link #getPreRender preRender}.
     *
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called before the tooltip is rendered. The input parameter
     * is a dom element, which is at the bottom of the tooltip. Any dom element such as a button can be appended
     * to this parent node. It can only be called when the tooltip is in actionMode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPreRender(
      /**
       * New value for property `preRender`
       */
      oPreRender?: any
    ): this;
    /**
     * Sets the aggregated {@link #getSeparationLine separationLine}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSeparationLine(
      /**
       * The separationLine to set
       */
      oSeparationLine: Tooltip_separationLine
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the tooltip
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $TooltipSettings extends $BaseStructuredTypeSettings {
    /**
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called before the tooltip is rendered. The input parameter
     * is a dom element, which is at the bottom of the tooltip. Any dom element such as a button can be appended
     * to this parent node. It can only be called when the tooltip is in actionMode.
     */
    preRender?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * A callback function can be specified as a parameter and passed to chart options when the user calls the
     * createViz function. This callback function is called after the tooltip is rendered. The user can select
     * and change dom elements' properties under the tooltip element.
     */
    postRender?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the visibility of the tooltip
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the drawing effect for the tooltip
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    drawingEffect?:
      | (
          | ui5.types.Tooltip_drawingEffect
          | keyof typeof ui5.types.Tooltip_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the format strings for text in the tooltip. For dual axis charts, the first array is applied to the
     * primary axis and the second array is applied to the second axis. If you enter fewer format strings into
     * an array than there are measures in the respective axis, then the last format string is applied to all
     * remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.The
     * following is an example of an array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
     */
    formatString?: any[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the tooltip appears in the chart area
     */
    layinChart?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Define the background style of the tooltip.
     */
    background?: Tooltip_background;

    /**
     * Define the style of the label of the tooltip footer.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    footerLabel?: Tooltip_footerLabel;

    /**
     * Define the color of the value of the tooltip separation line.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    separationLine?: Tooltip_separationLine;

    /**
     * Define the color of the dimension name of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    bodyDimensionLabel?: Tooltip_bodyDimensionLabel;

    /**
     * Define the color of the dimension value of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    bodyDimensionValue?: Tooltip_bodyDimensionValue;

    /**
     * Define the color of the measure name of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    bodyMeasureLabel?: Tooltip_bodyMeasureLabel;

    /**
     * Define the color of the measure value of the tooltip body.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    bodyMeasureValue?: Tooltip_bodyMeasureValue;

    /**
     * Define the background and border color of tooltip close button.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    closeButton?: Tooltip_closeButton;
  }
}

declare module "sap/viz/ui5/types/Tooltip_background" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the background style of the tooltip.
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Tooltip_background extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_background
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_backgroundSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_background
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_backgroundSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_background with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_background>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_background.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getBorderColor borderColor}.
     *
     * Define the background border color of the tooltip.
     *
     * Default value is `'#cccccc'`.
     *
     *
     * @returns Value of property `borderColor`
     */
    getBorderColor(): string;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Define the background color of the tooltip.
     *
     * Default value is `'#ffffff'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getBorderColor borderColor}.
     *
     * Define the background border color of the tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#cccccc'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderColor(
      /**
       * New value for property `borderColor`
       */
      sBorderColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Define the background color of the tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#ffffff'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_background constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Tooltip_backgroundSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Define the background color of the tooltip.
     */
    color?: string | PropertyBindingInfo;

    /**
     * Define the background border color of the tooltip.
     */
    borderColor?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_bodyDimensionLabel" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the color of the dimension name of the tooltip body.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_bodyDimensionLabel extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyDimensionLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyDimensionLabelSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyDimensionLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyDimensionLabelSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyDimensionLabel with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_bodyDimensionLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_bodyDimensionLabel.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Property color
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Property color
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_bodyDimensionLabel constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_bodyDimensionLabelSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property color
     */
    color?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_bodyDimensionValue" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the color of the dimension value of the tooltip body.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_bodyDimensionValue extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyDimensionValue
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyDimensionValueSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyDimensionValue
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyDimensionValueSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyDimensionValue with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_bodyDimensionValue>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_bodyDimensionValue.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Property color
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Property color
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_bodyDimensionValue constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_bodyDimensionValueSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property color
     */
    color?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_bodyMeasureLabel" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the color of the measure name of the tooltip body.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_bodyMeasureLabel extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyMeasureLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyMeasureLabelSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyMeasureLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyMeasureLabelSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyMeasureLabel with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_bodyMeasureLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_bodyMeasureLabel.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Property color
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Property color
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#666666'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_bodyMeasureLabel constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_bodyMeasureLabelSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property color
     */
    color?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_bodyMeasureValue" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the color of the measure value of the tooltip body.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_bodyMeasureValue extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyMeasureValue
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyMeasureValueSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_bodyMeasureValue
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_bodyMeasureValueSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyMeasureValue with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_bodyMeasureValue>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_bodyMeasureValue.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Property color
     *
     * Default value is `'#000000'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Property color
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#000000'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_bodyMeasureValue constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_bodyMeasureValueSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property color
     */
    color?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_closeButton" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the background and border color of tooltip close button.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_closeButton extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_closeButton
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_closeButtonSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_closeButton
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_closeButtonSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_closeButton with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_closeButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_closeButton.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Property backgroundColor
     *
     * Default value is `'#ffffff'`.
     *
     *
     * @returns Value of property `backgroundColor`
     */
    getBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getBorderColor borderColor}.
     *
     * Property borderColor
     *
     * Default value is `'#cccccc'`.
     *
     *
     * @returns Value of property `borderColor`
     */
    getBorderColor(): string;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Property backgroundColor
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#ffffff'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBorderColor borderColor}.
     *
     * Property borderColor
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#cccccc'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderColor(
      /**
       * New value for property `borderColor`
       */
      sBorderColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_closeButton constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_closeButtonSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property backgroundColor
     */
    backgroundColor?: string | PropertyBindingInfo;

    /**
     * Property borderColor
     */
    borderColor?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_footerLabel" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the style of the label of the tooltip footer.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_footerLabel extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_footerLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_footerLabelSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_footerLabel
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_footerLabelSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_footerLabel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_footerLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_footerLabel.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Define the color of the label of the tooltip footer.
     *
     * Default value is `'#000000'`.
     *
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Define the color of the label of the tooltip footer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#000000'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_footerLabel constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_footerLabelSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Define the color of the label of the tooltip footer.
     */
    color?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Tooltip_separationLine" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Define the color of the value of the tooltip separation line.
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Tooltip_separationLine extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_separationLine
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_separationLineSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Tooltip_separationLine
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Tooltip_separationLineSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Tooltip_separationLine with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tooltip_separationLine>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Tooltip_separationLine.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getBorderBottomColor borderBottomColor}.
     *
     * Property borderBottomColor
     *
     * Default value is `'#a7a9ac'`.
     *
     *
     * @returns Value of property `borderBottomColor`
     */
    getBorderBottomColor(): string;
    /**
     * Sets a new value for property {@link #getBorderBottomColor borderBottomColor}.
     *
     * Property borderBottomColor
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#a7a9ac'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderBottomColor(
      /**
       * New value for property `borderBottomColor`
       */
      sBorderBottomColor?: string
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Tooltip_separationLine constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Tooltip_separationLineSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Property borderBottomColor
     */
    borderBottomColor?: string | PropertyBindingInfo;
  }
}

declare module "sap/viz/ui5/types/Treemap" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import Treemap_animation from "sap/viz/ui5/types/Treemap_animation";

  import Treemap_border from "sap/viz/ui5/types/Treemap_border";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Treemap_tooltip from "sap/viz/ui5/types/Treemap_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.Treemap
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Treemap extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TreemapSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TreemapSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Treemap with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Treemap>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Treemap.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the border in the aggregation {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBorder(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): Treemap_animation;
    /**
     * Gets content of aggregation {@link #getBorder border}.
     *
     * Settings for the border
     */
    getBorder(): Treemap_border;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getEndColor endColor}.
     *
     * Set the end color of the tree map
     *
     * Default value is `'#73C03C'`.
     *
     *
     * @returns Value of property `endColor`
     */
    getEndColor(): string;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getLegendValues legendValues}.
     *
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     *
     *
     * @returns Value of property `legendValues`
     */
    getLegendValues(): int[];
    /**
     * Gets current value of property {@link #getStartColor startColor}.
     *
     * Set the starting color of the tree map
     *
     * Default value is `'#C2E3A9'`.
     *
     *
     * @returns Value of property `startColor`
     */
    getStartColor(): string;
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): Treemap_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: Treemap_animation
    ): this;
    /**
     * Sets the aggregated {@link #getBorder border}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorder(
      /**
       * The border to set
       */
      oBorder: Treemap_border
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getEndColor endColor}.
     *
     * Set the end color of the tree map
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#73C03C'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEndColor(
      /**
       * New value for property `endColor`
       */
      sEndColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getLegendValues legendValues}.
     *
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendValues(
      /**
       * New value for property `legendValues`
       */
      sLegendValues: int[]
    ): this;
    /**
     * Sets a new value for property {@link #getStartColor startColor}.
     *
     * Set the starting color of the tree map
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'#C2E3A9'`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStartColor(
      /**
       * New value for property `startColor`
       */
      sStartColor?: string
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: Treemap_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Treemap constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $TreemapSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the starting color of the tree map
     */
    startColor?: string | PropertyBindingInfo;

    /**
     * Set the end color of the tree map
     */
    endColor?: string | PropertyBindingInfo;

    /**
     * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
     * "#D16A7C"].
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending
     * order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend
     * automatically calculates the values according to the data. If the number of values in the legendValues
     * array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
     */
    legendValues?: int[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for the border
     */
    border?: Treemap_border;

    /**
     * Settings for animations in the plot area
     */
    animation?: Treemap_animation;

    /**
     * Settings for tooltip
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: Treemap_tooltip;
  }
}

declare module "sap/viz/ui5/types/Treemap_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Treemap_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Treemap_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Treemap_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Treemap_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Treemap_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Treemap_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Treemap_border" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for the border
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class Treemap_border extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_borderSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_border
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_borderSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Treemap_border with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Treemap_border>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Treemap_border.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Set the visibility of the zone edge
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Set the visibility of the zone edge
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Treemap_border constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $Treemap_borderSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the visibility of the zone edge
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/Treemap_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class Treemap_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.Treemap_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $Treemap_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.Treemap_tooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Treemap_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.Treemap_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the Treemap_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $Treemap_tooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/VerticalBar" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import VerticalBar_animation from "sap/viz/ui5/types/VerticalBar_animation";

  import { ui5 } from "sap/viz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import VerticalBar_tooltip from "sap/viz/ui5/types/VerticalBar_tooltip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.VerticalBar
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class VerticalBar extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBarSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBarSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.VerticalBar with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VerticalBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.VerticalBar.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the animation in the aggregation {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnimation(): this;
    /**
     * Destroys the toolTip in the aggregation {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolTip(): this;
    /**
     * Gets content of aggregation {@link #getAnimation animation}.
     *
     * Settings for animations in the plot area
     */
    getAnimation(): VerticalBar_animation;
    /**
     * Gets current value of property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Value of property `colorPalette`
     */
    getColorPalette(): string[];
    /**
     * Gets current value of property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * Default value is `normal`.
     *
     *
     * @returns Value of property `drawingEffect`
     */
    getDrawingEffect(): ui5.types.VerticalBar_drawingEffect;
    /**
     * Gets current value of property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     *
     * @returns Value of property `formatRules`
     */
    getFormatRules(): object[];
    /**
     * Gets current value of property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `isRoundCorner`
     */
    getIsRoundCorner(): boolean;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `orientation`
     */
    getOrientation(): ui5.types.VerticalBar_orientation;
    /**
     * Gets current value of property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Value of property `primaryValuesColorPalette`
     */
    getPrimaryValuesColorPalette(): string[];
    /**
     * Gets current value of property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Value of property `secondaryValuesColorPalette`
     */
    getSecondaryValuesColorPalette(): string[];
    /**
     * Gets content of aggregation {@link #getToolTip toolTip}.
     *
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    getToolTip(): VerticalBar_tooltip;
    /**
     * Sets the aggregated {@link #getAnimation animation}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimation(
      /**
       * The animation to set
       */
      oAnimation: VerticalBar_animation
    ): this;
    /**
     * Sets a new value for property {@link #getColorPalette colorPalette}.
     *
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#748CB2', '#9CC677', '#EACF5E', '#F9AD79', '#D16A7C', '#8873A2', '#3A95B3', '#B6D949',
     * '#FDD36C', '#F47958', '#A65084', '#0063B1', '#0DA841', '#FCB71D', '#F05620', '#B22D6E', '#3C368E', '#8FB2CF',
     * '#95D4AB', '#EAE98F', '#F9BE92', '#EC9A99', '#BC98BD', '#1EB7B2', '#73C03C', '#F48323', '#EB271B', '#D9B5CA',
     * '#AED1DA', '#DFECB2', '#FCDAB0', '#F5BCB4']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColorPalette(
      /**
       * New value for property `colorPalette`
       */
      sColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getDrawingEffect drawingEffect}.
     *
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `normal`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawingEffect(
      /**
       * New value for property `drawingEffect`
       */
      sDrawingEffect?:
        | ui5.types.VerticalBar_drawingEffect
        | keyof typeof ui5.types.VerticalBar_drawingEffect
    ): this;
    /**
     * Sets a new value for property {@link #getFormatRules formatRules}.
     *
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFormatRules(
      /**
       * New value for property `formatRules`
       */
      sFormatRules: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getIsRoundCorner isRoundCorner}.
     *
     * Set whether bars have rounded corners
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsRoundCorner(
      /**
       * New value for property `isRoundCorner`
       */
      bIsRoundCorner?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Set the orientation of the plot area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `vertical`.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | ui5.types.VerticalBar_orientation
        | keyof typeof ui5.types.VerticalBar_orientation
    ): this;
    /**
     * Sets a new value for property {@link #getPrimaryValuesColorPalette primaryValuesColorPalette}.
     *
     * Set the color palette for axis 1 in dual charts.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#8FBADD', '#B8D4E9', '#7AAED6', '#A3C7E3', '#3D88C4', '#66A1D0', '#297CBE', '#5295CA',
     * '#005BA3', '#146FB7', '#005395', '#0063B1']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPrimaryValuesColorPalette(
      /**
       * New value for property `primaryValuesColorPalette`
       */
      sPrimaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getSecondaryValuesColorPalette secondaryValuesColorPalette}.
     *
     * Set the color palette for axis 2 in dual chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `['#F6A09B', '#F9C3C0', '#F58E88', '#F8B1AD', '#F05B52', '#F37D76', '#EE4A40', '#F16C64',
     * '#D92419', '#ED382D', '#C52117', '#EB271B']`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondaryValuesColorPalette(
      /**
       * New value for property `secondaryValuesColorPalette`
       */
      sSecondaryValuesColorPalette?: string[]
    ): this;
    /**
     * Sets the aggregated {@link #getToolTip toolTip}.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolTip(
      /**
       * The toolTip to set
       */
      oToolTip: VerticalBar_tooltip
    ): this;
  }
  /**
   * Describes the settings that can be provided to the VerticalBar constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $VerticalBarSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the orientation of the plot area.
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    orientation?:
      | (
          | ui5.types.VerticalBar_orientation
          | keyof typeof ui5.types.VerticalBar_orientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension
     * bound to the legend.
     */
    colorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 1 in dual charts.
     */
    primaryValuesColorPalette?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Set the color palette for axis 2 in dual chart.
     */
    secondaryValuesColorPalette?:
      | string[]
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy.
     * If this value is set to 'normal', the plot area is matte.
     */
    drawingEffect?:
      | (
          | ui5.types.VerticalBar_drawingEffect
          | keyof typeof ui5.types.VerticalBar_drawingEffect
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set whether bars have rounded corners
     *
     * @deprecated As of version 1.19. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    isRoundCorner?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition:
     * [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1,
     * Value2 and Value3 are values.  The value of a dimension may be  1, Single value (string),
     * like "China" .  2. Array (enumeration), like ["UK","USA"] .  The value of a measure may be
     *  1, Single value (number), like 20 .  2. Arry (enumeration), like [121,122] .  3. Object
     * (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100
     * in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write
     * {min:100}.  The color is applied if one or more conditions in the condition array is met. If multiple
     * rules could apply on the same data point, it is the last rule that takes effect.
     */
    formatRules?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Settings for tooltip related properties
     *
     * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    toolTip?: VerticalBar_tooltip;

    /**
     * Settings for animations in the plot area
     */
    animation?: VerticalBar_animation;
  }
}

declare module "sap/viz/ui5/types/VerticalBar_animation" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for animations in the plot area
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class VerticalBar_animation extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBar_animationSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar_animation
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBar_animationSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_animation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VerticalBar_animation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.VerticalBar_animation.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataLoading`
     */
    getDataLoading(): boolean;
    /**
     * Gets current value of property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `dataUpdating`
     */
    getDataUpdating(): boolean;
    /**
     * Gets current value of property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `resizing`
     */
    getResizing(): boolean;
    /**
     * Sets a new value for property {@link #getDataLoading dataLoading}.
     *
     * Set whether the data loading animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataLoading(
      /**
       * New value for property `dataLoading`
       */
      bDataLoading?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDataUpdating dataUpdating}.
     *
     * Set whether the data updating animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataUpdating(
      /**
       * New value for property `dataUpdating`
       */
      bDataUpdating?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getResizing resizing}.
     *
     * Set whether the resizing animation is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResizing(
      /**
       * New value for property `resizing`
       */
      bResizing?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the VerticalBar_animation constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $VerticalBar_animationSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the data loading animation is enabled
     */
    dataLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the data updating animation is enabled
     */
    dataUpdating?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set whether the resizing animation is enabled
     */
    resizing?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/VerticalBar_tooltip" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for tooltip related properties
   *
   * @since 1.7.2
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export default class VerticalBar_tooltip extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBar_tooltipSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.VerticalBar_tooltip
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalBar_tooltipSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_tooltip with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VerticalBar_tooltip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.VerticalBar_tooltip.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * Default value is `true`.
     *
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set whether the tooltip is enabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
  }
  /**
   * Describes the settings that can be provided to the VerticalBar_tooltip constructor.
   *
   * @deprecated As of version 1.12. This Property has been deprecated. This interface will be removed from
   * the SAPUI5 delivery in one of the next releases.
   */
  export interface $VerticalBar_tooltipSettings
    extends $BaseStructuredTypeSettings {
    /**
     * Set whether the tooltip is enabled
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/types/XYContainer" {
  import {
    default as BaseStructuredType,
    $BaseStructuredTypeSettings,
  } from "sap/viz/ui5/core/BaseStructuredType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Module sap.viz.ui5.types.XYContainer
   *
   * @since 1.7.2
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export default class XYContainer extends BaseStructuredType {
    /**
     * Constructor for a new sap.viz.ui5.types.XYContainer
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $XYContainerSettings
    );
    /**
     * Constructor for a new sap.viz.ui5.types.XYContainer
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $XYContainerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.types.XYContainer with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.core.BaseStructuredType.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, XYContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.types.XYContainer.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getYAngle yAngle}.
     *
     * Set the angle for the pie chart. This value should be between '-180' and '180'.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Value of property `yAngle`
     */
    getYAngle(): float;
    /**
     * Sets a new value for property {@link #getYAngle yAngle}.
     *
     * Set the angle for the pie chart. This value should be between '-180' and '180'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYAngle(
      /**
       * New value for property `yAngle`
       */
      fYAngle?: float
    ): this;
  }
  /**
   * Describes the settings that can be provided to the XYContainer constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.7.2. Charting API is not finished yet and might change completely.
   */
  export interface $XYContainerSettings extends $BaseStructuredTypeSettings {
    /**
     * Set the angle for the pie chart. This value should be between '-180' and '180'.
     *
     * @deprecated As of version 1.20. This Property has been deprecated. This interface will be removed from
     * the SAPUI5 delivery in one of the next releases.
     */
    yAngle?: float | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/viz/ui5/VizContainer" {
  import {
    default as BaseControl,
    $BaseControlSettings,
  } from "sap/viz/ui5/controls/common/BaseControl";

  import AnalysisObject from "sap/viz/ui5/controls/common/feeds/AnalysisObject";

  import FeedItem from "sap/viz/ui5/controls/common/feeds/FeedItem";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Dataset from "sap/viz/ui5/data/Dataset";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Controls ui5/VizContainer
   *
   * @since 1.19.0
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.19.0. API is not finished yet and might change completely
   */
  export default class VizContainer extends BaseControl {
    /**
     * Constructor for a new ui5/VizContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VizContainerSettings
    );
    /**
     * Constructor for a new ui5/VizContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VizContainerSettings
    );

    /**
     * Creates a new subclass of class sap.viz.ui5.VizContainer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.viz.ui5.controls.common.BaseControl.extend}.
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VizContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.viz.ui5.VizContainer.
     *
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some analysisObjectsForPicker to the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAnalysisObjectsForPicker(
      /**
       * The analysisObjectsForPicker to add; if empty, nothing is inserted
       */
      oAnalysisObjectsForPicker: AnalysisObject
    ): this;
    /**
     * Adds some feed to the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFeed(
      /**
       * The feed to add; if empty, nothing is inserted
       */
      oFeed: FeedItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeselectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:feedsChanged feedsChanged} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding
     * panel, drag and drop object onto VizFrame, or switch chart type by UI operation. Application should listen
     * to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization
     * with the new data.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFeedsChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: VizContainer$FeedsChangedEvent) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:feedsChanged feedsChanged} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding
     * panel, drag and drop object onto VizFrame, or switch chart type by UI operation. Application should listen
     * to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization
     * with the new data.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFeedsChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: VizContainer$FeedsChangedEvent) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the mouse hover out of the specific part of chart, no data is passed.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHideTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachInitialized(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectData selectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed
     * in accordance with the following format.{name:"showTooltip",data:{body:[{ //data of one group name:"...",val:[{
     * //data of one row color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."}}}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed
     * in accordance with the following format.{name:"showTooltip",data:{body:[{ //data of one group name:"...",val:[{
     * //data of one row color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."}}}
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowTooltip(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:vizDefinitionChanged vizDefinitionChanged} event
     * of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "vizDefinitionChanged" event when viz definition was changed.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachVizDefinitionChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:vizDefinitionChanged vizDefinitionChanged} event
     * of this `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "vizDefinitionChanged" event when viz definition was changed.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachVizDefinitionChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:vizTypeChanged vizTypeChanged} event of this
     * `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "vizTypeChanged" event when viz type was changed
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachVizTypeChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:vizTypeChanged vizTypeChanged} event of this
     * `sap.viz.ui5.VizContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.viz.ui5.VizContainer` itself.
     *
     * Dispatches "vizTypeChanged" event when viz type was changed
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachVizTypeChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.viz.ui5.VizContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the analysisObjectsForPicker in the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAnalysisObjectsForPicker(): this;
    /**
     * Destroys all the feeds in the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFeeds(): this;
    /**
     * Destroys the vizData in the aggregation {@link #getVizData vizData}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyVizData(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselectData deselectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeselectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:feedsChanged feedsChanged} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFeedsChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: VizContainer$FeedsChangedEvent) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hideTooltip hideTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHideTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachInitialized(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectData selectData} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showTooltip showTooltip} event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowTooltip(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:vizDefinitionChanged vizDefinitionChanged }
     * event of this `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachVizDefinitionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:vizTypeChanged vizTypeChanged} event of this
     * `sap.viz.ui5.VizContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachVizTypeChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:deselectData deselectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeselectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:feedsChanged feedsChanged} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFeedsChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: VizContainer$FeedsChangedEventParameters
    ): this;
    /**
     * Fires event {@link #event:hideTooltip hideTooltip} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHideTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:initialized initialized} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireInitialized(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectData selectData} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:showTooltip showTooltip} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowTooltip(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:vizDefinitionChanged vizDefinitionChanged} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireVizDefinitionChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:vizTypeChanged vizTypeChanged} to attached listeners.
     *
     * @ui5-protected Do not call from applications (only from related classes in the framework)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireVizTypeChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     * Available sap.viz.ui5.controls.common.feeds.AnalysisObject for object picker popup UI
     */
    getAnalysisObjectsForPicker(): AnalysisObject[];
    /**
     * Gets current value of property {@link #getEnableMorphing enableMorphing}.
     *
     * Enable morphing for visualization.
     *
     *
     * @returns Value of property `enableMorphing`
     */
    getEnableMorphing(): boolean;
    /**
     * Gets content of aggregation {@link #getFeeds feeds}.
     *
     * All feeds for chart.
     */
    getFeeds(): FeedItem[];
    /**
     * Gets current value of property {@link #getVizCss vizCss}.
     *
     * Css for visualization.
     *
     *
     * @returns Value of property `vizCss`
     */
    getVizCss(): string;
    /**
     * Gets content of aggregation {@link #getVizData vizData}.
     *
     * Dataset for chart.
     */
    getVizData(): Dataset;
    /**
     * Gets current value of property {@link #getVizProperties vizProperties}.
     *
     * Properties for visualization.
     *
     *
     * @returns Value of property `vizProperties`
     */
    getVizProperties(): object;
    /**
     * Gets current value of property {@link #getVizType vizType}.
     *
     * Type for visualization.
     *
     *
     * @returns Value of property `vizType`
     */
    getVizType(): string;
    /**
     * Checks for the provided `sap.viz.ui5.controls.common.feeds.AnalysisObject` in the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfAnalysisObjectsForPicker(
      /**
       * The analysisObjectsForPicker whose index is looked for
       */
      oAnalysisObjectsForPicker: AnalysisObject
    ): int;
    /**
     * Checks for the provided `sap.viz.ui5.controls.common.feeds.FeedItem` in the aggregation {@link #getFeeds feeds}.
     * and returns its index if found or -1 otherwise.
     *
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFeed(
      /**
       * The feed whose index is looked for
       */
      oFeed: FeedItem
    ): int;
    /**
     * Inserts a analysisObjectsForPicker into the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertAnalysisObjectsForPicker(
      /**
       * The analysisObjectsForPicker to insert; if empty, nothing is inserted
       */
      oAnalysisObjectsForPicker: AnalysisObject,
      /**
       * The `0`-based index the analysisObjectsForPicker should be inserted at; for a negative value of `iIndex`,
       * the analysisObjectsForPicker is inserted at position 0; for a value greater than the current size of
       * the aggregation, the analysisObjectsForPicker is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a feed into the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFeed(
      /**
       * The feed to insert; if empty, nothing is inserted
       */
      oFeed: FeedItem,
      /**
       * The `0`-based index the feed should be inserted at; for a negative value of `iIndex`, the feed is inserted
       * at position 0; for a value greater than the current size of the aggregation, the feed is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAnalysisObjectsForPicker(): AnalysisObject[];
    /**
     * Removes all the controls from the aggregation {@link #getFeeds feeds}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFeeds(): FeedItem[];
    /**
     * Removes a analysisObjectsForPicker from the aggregation {@link #getAnalysisObjectsForPicker analysisObjectsForPicker}.
     *
     *
     * @returns The removed analysisObjectsForPicker or `null`
     */
    removeAnalysisObjectsForPicker(
      /**
       * The analysisObjectsForPicker to remove or its index or id
       */
      vAnalysisObjectsForPicker: int | string | AnalysisObject
    ): AnalysisObject | null;
    /**
     * Removes a feed from the aggregation {@link #getFeeds feeds}.
     *
     *
     * @returns The removed feed or `null`
     */
    removeFeed(
      /**
       * The feed to remove or its index or id
       */
      vFeed: int | string | FeedItem
    ): FeedItem | null;
    /**
     * Setter for property enableMorphing. If set true, a tween animation will play when chart changed.
     */
    setEnableMorphing(bEnableMorphing: boolean): this;
    /**
     * Sets a new value for property {@link #getVizCss vizCss}.
     *
     * Css for visualization.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVizCss(
      /**
       * New value for property `vizCss`
       */
      sVizCss?: string
    ): this;
    /**
     * Sets the aggregated {@link #getVizData vizData}.
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVizData(
      /**
       * The vizData to set
       */
      oVizData: Dataset
    ): this;
    /**
     * Properties for visualization. Example:
     *
     *
     * ```javascript
     *
     *  var vizContainer = new sap.viz.ui5.VizContainer(...);
     *  var properties = {
     *      'dataLabel' : {'visible' : true },
     *      'legend' : { "visible" : true },
     *      'direction' : 'horizontal',
     *      'stacking' : 'normal'
     * };
     * vizContainer.setVizProperties(properties);
     * ```
     */
    setVizProperties(oVizProperties: object): this;
    /**
     * Setter for property vizType. A string of supported viz type: viz/column, viz/stacked_column, viz/dual_column,
     * viz/line, viz/area, viz/combination, viz/dual_line, viz/dual_combination, viz/pie, viz/donut, viz/scatter,
     * viz/bubble, viz/heatmap, viz/treemap.
     */
    setVizType(sVizType: string): this;
    /**
     * Selections for visualization. Example:
     *
     *
     * ```javascript
     *
     *  var vizContainer = new sap.viz.ui5.VizContainer(...);
     *  var points = [{
     *      data : {
     *      	"Country" : "China",
     *          "Year" : "2001",
     *          "Product" : "Car",
     *          "Profit" : 25
     *      }}, {
     *      data : {
     *      	"Country" : "China",
     *          "Year" : "2001",
     *          "Product" : "Trunk",
     *          "Profit" : 34
     *      }}];
     *  var action = {
     *  	clearSelection : true
     *  };
     * vizContainer.vizSelection(points, action);
     * ```
     */
    vizSelection(
      /**
       * some data points of the chart
       */
      aPoints: object[],
      /**
       * whether to clear previous selection, by default the selection will be incremental selection
       */
      oAction: object
    ): VizContainer;
    /**
     * Update VizContainer according to a JSON object, it can update css, properties, feeds and data model.
     * Example:
     *
     *
     * ```javascript
     *
     * var vizContainer = new sap.viz.ui5.VizContainer(...);
     * var vizData = new sap.viz.ui5.data.FlattenedDataset({
     *     'dimensions' : [{
     *         axis: 1,
     *         name: "Country",
     *         value: "{Country}"
     *         },{
     *         axis: 2,
     *         name: "City"
     *         value: "{City}"
     *      }],
     *      'measures' : [{
     *          group: 1,
     *          name: "Quantity sold",
     *          value: "{Quantity sold}"
     *       }],
     *       'data' : {
     *           'path' : "/rawData"
     *       }
     * });
     * var cssString = 'position:absolute;left:0px;top:0px;';
     * var properties = {
     *     'dataLabel' : {'visible' : true },
     *     'legend' : {"visible" : true},
     *     'direction' : 'horizontal',
     *     'stacking' : 'normal'
     * };
     * var FeedItem = sap.viz.ui5.controls.common.feeds.FeedItem;
     * var feeds = [
     *     new FeedItem({'uid' : 'primaryValues',
     *                   'type' : 'Measure',
     *                   'values' []}),
     *     new FeedItem({'uid' : 'regionColor',
     *                   'type' : 'Dimension',
     *                   'values' []})];
     * vizContainer.vizUpdate({
     *               'data' : vizData,
     *               'css' : cssString,
     *               'properties' : properties,
     *               'feeds' : feeds
     *           });
     * ```
     */
    vizUpdate(
      /**
       * a JSON object contains combination of css, properties, feeds and data model.
       */
      oOptions: object
    ): void;
  }
  /**
   * Describes the settings that can be provided to the VizContainer constructor.
   *
   * @deprecated As of version 1.32.0. The chart controls in the `sap.viz.ui5` package (which were always
   * marked as experimental) have been deprecated since 1.32.0. They are no longer actively developed
   * and won't receive new features or improvements, only important bug fixes. They will only remain in the
   * SAPUI5 distribution for backward compatibility.
   *
   * **SAP strongly recommends that existing consumers of those controls migrate to the new {@link sap.viz.ui5.controls.VizFrame VizFrame }
   * control to benefit from new charting enhancements and timely support. **
   *
   * **Note**: As the feature set, design and API usage of VizFrame might differ from the old chart controls,
   * make sure you evaluate it thoroughly before migration.
   * @experimental As of version 1.19.0. API is not finished yet and might change completely
   */
  export interface $VizContainerSettings extends $BaseControlSettings {
    /**
     * Type for visualization.
     */
    vizType?: string | PropertyBindingInfo;

    /**
     * Css for visualization.
     */
    vizCss?: string | PropertyBindingInfo;

    /**
     * Properties for visualization.
     */
    vizProperties?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Enable morphing for visualization.
     */
    enableMorphing?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Dataset for chart.
     */
    vizData?: Dataset;

    /**
     * Available sap.viz.ui5.controls.common.feeds.AnalysisObject for object picker popup UI
     */
    analysisObjectsForPicker?:
      | AnalysisObject[]
      | AnalysisObject
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * All feeds for chart.
     */
    feeds?: FeedItem[] | FeedItem | AggregationBindingInfo | `{${string}}`;

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding
     * panel, drag and drop object onto VizFrame, or switch chart type by UI operation. Application should listen
     * to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization
     * with the new data.
     */
    feedsChanged?: (oEvent: VizContainer$FeedsChangedEvent) => void;

    /**
     * Dispatches "vizTypeChanged" event when viz type was changed
     */
    vizTypeChanged?: (oEvent: Event) => void;

    /**
     * Dispatches "vizDefinitionChanged" event when viz definition was changed.
     */
    vizDefinitionChanged?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed
     * in accordance with the following format.{name: "selectData",data:[{ //selected element's detail
     * target:"Dom Element",//an object pointed to corresponding dom element data:[{val: "...",//value of this
     * element ctx:{type:"Dimension"||"Measure"||"MND", //for Dimension path:{aa:"...",di:"...",dii:"..."},
     * //for Measure path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."}, //for MND path:{mg:"...",mi:"..." }
     * //path: analysis path //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2 //di: dimension
     * index //zero based //dii: dimension item index //zero based //mg: measure group index // 0 for measure
     * group 1,1 for measure group 2 //mi: measure index // measure index in measure group zero based //dii_a1:
     * each dii of di in analysis axis 1 index //dii_a2: each dii of di in analysis axis 2 index }},{ //for
     * bubble, tagcloud and scatter, there will be more than one values in one selected element. var:"...",ctx:"..."}]},{
     * //if under multi selection, there will be more than one selected elements target:"...",data:["..."]}]}
     */
    selectData?: (oEvent: Event) => void;

    /**
     * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be
     * passed in accordance with the following format.{name: "deselectData",data:["---the same as selectedData---"]}
     */
    deselectData?: (oEvent: Event) => void;

    /**
     * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed
     * in accordance with the following format.{name:"showTooltip",data:{body:[{ //data of one group name:"...",val:[{
     * //data of one row color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
     * //this object specifies the plot area of the chart height:"...",width:"...",x:"...",y:"..."},point:{
     * //this object specifies a point which affects the position of tooltip x:"...",y:"..."}}}
     */
    showTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the mouse hover out of the specific part of chart, no data is passed.
     */
    hideTooltip?: (oEvent: Event) => void;

    /**
     * Event fires when the loading ends. To use the event listener when creating charts, you must use an event
     * that is passed by the events option. For more information on events options, see the usrOptions section
     * of the createViz function in the API document.
     */
    initialized?: (oEvent: Event) => void;
  }

  /**
   * Parameters of the VizContainer#deselectData event.
   */
  export interface VizContainer$DeselectDataEventParameters {}

  /**
   * Event object of the VizContainer#deselectData event.
   */
  export type VizContainer$DeselectDataEvent = Event<
    VizContainer$DeselectDataEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#feedsChanged event.
   */
  export interface VizContainer$FeedsChangedEventParameters {
    /**
     * An array of changed feeds.
     */
    feeds?: FeedItem[];
  }

  /**
   * Event object of the VizContainer#feedsChanged event.
   */
  export type VizContainer$FeedsChangedEvent = Event<
    VizContainer$FeedsChangedEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#hideTooltip event.
   */
  export interface VizContainer$HideTooltipEventParameters {}

  /**
   * Event object of the VizContainer#hideTooltip event.
   */
  export type VizContainer$HideTooltipEvent = Event<
    VizContainer$HideTooltipEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#initialized event.
   */
  export interface VizContainer$InitializedEventParameters {}

  /**
   * Event object of the VizContainer#initialized event.
   */
  export type VizContainer$InitializedEvent = Event<
    VizContainer$InitializedEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#selectData event.
   */
  export interface VizContainer$SelectDataEventParameters {}

  /**
   * Event object of the VizContainer#selectData event.
   */
  export type VizContainer$SelectDataEvent = Event<
    VizContainer$SelectDataEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#showTooltip event.
   */
  export interface VizContainer$ShowTooltipEventParameters {}

  /**
   * Event object of the VizContainer#showTooltip event.
   */
  export type VizContainer$ShowTooltipEvent = Event<
    VizContainer$ShowTooltipEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#vizDefinitionChanged event.
   */
  export interface VizContainer$VizDefinitionChangedEventParameters {}

  /**
   * Event object of the VizContainer#vizDefinitionChanged event.
   */
  export type VizContainer$VizDefinitionChangedEvent = Event<
    VizContainer$VizDefinitionChangedEventParameters,
    VizContainer
  >;

  /**
   * Parameters of the VizContainer#vizTypeChanged event.
   */
  export interface VizContainer$VizTypeChangedEventParameters {}

  /**
   * Event object of the VizContainer#vizTypeChanged event.
   */
  export type VizContainer$VizTypeChangedEvent = Event<
    VizContainer$VizTypeChangedEventParameters,
    VizContainer
  >;
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/viz/library": undefined;

    "sap/viz/ui5/api/env/Format": undefined;

    "sap/viz/ui5/Area": undefined;

    "sap/viz/ui5/Area100": undefined;

    "sap/viz/ui5/Bar": undefined;

    "sap/viz/ui5/Bubble": undefined;

    "sap/viz/ui5/Bullet": undefined;

    "sap/viz/ui5/Column": undefined;

    "sap/viz/ui5/Combination": undefined;

    "sap/viz/ui5/controls/common/BaseControl": undefined;

    "sap/viz/ui5/controls/common/feeds/AnalysisObject": undefined;

    "sap/viz/ui5/controls/common/feeds/FeedItem": undefined;

    "sap/viz/ui5/controls/Popover": undefined;

    "sap/viz/ui5/controls/VizFrame": undefined;

    "sap/viz/ui5/controls/VizSlider": undefined;

    "sap/viz/ui5/controls/VizTooltip": undefined;

    "sap/viz/ui5/core/BaseChart": undefined;

    "sap/viz/ui5/core/BaseStructuredType": undefined;

    "sap/viz/ui5/data/CustomDataset": undefined;

    "sap/viz/ui5/data/Dataset": undefined;

    "sap/viz/ui5/data/DimensionDefinition": undefined;

    "sap/viz/ui5/data/FlattenedDataset": undefined;

    "sap/viz/ui5/data/MeasureDefinition": undefined;

    "sap/viz/ui5/Donut": undefined;

    "sap/viz/ui5/DualBar": undefined;

    "sap/viz/ui5/DualColumn": undefined;

    "sap/viz/ui5/DualCombination": undefined;

    "sap/viz/ui5/DualLine": undefined;

    "sap/viz/ui5/DualStackedColumn": undefined;

    "sap/viz/ui5/DualStackedColumn100": undefined;

    "sap/viz/ui5/format/ChartFormatter": undefined;

    "sap/viz/ui5/Heatmap": undefined;

    "sap/viz/ui5/HorizontalArea": undefined;

    "sap/viz/ui5/HorizontalArea100": undefined;

    "sap/viz/ui5/Line": undefined;

    "sap/viz/ui5/Pie": undefined;

    "sap/viz/ui5/Scatter": undefined;

    "sap/viz/ui5/StackedColumn": undefined;

    "sap/viz/ui5/StackedColumn100": undefined;

    "sap/viz/ui5/TimeBubble": undefined;

    "sap/viz/ui5/Treemap": undefined;

    "sap/viz/ui5/types/Area": undefined;

    "sap/viz/ui5/types/Area_animation": undefined;

    "sap/viz/ui5/types/Area_hoverline": undefined;

    "sap/viz/ui5/types/Area_marker": undefined;

    "sap/viz/ui5/types/Area_tooltip": undefined;

    "sap/viz/ui5/types/Axis": undefined;

    "sap/viz/ui5/types/Axis_axisline": undefined;

    "sap/viz/ui5/types/Axis_axisTick": undefined;

    "sap/viz/ui5/types/Axis_gridline": undefined;

    "sap/viz/ui5/types/Axis_indicator": undefined;

    "sap/viz/ui5/types/Axis_label": undefined;

    "sap/viz/ui5/types/Axis_layoutInfo": undefined;

    "sap/viz/ui5/types/Axis_scale": undefined;

    "sap/viz/ui5/types/Axis_title": undefined;

    "sap/viz/ui5/types/Background": undefined;

    "sap/viz/ui5/types/Background_border": undefined;

    "sap/viz/ui5/types/Background_border_bottom": undefined;

    "sap/viz/ui5/types/Background_border_left": undefined;

    "sap/viz/ui5/types/Background_border_right": undefined;

    "sap/viz/ui5/types/Background_border_top": undefined;

    "sap/viz/ui5/types/Bar": undefined;

    "sap/viz/ui5/types/Bar_animation": undefined;

    "sap/viz/ui5/types/Bar_tooltip": undefined;

    "sap/viz/ui5/types/Bubble": undefined;

    "sap/viz/ui5/types/Bubble_animation": undefined;

    "sap/viz/ui5/types/Bubble_axisTooltip": undefined;

    "sap/viz/ui5/types/Bubble_hoverline": undefined;

    "sap/viz/ui5/types/Bullet": undefined;

    "sap/viz/ui5/types/Bullet_tooltip": undefined;

    "sap/viz/ui5/types/Combination": undefined;

    "sap/viz/ui5/types/Combination_animation": undefined;

    "sap/viz/ui5/types/Combination_bar": undefined;

    "sap/viz/ui5/types/Combination_dataShape": undefined;

    "sap/viz/ui5/types/Combination_line": undefined;

    "sap/viz/ui5/types/Combination_line_marker": undefined;

    "sap/viz/ui5/types/Combination_tooltip": undefined;

    "sap/viz/ui5/types/controller/Interaction": undefined;

    "sap/viz/ui5/types/controller/Interaction_pan": undefined;

    "sap/viz/ui5/types/controller/Interaction_selectability": undefined;

    "sap/viz/ui5/types/Datalabel": undefined;

    "sap/viz/ui5/types/Datatransform": undefined;

    "sap/viz/ui5/types/Datatransform_autoBinning": undefined;

    "sap/viz/ui5/types/Datatransform_dataSampling": undefined;

    "sap/viz/ui5/types/Datatransform_dataSampling_grid": undefined;

    "sap/viz/ui5/types/Heatmap": undefined;

    "sap/viz/ui5/types/Heatmap_animation": undefined;

    "sap/viz/ui5/types/Heatmap_border": undefined;

    "sap/viz/ui5/types/Heatmap_tooltip": undefined;

    "sap/viz/ui5/types/layout/Dock": undefined;

    "sap/viz/ui5/types/layout/Stack": undefined;

    "sap/viz/ui5/types/Legend": undefined;

    "sap/viz/ui5/types/legend/Common": undefined;

    "sap/viz/ui5/types/legend/Common_title": undefined;

    "sap/viz/ui5/types/Legend_layout": undefined;

    "sap/viz/ui5/types/Line": undefined;

    "sap/viz/ui5/types/Line_animation": undefined;

    "sap/viz/ui5/types/Line_hoverline": undefined;

    "sap/viz/ui5/types/Line_marker": undefined;

    "sap/viz/ui5/types/Line_tooltip": undefined;

    "sap/viz/ui5/types/Pie": undefined;

    "sap/viz/ui5/types/Pie_animation": undefined;

    "sap/viz/ui5/types/Pie_tooltip": undefined;

    "sap/viz/ui5/types/RootContainer": undefined;

    "sap/viz/ui5/types/RootContainer_layout": undefined;

    "sap/viz/ui5/types/Scatter": undefined;

    "sap/viz/ui5/types/Scatter_animation": undefined;

    "sap/viz/ui5/types/Scatter_axisTooltip": undefined;

    "sap/viz/ui5/types/Scatter_hoverline": undefined;

    "sap/viz/ui5/types/StackedVerticalBar": undefined;

    "sap/viz/ui5/types/StackedVerticalBar_animation": undefined;

    "sap/viz/ui5/types/StackedVerticalBar_tooltip": undefined;

    "sap/viz/ui5/types/Title": undefined;

    "sap/viz/ui5/types/Title_layout": undefined;

    "sap/viz/ui5/types/Tooltip": undefined;

    "sap/viz/ui5/types/Tooltip_background": undefined;

    "sap/viz/ui5/types/Tooltip_bodyDimensionLabel": undefined;

    "sap/viz/ui5/types/Tooltip_bodyDimensionValue": undefined;

    "sap/viz/ui5/types/Tooltip_bodyMeasureLabel": undefined;

    "sap/viz/ui5/types/Tooltip_bodyMeasureValue": undefined;

    "sap/viz/ui5/types/Tooltip_closeButton": undefined;

    "sap/viz/ui5/types/Tooltip_footerLabel": undefined;

    "sap/viz/ui5/types/Tooltip_separationLine": undefined;

    "sap/viz/ui5/types/Treemap": undefined;

    "sap/viz/ui5/types/Treemap_animation": undefined;

    "sap/viz/ui5/types/Treemap_border": undefined;

    "sap/viz/ui5/types/Treemap_tooltip": undefined;

    "sap/viz/ui5/types/VerticalBar": undefined;

    "sap/viz/ui5/types/VerticalBar_animation": undefined;

    "sap/viz/ui5/types/VerticalBar_tooltip": undefined;

    "sap/viz/ui5/types/XYContainer": undefined;

    "sap/viz/ui5/VizContainer": undefined;
  }
}
