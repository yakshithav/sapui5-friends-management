import { URL } from "url";

export declare namespace core {
  /**
   * Checks if the runtime environment is SAP Business Application Studio.
   * @returns {Promise<boolean>} A promise that resolves to true when the runtime environment is SAP Business Application Studio, otherwise resolves to false.
   */
  export function isAppStudio(): Promise<boolean>;

  /**
   * Adds the JWT header to the existing headers.
   * @param {Record<string, string>} headers - The existing headers object.
   * @returns {Record<string, string>} A new headers object with the JWT header added.
   */
  export function addJwtHeader(
    headers: Record<string, string>,
  ): Record<string, string>;

  /**
   * Executes a command in SAP Business Application Studio.
   * @param {string} command - The command to execute.
   * @param {string[]} args - An array of arguments for the command.
   * @returns {Promise<string>} A promise that resolves to the string result of the executed command.
   */
  export function runCommand(command: string, args: string[]): Promise<string>;

  /**
   * Retrieves an environment variable value with a provided name.
   * @param {string} name - The name of the environment variable.
   * @returns {string} The value of the environment variable.
   */
  export function getEnvValue(name: string): string;

  /**
   * Composes an external login page URL.
   * @param {string} landscapeUrl - The URL of the required landscape.
   * @param {boolean} [useVscodeProtocol] - Whether to use the VSCode protocol for the external login process.
   * @returns {string} The calculated URL of the 'external login' page.
   */
  export function getExtLoginPath(
    landscapeUrl: string,
    useVscodeProtocol?: boolean,
  ): string;

  /**
   * Checks if the user is in an internal account.
   * @returns {boolean} True if it's an internal account, otherwise false.
   */
  export function isInternalAccount(): boolean;

  /**
   * Returns the URI for opening VSCode via SSH to the remote landscape URL and the development space workspace ID within a specific folder path.
   * @param {string} landscapeUrl - The URL of the landscape.
   * @param {string} wsId - The ID of the dev space.
   * @param {string} folderPath - The project's folder path.
   * @returns {string} The URI for opening the project in VSCode.
   */
  export function getOpenProjectInVSCodeURI(
    landscapeUrl: string,
    wsId: string,
    folderPath: string,
  ): string;

  /**
   * Checks if a JWT has expired.
   * @param {string} jwt - The JWT to check.
   * @returns {boolean} True if the JWT has expired, false otherwise.
   */
  export function isJwtExpired(jwt: string): boolean;

  /**
   * Calculates the time until a JWT expires.
   * @param {string} jwt - The JWT to check.
   * @returns {number} The number of seconds until the JWT expires.
   */
  export function timeUntilJwtExpires(jwt: string): number;
}

export declare namespace devspaceApi {
  /**
   * Interface for connecting to the devspace and executing processes on it.
   */
  export interface IDevspaceApi {
    /**
     * Connects to the devspace.
     * @param {string} jwt - The JWT accepted by the devspace.
     * @returns {Promise<void>} A promise that resolves when the connection is established.
     */
    connect(jwt: string): Promise<void>;

    /**
     * Executes a process in the devspace.
     * @param {Object} opt - Command options.
     * @param {string} opt.command - The command to execute.
     * @param {string[]} [opt.args] - Arguments for the command.
     * @param {(err?: Error) => void} [opt.onError] - Error callback function.
     */
    execute(opt: {
      command: string;
      args?: string[];
      onError?: (err?: Error) => void;
    }): void;

    /**
     * Sets a callback for STDOUT of the executed processes.
     * @param {(output: string) => void} callback - Function to handle the output.
     */
    onMessage(callback: (output: string) => void): void;

    /**
     * Sets a listener function for the websocket 'close' event.
     * @param {(code: number, reason: Buffer) => void} callback - Function to handle the close event.
     */
    onClose(callback: (code: number, reason: Buffer) => void): void;

    /**
     * Sets a listener function for the websocket 'error' event.
     * @param {(error: Error) => void} callback - Function to handle the error event.
     */
    onError(callback: (error: Error) => void): void;

    /**
     * Disconnects from the devspace.
     */
    disconnect(): void;
  }

  /**
   * Creates a devspace API object to execute operations on the devspace.
   * @param {string} devspaceUrl - Full URL of the devspace websocket.
   * @returns {IDevspaceApi} A devspace API object.
   */
  export function devspaceApiFactory(devspaceUrl: string): IDevspaceApi;
}

export declare namespace destinations {
  /**
   *
   * Represents the destination type.
   *   HTTP - The destination defined as the http protocol.
   */
  export type DestinationType = "HTTP";

  /**
   *
   * Represents the proxy types supported by the Connectivity service.
   *  Internet  - The application can connect to an external REST or SOAP service on the Internet.
   *  OnPremise - The application can connect to an on-premise back-end system through the Cloud Connector.
   */
  export type ProxyType = "Internet" | "OnPremise";

  /**
   * Represents the different authentication types for access control.
   *   NoAuthentication    - Used for destinations that refer to a service on the Internet or an on-premise system that does not require authentication.
   *   BasicAuthentication - Used for destinations that refer to a service on the Internet or an on-premise system that requires basic authentication.
   *   OAuth2ClientCredentials - Create and configure an OAuth2ClientCredentials destination to consume OAuth-protected resources from a Cloud Foundry application.
   *   OAuth2UserTokenExchange - When a user is logged into an application that needs to call another application and pass the user context, the caller application must perform a user token exchange.
   */
  export type AuthenticationType =
    | "NoAuthentication"
    | "BasicAuthentication"
    | "OAuth2ClientCredentials"
    | "OAuth2UserTokenExchange";

  /**
   * The type of the token service URL, specifying whether it is a dedicated
   * or common URL.
   */
  export type TokenServiceURLType = "Dedicated" | "Common";

  /**
   * Exposes OAuth2 User Token Exchange properties.
   */
  export interface OAuth2UserTokenExchange {
    /**
     * The client ID.
     */
    clientId: string;

    /**
     * The client secret.
     */
    clientSecret: string;

    /**
     * The token service endpoint URL.
     */
    tokenServiceURL: string;

    /**
     * The type of the token service URL, specifying whether it is a dedicated
     * or common URL.
     */
    tokenServiceURLType: TokenServiceURLType;
  }

  /**
   * Exposes OAuth2 Client Credentials properties.
   */
  export interface OAuth2ClientCredentials {
    /**
     * The client ID.
     */
    clientId: string;

    /**
     * The client secret.
     */
    clientSecret: string;

    /**
     * The token service endpoint URL.
     */
    tokenServiceURL: string;

    /**
     * The type of the token service URL, specifying whether it is a dedicated
     * or common URL.
     */
    tokenServiceURLType: TokenServiceURLType;

    /**
     * The username for token service authentication.
     */
    tokenServiceUser?: string;

    /**
     * The password for token service authentication.
     */
    tokenServicePassword?: string;
  }

  /**
   * Exposes basic authentication properties.
   */
  export interface BasicAuthentication {
    /**
     * The username.
     */
    userName: string;

    /**
     * The user password.
     */
    userPassword: string;
  }

  /**
   * Exposes the different credential types for access control.
   */
  export interface Credentials {
    /**
     * The different authentication types for access control.
     */
    authentication: AuthenticationType;

    /**
     * The basic authentication properties that refer to a service on the Internet or an on-premise system.
     * Note: property is not exposed for reading
     */
    basicAuthentication?: BasicAuthentication;

    /**
     * The OAuth2 (Client Credentials) properties that refer to a service on the Internet or an on-premise system.
     * Note: property is not exposed for reading
     */
    oauth2ClientCredentials?: OAuth2ClientCredentials;

    /**
     * The OAuth2 (User Token Exchange) properties that refer to a service on the Internet or an on-premise system.
     * Note: property is not exposed for reading
     */
    oauth2UserTokenExchange?: OAuth2UserTokenExchange;
  }

  /**
   *  Represents SAP Business Application Studio properties associated with the destination.
   */
  export interface BASProperties {
    /**
     * Used for OData SAP Business Application Studio destinations (e.g.: odata-abap, odata_gen).
     */
    usage?: string;

    /**
     * Used for additional information for the SAP Business Application Studio destination.
     */
    additionalData?: string;

    /**
     * The SAP client for the catalog service.
     */
    sapClient?: string;

    /**
     * The product name associated with the destination.
     */
    productName?: string;

    /**
     * The apiKey of the product subscription in api business hub enterprise.
     */
    apiKey?: string;

    /**
     * The applicationID of the product subscription in api business hub enterprise.
     */
    applicationID?: string;

    /**
     * The apiBusinessHubEnterpriseURL for the api business hub enterprise navigation url.
     */
    apiBusinessBusinessHubEnterpriseURL?: string;

    /**
     * If this property is set to `true` then the destination is created for a dynamic tile.
     */
    html5DynamicDestination?: string;

    /**
     * Indicates whether Developer Hub will propagate credentials in the consumption API.
     *
     * `true`: Developer Hub will share credentials in the consumption API.
     *
     * `false`: Developer Hub will only share the destination name in the consumption API.
     *
     * Note: If BAS and Developer Hub are not in the same account, then it is equivalent to the destination not existing.
     * Note: property is not exposed for reading
     */
    comSapCatalogPropagateCredential?: string;

    /**
     * System type for the product.
     * Note: property is not exposed for reading
     */
    xSystemType?: string;

    /**
     * Correlation ID of the product.
     * Note: property is not exposed for reading
     */
    xCorrelationId?: string;
    /**
     * System ID for the product.
     * Note: property is not exposed for reading
     */
    xSystemId?: string;

    /**
     * Socket timeout value.
     * Note: A value representing the maximum time to wait for a response (in milliseconds) from the destination.
     */
    html5Timeout?: string;
  }

  /**
   * Specifies the basic destination information.
   */
  export interface DestinationBaseInfo {
    /**
     * Exposes the name of the destination.
     */
    name: string;

    /**
     * Exposes the destination type.
     */
    type: DestinationType;

    /**
     * Exposes the different credential types for access control.
     */
    credentials: Credentials;

    /**
     * Exposes the proxy types supported by the Connectivity service.
     */
    proxyType: ProxyType;

    /**
     * Exposes the destination description.
     */
    description?: string;

    /**
     * Exposes SAP Business Application Studio properties associated with the destination.
     */
    basProperties?: BASProperties;
  }

  /**
   *  Specifies the destination information retrieved by the destination list.
   */
  export interface DestinationListInfo extends DestinationBaseInfo {
    /**
     * The host name of the destination URL.
     */
    host: string;
  }

  /**
   * Specifies the destination information when creating a destination.
   */
  export interface DestinationInfo extends DestinationBaseInfo {
    /**
     * The destination URL.
     */
    url: URL;
  }

  /**
   * Retrieves HTTP destinations for SAP Business Application Studio.
   * @param {Map<string, string[]>} [filter] - Destinations containing both the key and at least one value entered are filtered.
   * @returns {Promise<DestinationListInfo[] | undefined>} A promise that resolves to an array of destination information or undefined.
   * @throws {Error} When a network error occurs.
   */
  export function getDestinations(
    filter?: Map<string, string[]>,
  ): Promise<DestinationListInfo[] | undefined>;

  /**
   * Creates a new HTTP destination for SAP Business Application Studio.
   * @param {DestinationInfo} destinationInfo - Information about the destination to be created.
   * @returns {Promise<void>} A promise that resolves when the destination is created.
   * @throws {Error} When the destination already exists or a network error occurs.
   */
  export function createDestination(
    destinationInfo: DestinationInfo,
  ): Promise<void>;
}

export declare namespace hrtt {
  interface HrttHelper {
    /**
     * Retrieves the HRTT URL.
     * @param {string} endpoint - The Cloud Foundry endpoint.
     * @returns {Promise<string>} A promise that resolves to the HRTT URL.
     * @throws {Error} When the HRTT URL could not be retrieved or generated.
     */
    getUrl(endpoint: string): Promise<string>;
  }

  /**
   * Creates a new HrttHelper instance.
   * @returns {HrttHelper} A new HrttHelper instance.
   */
  export function createHrttHelper(): HrttHelper;
}

export declare namespace devspace {
  /**
   * Information about the current devspace
   */
  export interface DevspaceInfo {
    devspaceDisplayName: string;
    devspaceOrigin: string;
    pack: string;
    packDisplayName: string;
    url: string;
    status: string;
    id: string;
    optionalExtensions: string;
    technicalExtensions: string;
  }

  /**
   * Returns information of dev space status and name
   */
  export interface DevspaceUpdate {
    Suspended: boolean;
    WorkspaceDisplayName: string;
  }

  /**
   * Returns information about the current workspace.
   * @param {string} [options.landscapeUrl] - The landscape URL.
   * @param {string} [options.jwt] - The JWT for authentication.
   * @param {string} [options.wsId] - The workspace ID.
   * @returns {Promise<DevspaceInfo>} A promise that resolves to the devspace information.
   */
  export function getDevspaceInfo(options?: {
    landscapeUrl: string;
    jwt: string;
    wsId: string;
  }): Promise<DevspaceInfo>;

   /**
   * Determines whether the current environment is a build code environment.
   * Only use `opts` when your environment is not BAS.
   * @param opts ({ buildCodePlan?: string; wsPlan?: string;}, optional): Options, including:
   *   - `buildCodePlan` (string, optional): The build code plan to check against.
   *   - `wsPlan` (string, optional): The workspace plan to check against.
   * @returns {boolean} true if it's a build code environment, false otherwise.
   * @throws {Error} If there's an issue determining the environment type.
   * 
   * Usage example in BAS:
   * ```typescript
   * // No need to provide opts in BAS
   * const isBuildEnv = isBuildCode();
   * console.log(isBuildEnv); // true or false based on the environment
   * ```
   * 
   * Usage example outside of BAS:
   * ```typescript
   * // Only provide opts when outside of BAS
   * const opts = { buildCodePlan: 'plan1', wsPlan: 'planA' };
   * const isBuildEnv = isBuildCode(opts);
   * console.log(isBuildEnv); // true or false based on the environment
   * ```
   */
  export function isBuildCode(opts?: {
    buildCodePlan?: string;
    wsPlan?: string;
  }): boolean;

  /**
   * Determines if the current environment is in SAP build everything mode.
   * Only use `opts` when you are outside of BAS.
   * @param opts ({ buildCodePlan?: string; wsPlan?: string;}, optional): Options, including:
   *   - `buildCodePlan` (string, optional): The build code plan to check against.
   *   - `wsPlan` (string, optional): The workspace plan to check against.
   * @returns {boolean} true if the environment is in SAP build everything mode, false otherwise.
   * 
   * Usage example in BAS:
   * ```typescript
   * // No need to provide opts in BAS
   * const isInBuildMode = isBuild();
   * console.log(isInBuildMode); // true or false based on the environment
   * ```
   * 
   * Usage example outside of BAS:
   * ```typescript
   * // Only provide opts when outside of BAS
   * const opts = { buildCodePlan: 'plan1', wsPlan: 'planA' };
   * const isInBuildMode = isBuild(opts);
   * console.log(isInBuildMode); // true or false based on the environment
   * ```
   */
     export function isBuild(opts?: {
      buildCodePlan?: string;
      wsPlan?: string;
    }): boolean;

    
  /**
   * Retrieves the tenant metadata for the given landscape.
   * @param tenant ({landscape: string, jwt: string}) - An object containing tenant information, including:
   *   - `landscape` (string): The tenant's landscape identifier.
   *   - `jwt` (string): The JWT token for authentication.
   * @returns {Promise<{buildCodePlan: string, wsPlan: string, host: string}>}
   * A promise that resolves to an object with tenant metadata:
   * - `buildCodePlan` {string} - The build code plan associated with the tenant.
   * - `wsPlan` {string} - The workspace plan associated with the tenant.
   * - `host` {string} - The host information for the tenant.
   */
  export function getTenantMetadata(tenant: {
    landscape: string;
    jwt: string;
  }): Promise<{
    buildCodePlan: string;
    wsPlan: string;
    host: string;
  }>;

  export type BasMode =
    | "personal-edition"
    | "standard"
    | "free"
    | "buildCodeFree"
    | "buildCodeStandard"
    | "buildStandard";

   /**
   * Retrieves the available BasMode of bas mode.
   * Only use `opts` when your environment is not BAS.
   * @param opts ({ buildCodePlan?: string; wsPlan?: string;}, optional): Options, including:
   *   - `buildCodePlan` (string, optional): The build code plan to check against.
   *   - `wsPlan` (string, optional): The workspace plan to check against.
   * @returns {BasMode} The BasMode value representing the bas mode.
   * 
   * Usage example in BAS:
   * ```typescript
   * // No need to provide opts in BAS
   * const basMode = getBasMode();
   * console.log(basMode); // "standard", "personal-edition", etc.
   * ```
   * 
   * Usage example outside of BAS:
   * ```typescript
   * // Only provide opts when outside of BAS
   * const opts = { buildCodePlan: 'plan1', wsPlan: 'planA' };
   * const basMode = getBasMode(opts);
   * console.log(basMode); // "buildCodeStandard", "buildCodeFree", etc.
   * ```
   */
   export function getBasMode(opts?: {
    buildCodePlan?: string;
    wsPlan?: string;
  }): BasMode;


  /**
   * Returns collection of dev spaces information on the given landscape.
   * @param {string} landscapeUrl - The landscape URL.
   * @param {string} jwt - The JWT for authentication.
   * @returns {Promise<DevspaceInfo[]>} A promise that resolves to an array of DevspaceInfo.
   */
  export function getDevSpaces(
    landscapeUrl: string,
    jwt: string,
  ): Promise<DevspaceInfo[]>;

  /**
   * Deletes the given dev space by its wsid.
   * @param {string} landscapeUrl - The landscape URL.
   * @param {string} jwt - The JWT for authentication.
   * @param {string} wsId - The workspace ID to delete.
   * @returns {Promise<void>} A promise that resolves when the dev space is deleted.
   */
  export function deleteDevSpace(
    landscapeUrl: string,
    jwt: string,
    wsId: string,
  ): Promise<void>;

  /**
   * Starts/suspends a given dev space.
   * @param {string} landscapeUrl - The landscape URL.
   * @param {string} jwt - The JWT for authentication.
   * @param {string} wsId - The workspace ID to update.
   * @param {DevspaceUpdate} data - The update data.
   * @returns {Promise<void>} A promise that resolves when the dev space is updated.
   */
  export function updateDevSpace(
    landscapeUrl: string,
    jwt: string,
    wsId: string,
    data: DevspaceUpdate,
  ): Promise<void>;

  /**
   * Checks if all the generators are installed.
   * @returns {Promise<boolean>} A promise that resolves to true if all generators are installed, false otherwise.
   */
  export function didBASGeneratorsFinishInstallation(): Promise<boolean>;

  export enum DevSpaceStatus {
    RUNNING = "RUNNING",
    STARTING = "STARTING",
    STOPPED = "STOPPED",
    STOPPING = "STOPPING",
    ERROR = "ERROR",
    SAFE_MODE = "SAFE_MODE",
  }

  export enum PackName {
    FIORI = "SAP Fiori",
    CAP = "SAP Cloud Business Application",
    HANA = "SAP Hana",
    SME = "SAP SME Business Application",
    MOBILE = "SAP Mobile Services",
    BASIC = "Basic",
    LCAP = "LCAP",
  }

  /**
   * Calculates the application URL by port.
   * @param {number} port - The port number.
   * @param {string} [scheme] - The scheme to use (e.g., 'http', 'https').
   * @returns {string} The calculated application URL.
   */
  export function calculateAppURLByPort(
    port: number,
    scheme?: string | undefined,
  ): string;

  /**
   * Returns the application external URI.
   * @param {string} appInternalUri - The internal URI of the application.
   * @returns {string} The external URI of the application.
   */
  export function getAppExternalUri(appInternalUri: string): string;
}

export declare namespace remotessh {
  /**
   * Returns private key for ssh session.
   * @param {string} landscapeUrl - The landscape URL.
   * @param {string} jwt - The access token to the landscape.
   * @param {string} wsId - The ID of the dev space.
   * @returns {Promise<string>} A promise that resolves to the private key.
   */
  export function getKey(
    landscapeUrl: string,
    jwt: string,
    wsId: string,
  ): Promise<string>;
}

export declare namespace cfendpoint {
  /**
   * Returns the default CF endpoint.
   * @returns {string} The CF endpoint or an empty string if the environment variable does not exist.
   */
  export function getCFEndpoint(): string;
}

export type ResponseType =
  | "arraybuffer"
  | "blob"
  | "document"
  | "json"
  | "text"
  | "stream"
  | "formdata";
export declare namespace ai {
  /**
   * Sends an AI request to the LLM service with the given path. This function can only be used from within the vscode extension context.
   * @param request ({path: string; method: string; config?: {
   *    data?: any;
   *    headers?: Record<string, string>;
   *    responseType: ResponseType
   *  } & Record<string, unknown>}) - The request object, including:
   *  - path (string): The path for the request.
   *  - method (string): The HTTP method for the request.
   *  - config (Object, optional): Additional configuration for the request, including:
   *    - data (any, optional): The data to send with the request.
   *    - headers (Record<string, string>, optional): Additional headers for the request.
   *    - responseType (ResponseType, optional): The expected response type. Supported values are 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream' | 'formdata';
   *    - ... (Record<string, unknown>, optional): Additional configuration options.
   * @returns {Promise<any>} A promise that resolves to the response of the request.
   * @throws {Error} Throws an error if the request fails (e.g., network issues, invalid response).
   *
   * @example
   * const response = await sendAiRequest({
   *   path: '/completions',
   *   method: 'POST',
   *   config: {
   *     data: { prompt: 'Hello' },
   *     headers: { 'Content-Type': 'application/json' }
   *     responseType: 'stream'
   *   }
   * });
   */
  export function sendAiRequest(request: {
    path: string;
    method: string;
    config?: {
      data?: unknown;
      headers?: Record<string, string>;
      responseType?: ResponseType;
    } & Record<string, unknown>;
  }): Promise<unknown>;
}
