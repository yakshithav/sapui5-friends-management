import * as isAppStudio from "./apis/is-app-studio";
import * as headersHelper from "./apis/headers-helper";
import * as getDestinations from "./apis/get-destinations";
import * as createDestination from "./apis/create-destination";
import * as devspaceApiFactory from "./apis/devspace-api-factory";
import * as hanaHrttHelper from "./apis/hrtt-helper";
import * as getEnvValue from "./apis/get-env-value";
import * as runCommand from "./apis/run-command";
import * as getCFEndpoint from "./apis/get-cf-endpoint";
import { getOpenProjectInVSCodeURI } from "./apis/get-open-project-in-vscode-uri";
import { getExtLoginPath } from "./utils/core-utils";
import {
  getDevSpaces,
  getDevspaceInfo,
  deleteDevSpace,
  updateDevSpace,
  isBuildCode,
  isBuild,
  getTenantMetadata,
  getBasMode,
  getAppExternalUri,
  calculateAppURLByPort,
} from "./apis/get-devspace";
import * as didBASGeneratorsFinishInstallation from "./apis/get-generators-installation-status";
import * as publicApi from "../api";
import { getKey, DevSpaceStatus, PackName } from "./utils/devspace-utils";
import * as isInternalAccount from "./apis/is-internal-account";
import { sendAiRequest } from "./apis/ai";
import { isJwtExpired, timeUntilJwtExpires } from "./apis/jwt-helper";

export const core: typeof publicApi.core = {
  ...isAppStudio,
  ...headersHelper,
  ...runCommand,
  ...getEnvValue,
  getExtLoginPath,
  ...isInternalAccount,
  getOpenProjectInVSCodeURI,
  isJwtExpired,
  timeUntilJwtExpires,
};

export const devspaceApi: typeof publicApi.devspaceApi = {
  ...devspaceApiFactory,
};
export const destinations: typeof publicApi.destinations = {
  ...getDestinations,
  ...createDestination,
};
export const devspace: typeof publicApi.devspace = {
  getDevspaceInfo,
  getDevSpaces,
  deleteDevSpace,
  updateDevSpace,
  isBuildCode,
  getTenantMetadata,
  getBasMode,
  ...didBASGeneratorsFinishInstallation,
  DevSpaceStatus,
  PackName,
  getAppExternalUri,
  calculateAppURLByPort,
  isBuild
};
export const hrtt: typeof publicApi.hrtt = { ...hanaHrttHelper };
export const remotessh: typeof publicApi.remotessh = {
  getKey,
};
export const cfendpoint: typeof publicApi.cfendpoint = {
  ...getCFEndpoint,
};
export const ai: typeof publicApi.ai = {
  sendAiRequest,
};
