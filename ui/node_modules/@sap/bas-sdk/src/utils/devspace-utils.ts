import axios, {
  AxiosResponse,
  RawAxiosRequestHeaders,
  Method as axiosMethod,
  ResponseType,
} from "axios";
import { isPlainObject } from "lodash";
import { readJson } from "fs-extra";
import { jwtDecode } from "jwt-decode";

export enum DevSpaceStatus {
  RUNNING = "RUNNING",
  STARTING = "STARTING",
  STOPPED = "STOPPED",
  STOPPING = "STOPPING",
  ERROR = "ERROR",
  SAFE_MODE = "SAFE_MODE",
}

export enum PackName {
  FIORI = "SAP Fiori",
  CAP = "SAP Cloud Business Application",
  HANA = "SAP Hana",
  SME = "SAP SME Business Application",
  MOBILE = "SAP Mobile Services",
  BASIC = "Basic",
  LCAP = "LCAP",
}

interface DevspaceRuntime {
  status: string;
  baseUrl: string;
  statusLastUpdateTime: string;
  statusLastUpdateGeneration: number;
  backendReadiness: { name: string; readiness: boolean }[];
}

/**
 * Exposed devspace information
 */
export interface DevspaceInfo {
  devspaceDisplayName: string;
  devspaceOrigin: string;
  pack: string;
  packDisplayName: string;
  url: string;
  status: string;
  id: string;
  sshEnabled: boolean;
  optionalExtensions: string;
  technicalExtensions: string;
}

/**
 * Full interface for results of call ENV_H2O_URL/ws-manager/api/v1/workspace/${workspaceId}
 */
export interface DevspaceApiResults {
  devSpaceOriginLabel?: string;
  config: {
    id: string;
    username: string;
    labels: {
      controllerID: string;
      "workspace.devx.sap.com/persistence-pvc": string;
      "ws-manager.devx.sap.com/deleted": string;
      "ws-manager.devx.sap.com/displayname": string;
      "ws-manager.devx.sap.com/origin": string;
      "ws-manager.devx.sap.com/providerTenantId": string;
      "ws-manager.devx.sap.com/username": string;
      "ws-manager.devx.sap.com/zoneid": string;
      "ws-manager.devx.sap.com/LCAP"?: string;
    };
    annotations: {
      optionalExtensions: string;
      pack: string;
      packTagline: string;
      technicalExtensions: string;
      "workspace.devx.sap.com/ignoreExtensionRemovalOps"?: string;
      "workspace.devx.sap.com/lastOnlineTime": string;
      "workspace.devx.sap.com/ownerFullName": string;
      "workspace.devx.sap.com/plan": string;
      "workspace.devx.sap.com/ws-controller-processed-gen": string;
      "ws-manager.devx.sap.com/startedAt": string;
    };
    creationtimestamp: string;
    encrypted: boolean;
  };
  runtime: DevspaceRuntime;
  diskusage: {
    used: number;
    free: number;
    iused: number;
    ifree: number;
    timestamp: string;
  };
}

export interface DevSpaceAnnotation {
  pack: string;
  packTagline: string;
  optionalExtensions: string;
  technicalExtensions: string;
}

export interface DevSpaceCreation {
  id: string;
  memoryLimitBytes: number;
  extensions: string[];
  annotations: DevSpaceAnnotation;
  workspacedisplayname: string;
}

export interface DevspaceUpdate {
  Suspended: boolean;
  WorkspaceDisplayName: string;
}
export interface ExtensionPackInfo {
  name: string;
  description: string;
}

export interface DevSpaceExtensionVersion {
  extendedInfo: string;
  version: string;
}

export interface DevSpaceExtension {
  name: string;
  namespace: string;
  mode: string;
  description: string;
  standalone: boolean;
  tagline: string;
  tenantSpecific: boolean;
  thumbnail: string;
  versions: DevSpaceExtensionVersion[];
}
export interface DevSpacePackExtension {
  name: string;
  namespace: string;
  versionRange: string;
}

export interface DevSpacePack {
  name: string;
  tagline: string;
  description: string;
  author: string;
  thumbnail: string;
  extensions: DevSpacePackExtension[];
}
export interface DevSpaceSpec {
  extensions: DevSpaceExtension[];
  packs: DevSpacePack[];
}
export interface ExtensionsInstallationCompletion {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore for private func
  InstalledModules?: any;
  InstallationCompleted: boolean;
}

/**
 * Create flat structure of exposed workspace information from given api call results.
 *
 * @param wsSettings - full workspace  workspace
 * @returns - workspace information
 */
export function flattenDevspaceInfo(ds: DevspaceApiResults): DevspaceInfo {
  return {
    devspaceDisplayName:
      ds?.config?.labels?.["ws-manager.devx.sap.com/displayname"] || "",
    devspaceOrigin:
      ds?.devSpaceOriginLabel ||
      ds?.config?.labels?.["ws-manager.devx.sap.com/LCAP"] ||
      "",
    pack: ds?.config?.annotations?.pack || "",
    packDisplayName: ds?.config?.annotations?.packTagline || "",
    id: ds?.config?.id || "",
    url: ds?.runtime?.baseUrl || "",
    status: ds?.runtime?.status || "",
    sshEnabled: /vscode.+(ide)?ssh/g.test(
      ds?.config?.annotations?.optionalExtensions,
    ),
    optionalExtensions: ds?.config?.annotations?.optionalExtensions || "",
    technicalExtensions: ds?.config?.annotations?.technicalExtensions || "",
  };
}

function serializeDevSpaceSpec(response: AxiosResponse): DevSpaceSpec {
  const extensions: DevSpaceExtension[] = response.data.extensions.map(
    (extension: DevSpaceExtension) => {
      return {
        description: extension.description,
        mode: extension.mode,
        name: extension.name,
        namespace: extension.namespace,
        standalone: extension.standalone,
        tagline: extension.tagline,
        tenantSpecific: extension.tenantSpecific,
        thumbnail: extension.thumbnail,
        versions: extension.versions.map((version) => {
          return {
            extendedInfo: version.extendedInfo,
            version: version.version,
          } as DevSpaceExtensionVersion;
        }),
      } as DevSpaceExtension;
    },
  );

  const packs: DevSpacePack[] = response.data.packs.map(
    (pack: DevSpacePack) => {
      return {
        author: pack.author,
        description: pack.description,
        name: pack.name,
        tagline: pack.tagline,
        thumbnail: pack.thumbnail,
        extensions: pack.extensions.map((extension) => {
          return {
            name: extension.name,
            namespace: extension.namespace,
            versionRange: extension.versionRange,
          } as DevSpacePackExtension;
        }),
      } as DevSpacePack;
    },
  );

  return {
    packs: packs,
    extensions: extensions,
  };
}

export type Method = axiosMethod;

/**
 * Allow axios request to remote landscape
 * @param url - object, url parts of target url
 * @param method - string, request operation
 * @param data - object, (optional) additional data
 * @param jwt - string, (optional) authorization token
 * @returns
 */
export function sendRequest(request: {
  url: { domain: string; path: string };
  method: Method;
  jwt?: string;
  config?: {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
    data?: any;
    headers?: RawAxiosRequestHeaders;
    responseType?: ResponseType;
  } & Record<string, unknown>;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  function makeUrl(landscape: string, pathName: string): string {
    const url = new URL(landscape);
    url.pathname = pathName;
    return url.toString();
  }
  if (request.jwt) {
    request.config = {
      ...request.config,
      headers: {
        ...request.config?.headers,
        "x-approuter-authorization": `bearer ${request.jwt}`,
      },
    };
  }
  return axios({
    method: request.method,
    url: makeUrl(request.url.domain, request.url.path),
    ...request.config,
  });
}

function sendDevspaceRequest(request: {
  url: { domain: string; path: string };
  method: Method;
  jwt?: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
  data?: any;
  headers?: RawAxiosRequestHeaders;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendRequest({
    url: request.url,
    method: request.method,
    jwt: request.jwt,
    config: {
      data: request.data,
      headers: {
        ...request.headers,
        "User-Agent": "Bas",
      },
    },
  });
}

export function getDevSpace(opts: {
  landscapeUrl: string;
  jwt: string;
  wsId: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "GET",
    url: {
      domain: opts.landscapeUrl,
      path: `ws-manager/api/v1/workspace/${opts.wsId}`,
    },
  });
}

export function getDevSpaces(opts: {
  landscape: string;
  jwt: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "GET",
    url: { domain: opts.landscape, path: `ws-manager/api/v1/workspace` },
  });
}

export function deleteDevSpace(opts: {
  landscape: string;
  wsId: string;
  jwt: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "DELETE",
    url: {
      domain: opts.landscape,
      path: `ws-manager/api/v1/workspace/${opts.wsId}`,
    },
  });
}

export function getDevSpacesSpec(opts: {
  landscape: string;
  jwt: string;
}): Promise<DevSpaceSpec | undefined> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "GET",
    url: { domain: opts.landscape, path: `ws-manager/api/v1/extension/rel` },
  }).then((response) => serializeDevSpaceSpec(response));
}

export function getExtensionPacks(opts: {
  landscape: string;
  jwt: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "GET",
    url: { domain: opts.landscape, path: `ws-manager/api/v1/extension/all` },
  });
}

export function createDevSpace(opts: {
  landscape: string;
  jwt: string;
  data: DevSpaceCreation;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "POST",
    url: { domain: opts.landscape, path: `ws-manager/api/v1/workspace` },
    data: opts.data,
  });
}

export function updateDevSpace(opts: {
  landscape: string;
  wsId: string;
  jwt: string;
  data: DevspaceUpdate;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
}): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequest({
    jwt: opts.jwt,
    method: "PUT",
    url: {
      domain: opts.landscape,
      path: `ws-manager/api/v1/workspace/${opts.wsId}`,
    },
    data: opts.data,
  });
}

export function getKey(
  landscapeUrl: string,
  jwt: string,
  wsId: string,
): Promise<string> {
  return getDevSpace({ landscapeUrl, jwt, wsId })
    .then((res) => {
      return res.data.runtime.url.startup;
    })
    .then((startupUrl: string) => {
      return sendRequest({
        config: {
          headers: {
            Authorization: `bearer ${jwt}`,
          },
        },
        jwt,
        method: "GET",
        url: { domain: startupUrl, path: `key` },
      }).then((response) => response.data as string);
    });
}

export function getTenantMetadata(
  opts: {
    landscape: string;
    jwt: string;
  },
  // xaccessStub is a dependency injection for testing
  sendDevspaceRequestStub = sendDevspaceRequest,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore warning
): Promise<AxiosResponse<any, any>> {
  return sendDevspaceRequestStub({
    jwt: opts.jwt,
    method: "GET",
    url: {
      domain: opts.landscape,
      path: `ws-manager/api/v1/metadata`,
    },
  });
}

/**
 * Checks if generators installation JSON file is created and it can be parsed as plain object
 * @returns - an object of type ExtensionsInstallationCompletion with a field InstallationCompleted indicates generators installation result.
 * @throws - an error if the extensionsInstallationCompletion.json is not found under /extbin/extensionsInstallationCompletion
 */
export async function readExtensionsInstallationCompletionFile(): Promise<ExtensionsInstallationCompletion> {
  const filePath =
    "/extbin/extensionsInstallationCompletion/extensionsInstallationCompletion.json";
  try {
    const fileContent = await readJson(filePath);
    if (isPlainObject(fileContent)) {
      return fileContent;
    }
    return { InstallationCompleted: false };
  } catch (e) {
    throw new Error(`The ${filePath} file is missing.`);
  }
}

function getJwtExpiration(jwt: string): number {
  const decodedJwt = jwtDecode(jwt);
  return (
    (decodedJwt.exp ??
      /* istanbul ignore next: test's dummy jwt always has 'exp' attribute */ 0) *
    1000
  );
}

export function isJwtExpired(jwt: string): boolean {
  return Date.now() >= getJwtExpiration(jwt);
}

export function timeUntilJwtExpires(jwt: string): number {
  return getJwtExpiration(jwt) - Date.now();
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any -- this is a vscode type
let vscode: any;

export async function verifyDefaultLandscape(): Promise<{
  jwt: string;
  landscape: string;
}> {
  /* istanbul ignore else */
  if (!vscode) {
    try {
      vscode = await import("vscode");
    } catch (error) {
      throw new Error(
        `This functionanlity can only be used from within the vscode extension context: ${error}`,
      );
    }
  }

  let defaultLandscape: string = await vscode.commands.executeCommand(
    "app-studio-toolkit.devspace-manager.get-default-landscape",
  );
  if (!defaultLandscape) {
    await vscode.commands.executeCommand(
      "app-studio-toolkit.devspace-manager.landscape.default-on",
    );
    defaultLandscape = await vscode.commands.executeCommand(
      "app-studio-toolkit.devspace-manager.get-default-landscape",
    );
  }

  if (!defaultLandscape) {
    throw new Error("There is no default landscape set");
  }
  // landscape is set - verify if user is logged in
  let session = await vscode.authentication.getSession("BASLandscapePAT", [
    defaultLandscape,
  ]);

  // if not logged in or token expired - trigger log in
  if (!session || isJwtExpired(session.accessToken)) {
    session = await vscode.authentication.getSession(
      "BASLandscapePAT", // BAS Authentication Provider ID
      [defaultLandscape],
      { forceNewSession: true },
    );
  }

  return { jwt: session.accessToken, landscape: defaultLandscape };
}
