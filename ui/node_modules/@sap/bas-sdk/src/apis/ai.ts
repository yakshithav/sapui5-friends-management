import {
  Method,
  sendRequest,
  verifyDefaultLandscape,
} from "../utils/devspace-utils";
import { getTenantMetadata } from "./get-devspace";
import { isAppStudio } from "./is-app-studio";
import { compact, join, split } from "lodash";
import type { ResponseType } from "axios";

/**
 * This function can only be used from within the vscode extension context
 */
export async function sendAiRequest(request: {
  path: string;
  method: string;
  config?: {
    data?: unknown;
    headers?: Record<string, string>;
    responseType?: ResponseType;
  } & Record<string, unknown>;
}): Promise<unknown> {
  const opts: { url: { domain: string; path: string }; jwt?: string } = {
    url: { domain: "", path: "" },
  };
  let domain: string,
    proxy = "";
  if (!(await isAppStudio())) {
    // redirect to llm proxy in non-BAS environment with applying jwt
    const { jwt, landscape } = await verifyDefaultLandscape();
    const { host } = await getTenantMetadata({ landscape, jwt });

    domain = `https://${host}`;
    proxy = `secure-outbound-connectivity`;
    opts.jwt = jwt;
  } else {
    // redirect to H2O in BAS environment
    domain = process.env.H2O_URL ?? "";
  }
  opts.url = {
    domain,
    path: join(compact(split(`${proxy}/llm/${request.path}`, "/")), "/"),
  };
  // send request
  return sendRequest({
    config: {
      ...request.config,
      headers: {
        ...request.config?.headers,
        "AI-Resource-Group":
          request.config?.headers?.["AI-Resource-Group"] ?? "default",
      },
    },
    ...opts,
    method: request.method as Method,
  });
}
