import { DestinationListInfo } from "../utils/destinations";
import { getDestinations } from "./get-destinations";
import { getCfDomain } from "../utils/cf-utils";
import { hrtt } from "../../api";

export function createHrttHelper(): hrtt.HrttHelper {
  return new HrttHelperImpl();
}
class HrttHelperImpl {
  /**
   * load the destination only once and if found hrtt-host in the destination we keep it in the cache due to the perfromance reason
   * in order to refresh the data to be sync with the destination the user should create a new instance of HrttHelper
   */
  private isGetDestinationsCalled = false;
  private hrttDest: DestinationListInfo | undefined = undefined;

  private async getHrttDestination(): Promise<DestinationListInfo | undefined> {
    try {
      if (!this.isGetDestinationsCalled) {
        const destinations = await getDestinations();
        this.hrttDest = destinations?.find((dest) => dest.name === "hrtt-host");
        this.isGetDestinationsCalled = true;
      }
    } catch (e) {
      //do nothing, ignore from the error
    }
    return this.hrttDest;
  }

  public async getUrl(cfEndPoint: string): Promise<string> {
    //The the below are the fallback to return the HRTT_URL
    return (
      (await this.getHrttDestination())?.host || //Use hrtt-host destination if it exists - this is only defined in hrtt development scenarios for testing different hrtt applications
      process.env.HRTT_URL || //Use HRTT_URL env variable - this is only defined in private cloud environments where we don't know how to calculate the hrtt application URL
      (await this.doGetHrttUrl(cfEndPoint)) //Get the hrtt application URL in the endpoint domain - this is the common use case, where the endpoint is a known host
    );
  }

  private async doGetHrttUrl(cfEndPoint: string) {
    //extract CF domain from CF url without https://api.cf.
    cfEndPoint = getCfDomain(cfEndPoint);
    const pointDelimeterPos = cfEndPoint.indexOf(".");
    let ext = "";

    if (pointDelimeterPos === -1) {
      throw new Error(
        `Invalid URL, could not find "." in CF domain '${cfEndPoint}' url`,
      );
    }
    const dashDelimeterPos = cfEndPoint.indexOf("-");
    if (dashDelimeterPos !== -1 && dashDelimeterPos < pointDelimeterPos) {
      ext = cfEndPoint.substring(dashDelimeterPos, pointDelimeterPos);
      cfEndPoint =
        cfEndPoint.slice(0, dashDelimeterPos) +
        cfEndPoint.slice(pointDelimeterPos);
    }
    const prefix = "https://hana-cockpit";
    const cfapps = ".cfapps.";
    const domain = `${prefix}${ext}${cfapps}${cfEndPoint}`;
    return domain;
  }
}
