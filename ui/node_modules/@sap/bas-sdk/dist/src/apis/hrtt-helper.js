"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHrttHelper = void 0;
const get_destinations_1 = require("./get-destinations");
const cf_utils_1 = require("../utils/cf-utils");
function createHrttHelper() {
    return new HrttHelperImpl();
}
exports.createHrttHelper = createHrttHelper;
class HrttHelperImpl {
    constructor() {
        /**
         * load the destination only once and if found hrtt-host in the destination we keep it in the cache due to the perfromance reason
         * in order to refresh the data to be sync with the destination the user should create a new instance of HrttHelper
         */
        this.isGetDestinationsCalled = false;
        this.hrttDest = undefined;
    }
    async getHrttDestination() {
        try {
            if (!this.isGetDestinationsCalled) {
                const destinations = await (0, get_destinations_1.getDestinations)();
                this.hrttDest = destinations === null || destinations === void 0 ? void 0 : destinations.find((dest) => dest.name === "hrtt-host");
                this.isGetDestinationsCalled = true;
            }
        }
        catch (e) {
            //do nothing, ignore from the error
        }
        return this.hrttDest;
    }
    async getUrl(cfEndPoint) {
        var _a;
        //The the below are the fallback to return the HRTT_URL
        return (((_a = (await this.getHrttDestination())) === null || _a === void 0 ? void 0 : _a.host) || //Use hrtt-host destination if it exists - this is only defined in hrtt development scenarios for testing different hrtt applications
            process.env.HRTT_URL || //Use HRTT_URL env variable - this is only defined in private cloud environments where we don't know how to calculate the hrtt application URL
            (await this.doGetHrttUrl(cfEndPoint)) //Get the hrtt application URL in the endpoint domain - this is the common use case, where the endpoint is a known host
        );
    }
    async doGetHrttUrl(cfEndPoint) {
        //extract CF domain from CF url without https://api.cf.
        cfEndPoint = (0, cf_utils_1.getCfDomain)(cfEndPoint);
        const pointDelimeterPos = cfEndPoint.indexOf(".");
        let ext = "";
        if (pointDelimeterPos === -1) {
            throw new Error(`Invalid URL, could not find "." in CF domain '${cfEndPoint}' url`);
        }
        const dashDelimeterPos = cfEndPoint.indexOf("-");
        if (dashDelimeterPos !== -1 && dashDelimeterPos < pointDelimeterPos) {
            ext = cfEndPoint.substring(dashDelimeterPos, pointDelimeterPos);
            cfEndPoint =
                cfEndPoint.slice(0, dashDelimeterPos) +
                    cfEndPoint.slice(pointDelimeterPos);
        }
        const prefix = "https://hana-cockpit";
        const cfapps = ".cfapps.";
        const domain = `${prefix}${ext}${cfapps}${cfEndPoint}`;
        return domain;
    }
}
//# sourceMappingURL=hrtt-helper.js.map