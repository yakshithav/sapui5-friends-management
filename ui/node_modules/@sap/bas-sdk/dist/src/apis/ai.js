"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAiRequest = void 0;
const devspace_utils_1 = require("../utils/devspace-utils");
const get_devspace_1 = require("./get-devspace");
const is_app_studio_1 = require("./is-app-studio");
const lodash_1 = require("lodash");
/**
 * This function can only be used from within the vscode extension context
 */
async function sendAiRequest(request) {
    var _a, _b, _c, _d, _e;
    const opts = {
        url: { domain: "", path: "" },
    };
    let domain, proxy = "";
    if (!(await (0, is_app_studio_1.isAppStudio)())) {
        // redirect to llm proxy in non-BAS environment with applying jwt
        const { jwt, landscape } = await (0, devspace_utils_1.verifyDefaultLandscape)();
        const { host } = await (0, get_devspace_1.getTenantMetadata)({ landscape, jwt });
        domain = `https://${host}`;
        proxy = `secure-outbound-connectivity`;
        opts.jwt = jwt;
    }
    else {
        // redirect to H2O in BAS environment
        domain = (_a = process.env.H2O_URL) !== null && _a !== void 0 ? _a : "";
    }
    opts.url = {
        domain,
        path: (0, lodash_1.join)((0, lodash_1.compact)((0, lodash_1.split)(`${proxy}/llm/${request.path}`, "/")), "/"),
    };
    // send request
    return (0, devspace_utils_1.sendRequest)(Object.assign(Object.assign({ config: Object.assign(Object.assign({}, request.config), { headers: Object.assign(Object.assign({}, (_b = request.config) === null || _b === void 0 ? void 0 : _b.headers), { "AI-Resource-Group": (_e = (_d = (_c = request.config) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d["AI-Resource-Group"]) !== null && _e !== void 0 ? _e : "default" }) }) }, opts), { method: request.method }));
}
exports.sendAiRequest = sendAiRequest;
//# sourceMappingURL=ai.js.map