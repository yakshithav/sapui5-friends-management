"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateAppURLByPort = exports.getAppExternalUri = exports.getBasMode = exports.getTenantMetadata = exports.isBuild = exports.isBuildCode = exports.updateDevSpace = exports.createDevSpace = exports.getExtensionPacks = exports.getDevSpacesSpec = exports.deleteDevSpace = exports.getDevSpaces = exports.getDevspaceInfo = exports.BUILD_CODE_PLAN = exports.BAS_PLAN = void 0;
const lodash_1 = require("lodash");
const url_join_1 = __importDefault(require("url-join"));
const core_utils_1 = require("../utils/core-utils");
const destinations_1 = require("../utils/destinations");
const devUtils = __importStar(require("../utils/devspace-utils"));
const url_1 = require("url");
exports.BAS_PLAN = "TENANT_PLAN";
exports.BUILD_CODE_PLAN = "BUILD_CODE_PLAN";
const BUILD_CODE_FREE = "build-code-free";
const FREE = "free";
const STANDARD = "standard";
const TRIAL = "trial";
const BUILD_CODE = "build-code";
const BUILD_CODE_STANDARD = "buildCodeStandard";
const BUILD_CODE_FREE_VAL = "buildCodeFree";
const BUILD_STANDARD = "buildStandard";
const BUILD_DEFAULT = "build-default";
/**
 * Return information about the current workspace.
 *
 * @returns - devspace information
 */
function getDevspaceInfo(options) {
    if (!options) {
        // assuming runs in BAS
        options = (0, lodash_1.assign)({}, { landscapeUrl: (0, core_utils_1.getEnvValue)(destinations_1.ENV_H2O_URL) }, { wsId: (0, core_utils_1.getEnvValue)("WORKSPACE_ID").replace("workspaces-", "") }, { jwt: "" });
    }
    return devUtils
        .getDevSpace(options)
        .then((response) => {
        return devUtils.flattenDevspaceInfo(response.data);
    })
        .catch((e) => {
        const errorDetail = e instanceof Error ? `Error message: ${e.message}.` : "";
        throw new Error(`Couldn't retrieve devspace information from the (${(0, url_join_1.default)(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- ignore eslint warn
        options.landscapeUrl, 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- ignore eslint warn
        `/ws-manager/api/v1/workspace/${options.wsId}`)}) URL. ${errorDetail}`);
    });
}
exports.getDevspaceInfo = getDevspaceInfo;
function getDevSpaces(landscapeUrl, jwt) {
    return devUtils
        .getDevSpaces({ jwt, landscape: landscapeUrl })
        .then((response) => {
        return response.data.map((ds) => devUtils.flattenDevspaceInfo(ds));
    });
}
exports.getDevSpaces = getDevSpaces;
function deleteDevSpace(landscapeUrl, jwt, wsId) {
    return (devUtils
        .deleteDevSpace({ landscape: landscapeUrl, wsId, jwt })
        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- suppress eslint warning
        .then((_) => undefined));
}
exports.deleteDevSpace = deleteDevSpace;
function getDevSpacesSpec(landscapeUrl, jwt) {
    return devUtils.getDevSpacesSpec({ landscape: landscapeUrl, jwt });
}
exports.getDevSpacesSpec = getDevSpacesSpec;
function getExtensionPacks(landscapeUrl, jwt) {
    return devUtils
        .getExtensionPacks({ jwt, landscape: landscapeUrl })
        .then((response) => {
        return response.data.packs.map((ep) => {
            return {
                name: ep.name,
                description: ep.description,
            };
        });
    });
}
exports.getExtensionPacks = getExtensionPacks;
function createDevSpace(landscapeUrl, jwt, data) {
    return (devUtils
        .createDevSpace({ landscape: landscapeUrl, data, jwt })
        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- suppress eslint warn
        .then((_) => undefined));
}
exports.createDevSpace = createDevSpace;
function updateDevSpace(landscapeUrl, jwt, wsId, data) {
    return (devUtils
        .updateDevSpace({ landscape: landscapeUrl, wsId, data, jwt })
        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- suppress eslint warn
        .then((_) => undefined));
}
exports.updateDevSpace = updateDevSpace;
function isBuildCode(opts) {
    var _a, _b;
    let buildCodePlan = (_a = opts === null || opts === void 0 ? void 0 : opts.buildCodePlan) !== null && _a !== void 0 ? _a : process.env[exports.BUILD_CODE_PLAN];
    let basPlan = (_b = opts === null || opts === void 0 ? void 0 : opts.wsPlan) !== null && _b !== void 0 ? _b : process.env[exports.BAS_PLAN];
    basPlan = basPlan === null || basPlan === void 0 ? void 0 : basPlan.toLowerCase().trim();
    buildCodePlan = buildCodePlan === null || buildCodePlan === void 0 ? void 0 : buildCodePlan.toLowerCase().trim();
    return (((basPlan === BUILD_CODE_FREE || basPlan === TRIAL) &&
        buildCodePlan === FREE) ||
        (basPlan === BUILD_CODE && buildCodePlan === STANDARD));
}
exports.isBuildCode = isBuildCode;
function isBuild(opts) {
    return isBuildCode(opts) || getBasMode(opts) === BUILD_STANDARD;
}
exports.isBuild = isBuild;
async function getTenantMetadata(tenant) {
    var _a, _b, _c;
    const { data = {} } = await devUtils.getTenantMetadata(tenant);
    return {
        buildCodePlan: (_a = data.buildCodePlan) !== null && _a !== void 0 ? _a : "",
        wsPlan: (_b = data.wsPlan) !== null && _b !== void 0 ? _b : "",
        host: (_c = data.host) !== null && _c !== void 0 ? _c : "",
    };
}
exports.getTenantMetadata = getTenantMetadata;
function getBasMode(opts) {
    var _a, _b;
    const buildCodePlan = (_a = opts === null || opts === void 0 ? void 0 : opts.buildCodePlan) !== null && _a !== void 0 ? _a : process.env[exports.BUILD_CODE_PLAN];
    const basPlan = (_b = opts === null || opts === void 0 ? void 0 : opts.wsPlan) !== null && _b !== void 0 ? _b : process.env[exports.BAS_PLAN];
    if (basPlan === BUILD_DEFAULT) {
        return BUILD_STANDARD;
    }
    if (basPlan === FREE) {
        return FREE;
    }
    if (basPlan === TRIAL || basPlan === BUILD_CODE_FREE) {
        if (buildCodePlan === FREE) {
            return BUILD_CODE_FREE_VAL;
        }
        return FREE;
    }
    if (basPlan === BUILD_CODE) {
        if (buildCodePlan === STANDARD) {
            return BUILD_CODE_STANDARD;
        }
    }
    return STANDARD;
}
exports.getBasMode = getBasMode;
/**
 * Retrieves the app-external-uri-from-ds based on an internal URI.
 * @param internalUri The internal URI to extract information from.
 * @returns The final URL with the app-external-uri-from-ds encoded.
 */
function getAppExternalUri(internalUri) {
    if (!internalUri) {
        throw new Error("Internal URI is not provided.");
    }
    // Extract port and path from the internal URI
    const { port, path } = extractPortAndPath(internalUri);
    // Calculate app URL based on port
    const appUrl = calculateAppURLByPort(port);
    // Concatenate appUrl with path
    const appExternalUrl = appUrl + path;
    // Encode the appExternalUrl
    const encodedAppExternalUrl = encodeURIComponent(appExternalUrl);
    // Construct final URL
    const finalUrl = `${(0, core_utils_1.getEnvValue)(destinations_1.ENV_H2O_URL)}/login?e=${encodedAppExternalUrl}`;
    return finalUrl;
}
exports.getAppExternalUri = getAppExternalUri;
/**
 * Extracts the port and path from an internal URI.
 * @param internalUri The internal URI.
 * @returns An object containing the port and path.
 */
function extractPortAndPath(internalUri) {
    const urlParts = new url_1.URL(internalUri);
    const port = parseInt(urlParts.port || "80"); // Default port to 80 if not provided
    // Combine pathname, search, and hash without the initial slash
    const path = urlParts.pathname.slice(1) + urlParts.search + urlParts.hash;
    return { port, path };
}
/* Get workspace URL - should be calculated in the Server
 */
function getWorkspaceUrl() {
    return process.env.WS_BASE_URL || "http://localhost:3000/";
}
function isVSCodeHybridEnv() {
    return process.env.VSCODE_HYBRID === "true";
}
/**  Calculates application URL according to WS_BASE_URL and port
 * @param port
 * @scheme http or https
 * Returns the calculated url ending with '/'
 */
function calculateAppURLByPort(port, scheme = "http") {
    let url = "";
    if (isVSCodeHybridEnv()) {
        return `${scheme}://localhost:${port}`;
    }
    try {
        const delimitar = ".";
        const wsUrlStr = getWorkspaceUrl();
        const wsUrl = new url_1.URL(wsUrlStr);
        // The URL format is port3000-ws-9qncv.ci10.int.applicationstudio.cloud.sap
        // assume host-based pattern in ws url, as: https://mytenant-wsid/
        // and add port or portssl(when https) prefix to create app url, as: https://port8997-mytenant-wsid/
        const subdomainList = wsUrl.host.split(delimitar);
        const protocolScheme = scheme === "https" ? "portssl" : "port";
        const appSubdomain = `${protocolScheme}${port}-${subdomainList[0]}`;
        let appHost = appSubdomain;
        for (let i = 1; i < subdomainList.length; i++) {
            appHost = appHost + delimitar + subdomainList[i];
        }
        url = `${wsUrl.protocol}//${appHost}/`;
    }
    catch (e) {
        //we will get here in case of missing protocol or host - new URL throws TypeError [ERR_INVALID_URL]
        url = "";
    }
    return url;
}
exports.calculateAppURLByPort = calculateAppURLByPort;
//# sourceMappingURL=get-devspace.js.map