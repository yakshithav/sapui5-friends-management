"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyDefaultLandscape = exports.timeUntilJwtExpires = exports.isJwtExpired = exports.readExtensionsInstallationCompletionFile = exports.getTenantMetadata = exports.getKey = exports.updateDevSpace = exports.createDevSpace = exports.getExtensionPacks = exports.getDevSpacesSpec = exports.deleteDevSpace = exports.getDevSpaces = exports.getDevSpace = exports.sendRequest = exports.flattenDevspaceInfo = exports.PackName = exports.DevSpaceStatus = void 0;
const axios_1 = __importDefault(require("axios"));
const lodash_1 = require("lodash");
const fs_extra_1 = require("fs-extra");
const jwt_decode_1 = require("jwt-decode");
var DevSpaceStatus;
(function (DevSpaceStatus) {
    DevSpaceStatus["RUNNING"] = "RUNNING";
    DevSpaceStatus["STARTING"] = "STARTING";
    DevSpaceStatus["STOPPED"] = "STOPPED";
    DevSpaceStatus["STOPPING"] = "STOPPING";
    DevSpaceStatus["ERROR"] = "ERROR";
    DevSpaceStatus["SAFE_MODE"] = "SAFE_MODE";
})(DevSpaceStatus || (exports.DevSpaceStatus = DevSpaceStatus = {}));
var PackName;
(function (PackName) {
    PackName["FIORI"] = "SAP Fiori";
    PackName["CAP"] = "SAP Cloud Business Application";
    PackName["HANA"] = "SAP Hana";
    PackName["SME"] = "SAP SME Business Application";
    PackName["MOBILE"] = "SAP Mobile Services";
    PackName["BASIC"] = "Basic";
    PackName["LCAP"] = "LCAP";
})(PackName || (exports.PackName = PackName = {}));
/**
 * Create flat structure of exposed workspace information from given api call results.
 *
 * @param wsSettings - full workspace  workspace
 * @returns - workspace information
 */
function flattenDevspaceInfo(ds) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    return {
        devspaceDisplayName: ((_b = (_a = ds === null || ds === void 0 ? void 0 : ds.config) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b["ws-manager.devx.sap.com/displayname"]) || "",
        devspaceOrigin: (ds === null || ds === void 0 ? void 0 : ds.devSpaceOriginLabel) ||
            ((_d = (_c = ds === null || ds === void 0 ? void 0 : ds.config) === null || _c === void 0 ? void 0 : _c.labels) === null || _d === void 0 ? void 0 : _d["ws-manager.devx.sap.com/LCAP"]) ||
            "",
        pack: ((_f = (_e = ds === null || ds === void 0 ? void 0 : ds.config) === null || _e === void 0 ? void 0 : _e.annotations) === null || _f === void 0 ? void 0 : _f.pack) || "",
        packDisplayName: ((_h = (_g = ds === null || ds === void 0 ? void 0 : ds.config) === null || _g === void 0 ? void 0 : _g.annotations) === null || _h === void 0 ? void 0 : _h.packTagline) || "",
        id: ((_j = ds === null || ds === void 0 ? void 0 : ds.config) === null || _j === void 0 ? void 0 : _j.id) || "",
        url: ((_k = ds === null || ds === void 0 ? void 0 : ds.runtime) === null || _k === void 0 ? void 0 : _k.baseUrl) || "",
        status: ((_l = ds === null || ds === void 0 ? void 0 : ds.runtime) === null || _l === void 0 ? void 0 : _l.status) || "",
        sshEnabled: /vscode.+(ide)?ssh/g.test((_o = (_m = ds === null || ds === void 0 ? void 0 : ds.config) === null || _m === void 0 ? void 0 : _m.annotations) === null || _o === void 0 ? void 0 : _o.optionalExtensions),
        optionalExtensions: ((_q = (_p = ds === null || ds === void 0 ? void 0 : ds.config) === null || _p === void 0 ? void 0 : _p.annotations) === null || _q === void 0 ? void 0 : _q.optionalExtensions) || "",
        technicalExtensions: ((_s = (_r = ds === null || ds === void 0 ? void 0 : ds.config) === null || _r === void 0 ? void 0 : _r.annotations) === null || _s === void 0 ? void 0 : _s.technicalExtensions) || "",
    };
}
exports.flattenDevspaceInfo = flattenDevspaceInfo;
function serializeDevSpaceSpec(response) {
    const extensions = response.data.extensions.map((extension) => {
        return {
            description: extension.description,
            mode: extension.mode,
            name: extension.name,
            namespace: extension.namespace,
            standalone: extension.standalone,
            tagline: extension.tagline,
            tenantSpecific: extension.tenantSpecific,
            thumbnail: extension.thumbnail,
            versions: extension.versions.map((version) => {
                return {
                    extendedInfo: version.extendedInfo,
                    version: version.version,
                };
            }),
        };
    });
    const packs = response.data.packs.map((pack) => {
        return {
            author: pack.author,
            description: pack.description,
            name: pack.name,
            tagline: pack.tagline,
            thumbnail: pack.thumbnail,
            extensions: pack.extensions.map((extension) => {
                return {
                    name: extension.name,
                    namespace: extension.namespace,
                    versionRange: extension.versionRange,
                };
            }),
        };
    });
    return {
        packs: packs,
        extensions: extensions,
    };
}
/**
 * Allow axios request to remote landscape
 * @param url - object, url parts of target url
 * @param method - string, request operation
 * @param data - object, (optional) additional data
 * @param jwt - string, (optional) authorization token
 * @returns
 */
function sendRequest(request) {
    var _a;
    function makeUrl(landscape, pathName) {
        const url = new URL(landscape);
        url.pathname = pathName;
        return url.toString();
    }
    if (request.jwt) {
        request.config = Object.assign(Object.assign({}, request.config), { headers: Object.assign(Object.assign({}, (_a = request.config) === null || _a === void 0 ? void 0 : _a.headers), { "x-approuter-authorization": `bearer ${request.jwt}` }) });
    }
    return (0, axios_1.default)(Object.assign({ method: request.method, url: makeUrl(request.url.domain, request.url.path) }, request.config));
}
exports.sendRequest = sendRequest;
function sendDevspaceRequest(request) {
    return sendRequest({
        url: request.url,
        method: request.method,
        jwt: request.jwt,
        config: {
            data: request.data,
            headers: Object.assign(Object.assign({}, request.headers), { "User-Agent": "Bas" }),
        },
    });
}
function getDevSpace(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "GET",
        url: {
            domain: opts.landscapeUrl,
            path: `ws-manager/api/v1/workspace/${opts.wsId}`,
        },
    });
}
exports.getDevSpace = getDevSpace;
function getDevSpaces(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "GET",
        url: { domain: opts.landscape, path: `ws-manager/api/v1/workspace` },
    });
}
exports.getDevSpaces = getDevSpaces;
function deleteDevSpace(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "DELETE",
        url: {
            domain: opts.landscape,
            path: `ws-manager/api/v1/workspace/${opts.wsId}`,
        },
    });
}
exports.deleteDevSpace = deleteDevSpace;
function getDevSpacesSpec(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "GET",
        url: { domain: opts.landscape, path: `ws-manager/api/v1/extension/rel` },
    }).then((response) => serializeDevSpaceSpec(response));
}
exports.getDevSpacesSpec = getDevSpacesSpec;
function getExtensionPacks(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "GET",
        url: { domain: opts.landscape, path: `ws-manager/api/v1/extension/all` },
    });
}
exports.getExtensionPacks = getExtensionPacks;
function createDevSpace(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "POST",
        url: { domain: opts.landscape, path: `ws-manager/api/v1/workspace` },
        data: opts.data,
    });
}
exports.createDevSpace = createDevSpace;
function updateDevSpace(opts) {
    return sendDevspaceRequest({
        jwt: opts.jwt,
        method: "PUT",
        url: {
            domain: opts.landscape,
            path: `ws-manager/api/v1/workspace/${opts.wsId}`,
        },
        data: opts.data,
    });
}
exports.updateDevSpace = updateDevSpace;
function getKey(landscapeUrl, jwt, wsId) {
    return getDevSpace({ landscapeUrl, jwt, wsId })
        .then((res) => {
        return res.data.runtime.url.startup;
    })
        .then((startupUrl) => {
        return sendRequest({
            config: {
                headers: {
                    Authorization: `bearer ${jwt}`,
                },
            },
            jwt,
            method: "GET",
            url: { domain: startupUrl, path: `key` },
        }).then((response) => response.data);
    });
}
exports.getKey = getKey;
function getTenantMetadata(opts, 
// xaccessStub is a dependency injection for testing
sendDevspaceRequestStub = sendDevspaceRequest) {
    return sendDevspaceRequestStub({
        jwt: opts.jwt,
        method: "GET",
        url: {
            domain: opts.landscape,
            path: `ws-manager/api/v1/metadata`,
        },
    });
}
exports.getTenantMetadata = getTenantMetadata;
/**
 * Checks if generators installation JSON file is created and it can be parsed as plain object
 * @returns - an object of type ExtensionsInstallationCompletion with a field InstallationCompleted indicates generators installation result.
 * @throws - an error if the extensionsInstallationCompletion.json is not found under /extbin/extensionsInstallationCompletion
 */
async function readExtensionsInstallationCompletionFile() {
    const filePath = "/extbin/extensionsInstallationCompletion/extensionsInstallationCompletion.json";
    try {
        const fileContent = await (0, fs_extra_1.readJson)(filePath);
        if ((0, lodash_1.isPlainObject)(fileContent)) {
            return fileContent;
        }
        return { InstallationCompleted: false };
    }
    catch (e) {
        throw new Error(`The ${filePath} file is missing.`);
    }
}
exports.readExtensionsInstallationCompletionFile = readExtensionsInstallationCompletionFile;
function getJwtExpiration(jwt) {
    var _a;
    const decodedJwt = (0, jwt_decode_1.jwtDecode)(jwt);
    return (((_a = decodedJwt.exp) !== null && _a !== void 0 ? _a : 
    /* istanbul ignore next: test's dummy jwt always has 'exp' attribute */ 0) *
        1000);
}
function isJwtExpired(jwt) {
    return Date.now() >= getJwtExpiration(jwt);
}
exports.isJwtExpired = isJwtExpired;
function timeUntilJwtExpires(jwt) {
    return getJwtExpiration(jwt) - Date.now();
}
exports.timeUntilJwtExpires = timeUntilJwtExpires;
// eslint-disable-next-line @typescript-eslint/no-explicit-any -- this is a vscode type
let vscode;
async function verifyDefaultLandscape() {
    /* istanbul ignore else */
    if (!vscode) {
        try {
            vscode = await Promise.resolve().then(() => __importStar(require("vscode")));
        }
        catch (error) {
            throw new Error(`This functionanlity can only be used from within the vscode extension context: ${error}`);
        }
    }
    let defaultLandscape = await vscode.commands.executeCommand("app-studio-toolkit.devspace-manager.get-default-landscape");
    if (!defaultLandscape) {
        await vscode.commands.executeCommand("app-studio-toolkit.devspace-manager.landscape.default-on");
        defaultLandscape = await vscode.commands.executeCommand("app-studio-toolkit.devspace-manager.get-default-landscape");
    }
    if (!defaultLandscape) {
        throw new Error("There is no default landscape set");
    }
    // landscape is set - verify if user is logged in
    let session = await vscode.authentication.getSession("BASLandscapePAT", [
        defaultLandscape,
    ]);
    // if not logged in or token expired - trigger log in
    if (!session || isJwtExpired(session.accessToken)) {
        session = await vscode.authentication.getSession("BASLandscapePAT", // BAS Authentication Provider ID
        [defaultLandscape], { forceNewSession: true });
    }
    return { jwt: session.accessToken, landscape: defaultLandscape };
}
exports.verifyDefaultLandscape = verifyDefaultLandscape;
//# sourceMappingURL=devspace-utils.js.map