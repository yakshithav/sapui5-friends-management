import { AxiosResponse, RawAxiosRequestHeaders, Method as axiosMethod, ResponseType } from "axios";
export declare enum DevSpaceStatus {
    RUNNING = "RUNNING",
    STARTING = "STARTING",
    STOPPED = "STOPPED",
    STOPPING = "STOPPING",
    ERROR = "ERROR",
    SAFE_MODE = "SAFE_MODE"
}
export declare enum PackName {
    FIORI = "SAP Fiori",
    CAP = "SAP Cloud Business Application",
    HANA = "SAP Hana",
    SME = "SAP SME Business Application",
    MOBILE = "SAP Mobile Services",
    BASIC = "Basic",
    LCAP = "LCAP"
}
interface DevspaceRuntime {
    status: string;
    baseUrl: string;
    statusLastUpdateTime: string;
    statusLastUpdateGeneration: number;
    backendReadiness: {
        name: string;
        readiness: boolean;
    }[];
}
/**
 * Exposed devspace information
 */
export interface DevspaceInfo {
    devspaceDisplayName: string;
    devspaceOrigin: string;
    pack: string;
    packDisplayName: string;
    url: string;
    status: string;
    id: string;
    sshEnabled: boolean;
    optionalExtensions: string;
    technicalExtensions: string;
}
/**
 * Full interface for results of call ENV_H2O_URL/ws-manager/api/v1/workspace/${workspaceId}
 */
export interface DevspaceApiResults {
    devSpaceOriginLabel?: string;
    config: {
        id: string;
        username: string;
        labels: {
            controllerID: string;
            "workspace.devx.sap.com/persistence-pvc": string;
            "ws-manager.devx.sap.com/deleted": string;
            "ws-manager.devx.sap.com/displayname": string;
            "ws-manager.devx.sap.com/origin": string;
            "ws-manager.devx.sap.com/providerTenantId": string;
            "ws-manager.devx.sap.com/username": string;
            "ws-manager.devx.sap.com/zoneid": string;
            "ws-manager.devx.sap.com/LCAP"?: string;
        };
        annotations: {
            optionalExtensions: string;
            pack: string;
            packTagline: string;
            technicalExtensions: string;
            "workspace.devx.sap.com/ignoreExtensionRemovalOps"?: string;
            "workspace.devx.sap.com/lastOnlineTime": string;
            "workspace.devx.sap.com/ownerFullName": string;
            "workspace.devx.sap.com/plan": string;
            "workspace.devx.sap.com/ws-controller-processed-gen": string;
            "ws-manager.devx.sap.com/startedAt": string;
        };
        creationtimestamp: string;
        encrypted: boolean;
    };
    runtime: DevspaceRuntime;
    diskusage: {
        used: number;
        free: number;
        iused: number;
        ifree: number;
        timestamp: string;
    };
}
export interface DevSpaceAnnotation {
    pack: string;
    packTagline: string;
    optionalExtensions: string;
    technicalExtensions: string;
}
export interface DevSpaceCreation {
    id: string;
    memoryLimitBytes: number;
    extensions: string[];
    annotations: DevSpaceAnnotation;
    workspacedisplayname: string;
}
export interface DevspaceUpdate {
    Suspended: boolean;
    WorkspaceDisplayName: string;
}
export interface ExtensionPackInfo {
    name: string;
    description: string;
}
export interface DevSpaceExtensionVersion {
    extendedInfo: string;
    version: string;
}
export interface DevSpaceExtension {
    name: string;
    namespace: string;
    mode: string;
    description: string;
    standalone: boolean;
    tagline: string;
    tenantSpecific: boolean;
    thumbnail: string;
    versions: DevSpaceExtensionVersion[];
}
export interface DevSpacePackExtension {
    name: string;
    namespace: string;
    versionRange: string;
}
export interface DevSpacePack {
    name: string;
    tagline: string;
    description: string;
    author: string;
    thumbnail: string;
    extensions: DevSpacePackExtension[];
}
export interface DevSpaceSpec {
    extensions: DevSpaceExtension[];
    packs: DevSpacePack[];
}
export interface ExtensionsInstallationCompletion {
    InstalledModules?: any;
    InstallationCompleted: boolean;
}
/**
 * Create flat structure of exposed workspace information from given api call results.
 *
 * @param wsSettings - full workspace  workspace
 * @returns - workspace information
 */
export declare function flattenDevspaceInfo(ds: DevspaceApiResults): DevspaceInfo;
export type Method = axiosMethod;
/**
 * Allow axios request to remote landscape
 * @param url - object, url parts of target url
 * @param method - string, request operation
 * @param data - object, (optional) additional data
 * @param jwt - string, (optional) authorization token
 * @returns
 */
export declare function sendRequest(request: {
    url: {
        domain: string;
        path: string;
    };
    method: Method;
    jwt?: string;
    config?: {
        data?: any;
        headers?: RawAxiosRequestHeaders;
        responseType?: ResponseType;
    } & Record<string, unknown>;
}): Promise<AxiosResponse<any, any>>;
declare function sendDevspaceRequest(request: {
    url: {
        domain: string;
        path: string;
    };
    method: Method;
    jwt?: string;
    data?: any;
    headers?: RawAxiosRequestHeaders;
}): Promise<AxiosResponse<any, any>>;
export declare function getDevSpace(opts: {
    landscapeUrl: string;
    jwt: string;
    wsId: string;
}): Promise<AxiosResponse<any, any>>;
export declare function getDevSpaces(opts: {
    landscape: string;
    jwt: string;
}): Promise<AxiosResponse<any, any>>;
export declare function deleteDevSpace(opts: {
    landscape: string;
    wsId: string;
    jwt: string;
}): Promise<AxiosResponse<any, any>>;
export declare function getDevSpacesSpec(opts: {
    landscape: string;
    jwt: string;
}): Promise<DevSpaceSpec | undefined>;
export declare function getExtensionPacks(opts: {
    landscape: string;
    jwt: string;
}): Promise<AxiosResponse<any, any>>;
export declare function createDevSpace(opts: {
    landscape: string;
    jwt: string;
    data: DevSpaceCreation;
}): Promise<AxiosResponse<any, any>>;
export declare function updateDevSpace(opts: {
    landscape: string;
    wsId: string;
    jwt: string;
    data: DevspaceUpdate;
}): Promise<AxiosResponse<any, any>>;
export declare function getKey(landscapeUrl: string, jwt: string, wsId: string): Promise<string>;
export declare function getTenantMetadata(opts: {
    landscape: string;
    jwt: string;
}, sendDevspaceRequestStub?: typeof sendDevspaceRequest): Promise<AxiosResponse<any, any>>;
/**
 * Checks if generators installation JSON file is created and it can be parsed as plain object
 * @returns - an object of type ExtensionsInstallationCompletion with a field InstallationCompleted indicates generators installation result.
 * @throws - an error if the extensionsInstallationCompletion.json is not found under /extbin/extensionsInstallationCompletion
 */
export declare function readExtensionsInstallationCompletionFile(): Promise<ExtensionsInstallationCompletion>;
export declare function isJwtExpired(jwt: string): boolean;
export declare function timeUntilJwtExpires(jwt: string): number;
export declare function verifyDefaultLandscape(): Promise<{
    jwt: string;
    landscape: string;
}>;
export {};
