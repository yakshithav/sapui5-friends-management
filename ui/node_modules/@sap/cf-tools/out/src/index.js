"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiGetInstanceMetadata = exports.apiCreateServiceInstance = exports.apiGetInstanceCredentials = exports.apiGetServicesInstancesFilteredByType = void 0;
__exportStar(require("./types"), exports);
__exportStar(require("./cli"), exports);
__exportStar(require("./cf-local"), exports);
__exportStar(require("./messages"), exports);
__exportStar(require("./utils"), exports);
const serviceUtils = require("./cfServicesUtil");
async function apiGetServicesInstancesFilteredByType(serviceTypes) {
    return serviceUtils.getServicesInstancesFilteredByType(serviceTypes);
}
exports.apiGetServicesInstancesFilteredByType = apiGetServicesInstancesFilteredByType;
async function apiGetInstanceCredentials(instanceName) {
    return serviceUtils.getInstanceCredentials(instanceName);
}
exports.apiGetInstanceCredentials = apiGetInstanceCredentials;
async function apiCreateServiceInstance(serviceType, servicePlan, instanceName, config) {
    return serviceUtils.createServiceInstance(serviceType, servicePlan, instanceName, config);
}
exports.apiCreateServiceInstance = apiCreateServiceInstance;
async function apiGetInstanceMetadata(instanceName) {
    return serviceUtils.getInstanceMetadata(instanceName);
}
exports.apiGetInstanceMetadata = apiGetInstanceMetadata;
//# sourceMappingURL=index.js.map