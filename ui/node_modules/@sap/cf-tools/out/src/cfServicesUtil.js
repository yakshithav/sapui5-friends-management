"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTargetSet = exports.getInstanceMetadata = exports.createServiceInstance = exports.getInstanceCredentials = exports.getServicesInstancesFilteredByType = void 0;
const cli_1 = require("./cli");
const _ = require("lodash");
const types_1 = require("./types");
const cf_local_1 = require("./cf-local");
async function getServicesInstancesFilteredByType(serviceTypes) {
    const guids = _.map(await (0, cf_local_1.cfGetServicePlansList)({
        filters: [{ key: types_1.eFilters.service_offering_names, value: _.join(_.map(serviceTypes, encodeURIComponent)) }],
    }), "guid");
    return _.size(guids)
        ? (0, cf_local_1.cfGetManagedServiceInstances)({ filters: [{ key: types_1.eFilters.service_plan_guids, value: _.join(guids) }] })
        : [];
}
exports.getServicesInstancesFilteredByType = getServicesInstancesFilteredByType;
function getInstanceCredentials(instanceName) {
    return (0, cf_local_1.cfGetInstanceKeyParameters)(instanceName);
}
exports.getInstanceCredentials = getInstanceCredentials;
function createServiceInstance(serviceType, servicePlan, serviceInstanceName, config, nowait) {
    let args = ["create-service", serviceType, servicePlan, serviceInstanceName];
    if (config) {
        args = args.concat(["-c", config]);
    }
    if (nowait !== true) {
        args.push("--wait");
    }
    return cli_1.Cli.execute(args);
}
exports.createServiceInstance = createServiceInstance;
function getInstanceMetadata(instanceName) {
    return (0, cf_local_1.cfGetInstanceMetadata)(instanceName);
}
exports.getInstanceMetadata = getInstanceMetadata;
async function isTargetSet() {
    const target = await (0, cf_local_1.cfGetTarget)();
    return !_.isEmpty(target.org) && !_.isEmpty(target.space);
}
exports.isTargetSet = isTargetSet;
//# sourceMappingURL=cfServicesUtil.js.map