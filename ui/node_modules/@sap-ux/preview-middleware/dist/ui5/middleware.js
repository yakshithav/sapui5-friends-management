"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@sap-ux/logger");
const flp_1 = require("../base/flp");
const config_1 = require("../base/config");
/**
 * Create the router that is to be exposed as UI5 middleware.
 *
 * @param param0 parameters provider by UI5
 * @param param0.resources reference to resources
 * @param param0.options options and configurations from the ui5.yaml
 * @param param0.middlewareUtil additional UI5 CLI utilities
 * @param logger logger instance
 * @returns a router
 */
async function createRouter({ resources, options, middlewareUtil }, logger) {
    // setting defaults
    const config = options.configuration ?? {};
    config.flp ??= {};
    (0, config_1.sanitizeConfig)(config, logger);
    // configure the FLP sandbox based on information from the manifest
    const flp = new flp_1.FlpSandbox(config, resources.rootProject, middlewareUtil, logger);
    if (config.adp) {
        await (0, flp_1.initAdp)(resources.rootProject, config.adp, flp, middlewareUtil, logger);
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const manifest = await resources.rootProject.byPath('/manifest.json');
        if (manifest) {
            await flp.init(JSON.parse(await manifest.getString()));
        }
        else {
            throw new Error('No manifest.json found.');
        }
    }
    // add exposed endpoints for cds-plugin-ui5
    flp.router.getAppPages = () => (0, config_1.getPreviewPaths)(config).map(({ path }) => path);
    return flp.router;
}
/**
 * Exporting the middleware for usage in the UI5 tooling.
 *
 * @param params middleware configuration
 * @returns a promise for the request handler
 */
module.exports = async (params) => {
    const logger = new logger_1.ToolsLogger({
        transports: [new logger_1.UI5ToolingTransport({ moduleName: 'preview-middleware' })],
        logLevel: params.options.configuration?.debug ? logger_1.LogLevel.Debug : logger_1.LogLevel.Info
    });
    try {
        return await createRouter(params, logger);
    }
    catch (error) {
        logger.error('Could not start preview-middleware.');
        logger.error(error.message);
        throw error;
    }
};
//# sourceMappingURL=middleware.js.map