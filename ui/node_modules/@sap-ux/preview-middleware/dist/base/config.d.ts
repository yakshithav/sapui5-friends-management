import { ToolsLogger, type Logger } from '@sap-ux/logger';
import type { App, DefaultFlpPath, DefaultIntent, FlpConfig, Intent, CompleteTestConfig, MiddlewareConfig, RtaConfig, TestConfig } from '../types';
import { type Manifest, type UI5FlexLayer } from '@sap-ux/project-access';
import { type Editor } from 'mem-fs-editor';
import type { MergedAppDescriptor } from '@sap-ux/axios-extension';
export interface CustomConnector {
    applyConnector: string;
    writeConnector: string;
    custom: boolean;
}
export interface FlexConnector {
    connector: string;
    layers: string[];
    url?: string;
}
type TestTemplateConfig = {
    id: string;
    framework: TestConfig['framework'];
    basePath: string;
    initPath: string;
    theme: string;
};
export type PreviewUrls = {
    path: string;
    type: 'preview' | 'editor' | 'test';
};
/**
 * Internal structure used to fill the sandbox.html template
 */
export interface TemplateConfig {
    basePath: string;
    apps: Record<string, {
        title: string;
        description: string;
        additionalInformation: string;
        applicationType: 'URL';
        url: string;
        applicationDependencies?: MergedAppDescriptor;
    }>;
    ui5: {
        libs: string;
        theme: string;
        flex: (CustomConnector | FlexConnector)[];
        bootstrapOptions: string;
        resources: Record<string, string>;
    };
    init?: string;
    flex?: {
        [key: string]: unknown;
        layer: UI5FlexLayer;
        developerMode: boolean;
        pluginScript?: string;
    };
    features?: {
        feature: string;
        isEnabled: boolean;
    }[];
    locateReuseLibsScript?: boolean;
    enhancedHomePage?: boolean;
    enableCardGenerator?: boolean;
}
/**
 * Static settings
 */
export declare const PREVIEW_URL: {
    readonly client: {
        readonly path: "/preview/client";
        readonly getUrl: (basePath: string) => string;
        readonly local: string;
        readonly ns: "open.ux.preview.client";
    };
    readonly api: "/preview/api";
};
export declare const CARD_GENERATOR_DEFAULT: {
    readonly previewGeneratorSandbox: "/test/flpCardGeneratorSandbox.html";
    readonly cardsStore: "/cards/store";
    readonly i18nStore: "/editor/i18n";
};
/**
 * Default theme
 */
export declare const DEFAULT_THEME = "sap_horizon";
/**
 * Default path for mounting the local FLP.
 */
export declare const DEFAULT_PATH: DefaultFlpPath;
/**
 * Default intent
 */
export declare const DEFAULT_INTENT: Readonly<DefaultIntent>;
/**
 * Type guard for FlexConnector.
 *
 * @param connector - the connector to check
 * @returns true if the connector is a FlexConnector, false otherwise
 */
export declare function isFlexConnector(connector: FlexConnector | CustomConnector): connector is FlexConnector;
/**
 * Default configuration for the FLP.
 *
 * @param config partial configuration
 * @returns a full configuration with default values
 */
export declare function getFlpConfigWithDefaults(config?: Partial<FlpConfig>): FlpConfig;
/**
 * The developer mode is only supported for adaptation projects, therefore, notify the user if it is wrongly configured and then disable it.
 *
 * @param config configurations from the ui5.yaml
 * @param logger logger instance
 */
export declare function sanitizeConfig(config: MiddlewareConfig, logger: ToolsLogger): void;
/**
 * Sanitize the deprecated RTA configuration.
 *
 * @param deprecatedRtaConfig deprecated RTA configuration
 * @param logger logger instance
 * @returns sanitized RTA configuration
 */
export declare function sanitizeRtaConfig(deprecatedRtaConfig: MiddlewareConfig['rta'], logger?: Logger): RtaConfig | undefined;
/**
 * Add an application to the local FLP preview.
 *
 * @param templateConfig configuration for the preview
 * @param manifest manifest of the additional target app
 * @param app configuration for the preview
 * @param logger logger instance
 */
export declare function addApp(templateConfig: TemplateConfig, manifest: Partial<Manifest>, app: App, logger: Logger): Promise<void>;
/**
 * Get the application name based on the manifest and app configuration.
 *
 * @param manifest - The application manifest.
 * @param intent - The app configuration.
 * @returns The application name.
 */
export declare function getAppName(manifest: Partial<Manifest>, intent?: Intent): string;
/**
 * Creates the configuration object for the sandbox.html template.
 *
 * @param config FLP configuration
 * @param manifest application manifest
 * @param resources additional resources
 * @returns configuration object for the sandbox.html template
 */
export declare function createFlpTemplateConfig(config: FlpConfig, manifest: Partial<Manifest>, resources?: Record<string, string>): TemplateConfig;
/**
 * Creates the configuration object for the test template.
 *
 * @param config test configuration
 * @param id application id
 * @param theme theme to be used
 * @returns configuration object for the test template
 */
export declare function createTestTemplateConfig(config: CompleteTestConfig, id: string, theme: string): TestTemplateConfig;
/**
 * Returns the preview paths.
 *
 * @param config configuration from the ui5.yaml
 * @param logger logger instance
 * @returns an array of preview paths
 */
export declare function getPreviewPaths(config: MiddlewareConfig, logger?: ToolsLogger): PreviewUrls[];
/**
 * Generates the preview files.
 *
 * @param basePath path to the application root
 * @param config configuration from the ui5.yaml
 * @param fs file system editor
 * @param logger logger instance
 * @returns a mem-fs editor with the preview files
 */
export declare function generatePreviewFiles(basePath: string, config: MiddlewareConfig, fs?: Editor, logger?: ToolsLogger): Promise<Editor>;
export {};
//# sourceMappingURL=config.d.ts.map