"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readChanges = readChanges;
exports.writeChange = writeChange;
exports.deleteChange = deleteChange;
const fs_1 = require("fs");
const path_1 = require("path");
/**
 * Read changes from the file system and return them.
 *
 * @param project reference to the UI5 project
 * @param logger logger instance
 * @returns object with the file name as key and the file content as value
 */
async function readChanges(project, logger) {
    const changes = {};
    const files = await project.byGlob('/**/changes/**/*.{change,variant,ctrl_variant,ctrl_variant_change,ctrl_variant_management_change}');
    for (const file of files) {
        try {
            changes[`sap.ui.fl.${(0, path_1.parse)(file.getName()).name}`] = JSON.parse(await file.getString());
            logger.debug(`Read change from ${file.getPath()}`);
        }
        catch (error) {
            logger.warn(error.message);
        }
    }
    return changes;
}
/**
 * Writes flex changes to the user's workspace.
 *
 * @param data JS object to be stored as change
 * @param data.fileName file name that is required for a valid change
 * @param data.fileType file type that is required
 * @param webappPath path to the webapp folder
 * @param fs mem-fs editor
 * @param logger logger instance
 * @returns object with success flag and optional message
 */
function writeChange(data, webappPath, fs, logger) {
    const fileName = data.fileName;
    const fileType = data.fileType;
    if (fileName && fileType) {
        logger.debug(`Write change ${fileName}.${fileType}`);
        const filePath = (0, path_1.join)(webappPath, 'changes', fileName + '.' + fileType);
        fs.writeJSON(filePath, data);
        const message = `FILE_CREATED ${fileName}.${fileType}`;
        return { success: true, message };
    }
    else {
        return { success: false };
    }
}
/**
 * Deletes an existing flex change from the file system if it exists.
 *
 * @param data JS object of the change to be deleted
 * @param data.fileName file name that is required for a valid change
 * @param webappPath path to the webapp folder
 * @param logger logger instance
 * @returns object with success flag and optional message
 */
function deleteChange(data, webappPath, logger) {
    const fileName = data.fileName?.replace('sap.ui.fl.', '');
    if (fileName) {
        const path = (0, path_1.join)(webappPath, 'changes');
        if ((0, fs_1.existsSync)(path)) {
            // Changes can be in subfolders of changes directory. For eg: New Annotation File Change
            const files = [];
            readDirectoriesRecursively(path, files);
            const filePath = files.find((element) => element.includes(fileName));
            if (filePath) {
                const fileNameWithExt = filePath.split(path_1.sep).pop();
                logger.debug(`Write change ${fileNameWithExt}`);
                (0, fs_1.unlinkSync)(filePath);
                return { success: true, message: `FILE_DELETED ${fileNameWithExt}` };
            }
        }
    }
    return { success: false };
}
/**
 * Recursively find all files in the given folder.
 *
 * @param path path to the folder.
 * @param files all files in the given folder and subfolders.
 */
function readDirectoriesRecursively(path, files = []) {
    const items = (0, fs_1.readdirSync)(path);
    items.forEach((item) => {
        const fullPath = (0, path_1.join)(path, item);
        const stats = (0, fs_1.statSync)(fullPath);
        if (stats.isDirectory()) {
            readDirectoriesRecursively(fullPath, files);
        }
        else if (stats.isFile()) {
            files.push(fullPath);
        }
    });
}
//# sourceMappingURL=flex.js.map