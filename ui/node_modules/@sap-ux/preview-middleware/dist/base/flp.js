"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlpSandbox = void 0;
exports.initAdp = initAdp;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const express_1 = require("express");
const path_1 = __importStar(require("path"));
const project_access_1 = require("@sap-ux/project-access");
const adp_tooling_1 = require("@sap-ux/adp-tooling");
const btp_utils_1 = require("@sap-ux/btp-utils");
const feature_toggle_1 = require("@sap-ux/feature-toggle");
const flex_1 = require("./flex");
const test_1 = require("./test");
const config_1 = require("./config");
const cdm_1 = require("./cdm");
const fs_1 = require("fs");
const cards_1 = require("./utils/cards");
const i18n_1 = require("@sap-ux/i18n");
const DEFAULT_LIVERELOAD_PORT = 35729;
/**
 * Class handling preview of a sandbox FLP.
 */
class FlpSandbox {
    adp;
    manifest;
    onChangeRequest;
    templateConfig;
    flpConfig;
    rta;
    test;
    router;
    fs;
    logger;
    utils;
    project;
    cardGenerator;
    projectType;
    /**
     * Constructor setting defaults and keeping reference to workspace resources.
     *
     * @param config configuration from the ui5.yaml
     * @param project reference to the project provided by the UI5 CLI
     * @param utils middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, utils, logger) {
        this.logger = logger;
        this.project = project;
        this.utils = utils;
        this.flpConfig = (0, config_1.getFlpConfigWithDefaults)(config.flp);
        this.test = config.test;
        this.rta = config.editors?.rta ?? (0, config_1.sanitizeRtaConfig)(config.rta, logger); //NOSONAR
        logger.debug(`Config: ${JSON.stringify({ flp: this.flpConfig, rta: this.rta, test: this.test })}`);
        this.router = (0, express_1.Router)();
        this.cardGenerator = config.editors?.cardGenerator;
    }
    /**
     * Registers a handler function to be called when a change request occurs.
     *
     * @param {OnChangeRequestHandler} handler - The function to be executed when a change request occurs.
     */
    addOnChangeRequestHandler(handler) {
        this.onChangeRequest = handler;
    }
    /**
     * Initialize the FLP sandbox router.
     *
     * @param manifest application manifest
     * @param componentId optional componentId e.g. for adaptation projects
     * @param resources optional additional resource mappings
     * @param adp optional reference to the ADP tooling
     */
    async init(manifest, componentId, resources = {}, adp) {
        this.projectType = await (0, project_access_1.getProjectType)(await (0, project_access_1.findProjectRoot)(process.cwd(), true, true));
        this.createFlexHandler();
        this.flpConfig.libs ??= await this.hasLocateReuseLibsScript();
        const id = manifest['sap.app']?.id ?? '';
        this.templateConfig = (0, config_1.createFlpTemplateConfig)(this.flpConfig, manifest, resources);
        this.adp = adp;
        this.manifest = manifest;
        await (0, config_1.addApp)(this.templateConfig, manifest, {
            componentId,
            target: resources[componentId ?? id] ?? this.templateConfig.basePath,
            local: '.',
            intent: this.flpConfig.intent
        }, this.logger);
        this.addStandardRoutes();
        if (this.cardGenerator?.path) {
            this.cardGenerator.path = this.cardGenerator.path.startsWith('/')
                ? this.cardGenerator.path
                : `/${this.cardGenerator.path}`;
            await this.addCardGeneratorMiddlewareRoute();
            await this.addStoreCardManifestRoute();
            await this.addStoreI18nKeysRoute();
        }
        if (this.rta) {
            this.rta.options ??= {};
            this.rta.options.baseId = componentId ?? id;
            this.rta.options.appName = id;
            this.addEditorRoutes(this.rta);
        }
        if (this.test) {
            this.addTestRoutes(this.test.filter((config) => config.framework !== 'Testsuite'), id);
            this.createTestSuite(this.test);
        }
        if (this.flpConfig.enhancedHomePage) {
            this.addCDMRoute();
        }
        await this.addRoutesForAdditionalApps();
        this.logger.info(`Initialized for app ${id}`);
        this.logger.debug(`Configured apps: ${JSON.stringify(this.templateConfig.apps)}`);
    }
    /**
     * Get the configuration for the developer mode.
     *
     * @param ui5MajorVersion - the major version of UI5
     * @returns the configuration for the developer mode
     * @private
     */
    getDeveloperModeConfig(ui5MajorVersion) {
        if (ui5MajorVersion < 2) {
            return new Map([
                // Run application in design time mode
                // Adds bindingString to BindingInfo objects. Required to create and read PropertyBinding changes
                ['xx-designMode', 'true'],
                // In design mode, the controller code will not be executed by default, which is not desired in our case, so we suppress the deactivation
                ['xx-suppressDeactivationOfControllerCode', 'true'],
                // Make sure that XML preprocessing results are correctly invalidated
                ['xx-viewCache', 'false']
            ]);
        }
        else {
            return new Map([
                // Run application in design time mode
                // Adds bindingString to BindingInfo objects. Required to create and read PropertyBinding changes
                ['xx-design-mode', 'true'],
                // In design mode, the controller code will not be executed by default, which is not desired in our case, so we suppress the deactivation
                ['xx-suppress-deactivation-of-controller-code', 'true'],
                // Make sure that XML preprocessing results are correctly invalidated
                ['xx-view-cache', 'false']
            ]);
        }
    }
    /**
     * Deletes the Fiori Tools local connector (WorkspaceConnector) in case of a not supported UI5 versions.
     * As an alternative the Fiori Tools fake connector (FakeLrepConnector) will be used as defined in preview-middleware-client/src/flp/initConnectors.ts.
     * Also deletes the ABAP connector in case of a CAP project.
     *
     * @param ui5VersionMajor - the major version of UI5
     * @param ui5VersionMinor - the minor version of UI5
     * @private
     */
    checkDeleteConnectors(ui5VersionMajor, ui5VersionMinor) {
        if (ui5VersionMajor === 1 && ui5VersionMinor < 76) {
            this.templateConfig.ui5.flex = this.templateConfig.ui5.flex.filter((connector) => (0, config_1.isFlexConnector)(connector));
            this.logger.debug(`The Fiori Tools local connector (WorkspaceConnector) is not being used because the current UI5 version does not support it. The Fiori Tools fake connector (FakeLrepConnector) will be used instead.`);
        }
        else {
            this.logger.debug(`The Fiori Tools local connector (WorkspaceConnector) is being used.`);
        }
        if (this.projectType === 'CAPJava' || this.projectType === 'CAPNodejs') {
            this.templateConfig.ui5.flex = this.templateConfig.ui5.flex.filter((connector) => !(0, config_1.isFlexConnector)(connector) ||
                ((0, config_1.isFlexConnector)(connector) && !connector.url?.startsWith('/sap/bc/lrep')));
            this.logger.debug(`The ABAP connector is not being used because the current project type is '${this.projectType}'.`);
        }
        else {
            this.logger.debug(`The ABAP connector is being used.`);
        }
    }
    /**
     * Generates the FLP sandbox for an editor.
     *
     * @param req the request
     * @param rta runtime authoring configuration
     * @param editor editor configuration
     * @returns FLP sandbox html
     */
    async generateSandboxForEditor(req, rta, editor) {
        const defaultGenerator = editor.developerMode
            ? '@sap-ux/control-property-editor'
            : '@sap-ux/preview-middleware';
        await this.setApplicationDependencies();
        const config = { ...this.templateConfig };
        /* sap.ui.rta needs to be added to the list of preload libs for variants management and adaptation projects */
        if (!config.ui5.libs.includes('sap.ui.rta')) {
            const libs = config.ui5.libs.split(',');
            libs.push('sap.ui.rta');
            config.ui5.libs = libs.join(',');
        }
        config.flex = {
            layer: rta.layer,
            ...rta.options,
            generator: editor.generator ?? defaultGenerator,
            developerMode: editor.developerMode === true,
            pluginScript: editor.pluginScript
        };
        config.features = feature_toggle_1.FeatureToggleAccess.getAllFeatureToggles();
        const ui5Version = await this.getUi5Version(req.protocol, req.headers.host, req['ui5-patched-router']?.baseUrl);
        this.checkDeleteConnectors(ui5Version.major, ui5Version.minor);
        if (editor.developerMode === true) {
            config.ui5.bootstrapOptions = serializeUi5Configuration(this.getDeveloperModeConfig(ui5Version.major));
        }
        if (ui5Version.major === 1 && ui5Version.minor <= 71) {
            this.removeAsyncHintsRequests();
        }
        return (0, ejs_1.render)(this.getSandboxTemplate(ui5Version), config);
    }
    /**
     * Sets application dependencies in the template configuration.
     * The descriptor is refreshed if the global flag is set.
     *
     * @returns Promise that resolves when the application dependencies are set
     */
    async setApplicationDependencies() {
        if (this.adp) {
            await this.adp.sync();
            const appName = (0, config_1.getAppName)(this.manifest, this.flpConfig.intent);
            this.templateConfig.apps[appName].applicationDependencies = this.adp.descriptor;
        }
    }
    /**
     * Handler for the GET requests to the runtime adaptation editor in developer mode.
     *
     * @param res the response
     * @param rta runtime adaptation configuration
     * @param previewUrl the url of the preview
     * @private
     */
    async editorGetHandlerDeveloperMode(res, rta, previewUrl) {
        const scenario = rta.options?.scenario;
        let templatePreviewUrl = `${previewUrl}?sap-ui-xx-viewCache=false&fiori-tools-rta-mode=forAdaptation&sap-ui-rta-skip-flex-validation=true&sap-ui-xx-condense-changes=true#${this.flpConfig.intent.object}-${this.flpConfig.intent.action}`;
        if (scenario === 'ADAPTATION_PROJECT') {
            templatePreviewUrl = templatePreviewUrl.replace('?', `?sap-ui-layer=${rta.layer}&`);
        }
        const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/editor.html'), 'utf-8');
        const features = feature_toggle_1.FeatureToggleAccess.getAllFeatureToggles();
        const envPort = process.env.FIORI_TOOLS_LIVERELOAD_PORT;
        let livereloadPort = envPort ? parseInt(envPort, 10) : DEFAULT_LIVERELOAD_PORT;
        livereloadPort = isNaN(livereloadPort) ? DEFAULT_LIVERELOAD_PORT : livereloadPort;
        const envLivereloadUrl = (0, btp_utils_1.isAppStudio)() ? await (0, btp_utils_1.exposePort)(livereloadPort) : undefined;
        const html = (0, ejs_1.render)(template, {
            previewUrl: templatePreviewUrl,
            telemetry: rta.options?.telemetry ?? false,
            appName: rta.options?.appName,
            scenario,
            livereloadPort,
            livereloadUrl: envLivereloadUrl,
            features: JSON.stringify(features)
        });
        this.sendResponse(res, 'text/html', 200, html);
    }
    /**
     * Handler for the GET requests to the runtime adaptation editor.
     *
     * @param req the request
     * @param res the response
     * @param rta runtime adaptation configuration
     * @param previewUrl the url of the preview
     * @param editor editor configuration
     * @private
     */
    async editorGetHandler(req, res, rta, previewUrl, editor) {
        if (!req.query['fiori-tools-rta-mode']) {
            // Redirect to the same URL but add the necessary parameter
            const url = 'ui5-patched-router' in req ? (0, path_1.join)(req['ui5-patched-router']?.baseUrl ?? '', previewUrl) : previewUrl;
            const params = structuredClone(req.query);
            params['sap-ui-xx-viewCache'] = 'false';
            params['fiori-tools-rta-mode'] = 'true';
            params['sap-ui-rta-skip-flex-validation'] = 'true';
            params['sap-ui-xx-condense-changes'] = 'true';
            res.redirect(302, `${url}?${new URLSearchParams(params)}`);
            return;
        }
        const html = (await this.generateSandboxForEditor(req, rta, editor)).replace('</body>', `</body>\n<!-- livereload disabled for editor </body>-->`);
        this.sendResponse(res, 'text/html', 200, html);
    }
    /**
     * Add additional routes for configured editors.
     *
     * @param rta runtime authoring configuration
     */
    addEditorRoutes(rta) {
        const cpe = (0, path_1.dirname)(require.resolve('@sap-ux/control-property-editor-sources'));
        for (const editor of rta.endpoints) {
            let previewUrl = editor.path.startsWith('/') ? editor.path : `/${editor.path}`;
            if (editor.developerMode) {
                previewUrl = `${previewUrl}.inner.html`;
                editor.pluginScript ??= 'open/ux/preview/client/cpe/init';
                this.router.get(editor.path, async (_req, res) => {
                    await this.editorGetHandlerDeveloperMode(res, rta, previewUrl);
                });
                let path = (0, path_1.dirname)(editor.path);
                if (!path.endsWith('/')) {
                    path = `${path}/`;
                }
                this.router.use(`${path}editor`, (0, express_1.static)(cpe));
            }
            this.router.get(previewUrl, async (req, res) => {
                await this.editorGetHandler(req, res, rta, previewUrl, editor);
            });
        }
    }
    /**
     * Handler for the GET requests to the FLP.
     *
     * @param req the request
     * @param res the response
     * @param next the next function
     * @private
     */
    async flpGetHandler(req, res, next) {
        // connect API (karma test runner) has no request query property
        if ('query' in req && 'redirect' in res && !req.query['sap-ui-xx-viewCache']) {
            const url = 'ui5-patched-router' in req ? (0, path_1.join)(req['ui5-patched-router']?.baseUrl ?? '', req.path) : req.path;
            // Redirect to the same URL but add the necessary parameter
            const params = structuredClone(req.query);
            params['sap-ui-xx-viewCache'] = 'false';
            res.redirect(302, `${url}?${new URLSearchParams(params)}`);
            return;
        }
        await this.setApplicationDependencies();
        // get filepath from request. Use dummy url to extract it from originalUrl if needed
        const filePath = 'query' in req ? req.path : new URL('http://dummyHost' + req.originalUrl).pathname; //NOSONAR
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const file = await this.project.byPath(filePath);
        if (file) {
            this.logger.info(`HTML file returned at ${filePath} is loaded from the file system.`);
            next();
        }
        else {
            const ui5Version = await this.getUi5Version(
            //use protocol from request header referer as fallback for connect API (karma test runner)
            'protocol' in req
                ? req.protocol
                : req.headers.referer?.substring(0, req.headers.referer.indexOf(':')) ?? 'http', req.headers.host, 'ui5-patched-router' in req ? req['ui5-patched-router']?.baseUrl : undefined);
            this.checkDeleteConnectors(ui5Version.major, ui5Version.minor);
            const html = (0, ejs_1.render)(this.getSandboxTemplate(ui5Version), this.templateConfig);
            this.sendResponse(res, 'text/html', 200, html);
        }
    }
    /**
     * Add routes for html and scripts required for a local FLP.
     */
    addStandardRoutes() {
        // register static client sources
        this.router.use(config_1.PREVIEW_URL.client.path, (0, express_1.static)(config_1.PREVIEW_URL.client.local));
        // add route for the sandbox html
        this.router.get(this.flpConfig.path, async (req, res, next) => {
            await this.flpGetHandler(req, res, next);
        });
    }
    /**
     * Adds a middleware route for the Card Generator in the FLP sandbox.
     *
     * This route dynamically updates the `templateConfig` with the Card Generator application details
     * and serves the FLP sandbox HTML using the `flpGetHandler`.
     *
     * @private
     */
    async addCardGeneratorMiddlewareRoute() {
        const previewGeneratorPath = this.cardGenerator?.path ?? config_1.CARD_GENERATOR_DEFAULT.previewGeneratorSandbox;
        this.logger.debug(`Add route for ${previewGeneratorPath}`);
        this.router.get(previewGeneratorPath, async (req, res, next) => {
            if (this.projectType === 'EDMXBackend') {
                this.templateConfig.enableCardGenerator = !!this.cardGenerator?.path;
            }
            else {
                this.logger.warn(`The Card Generator is not available for CAP projects.`);
                this.templateConfig.enableCardGenerator = false;
            }
            await this.flpGetHandler(req, res, next);
        });
    }
    /**
     * Read the UI5 version.
     * In case of an error, the default UI5 version '1.121.0' is returned.
     *
     * @param protocol - the protocol that should be used to request the UI5 version ('http' or 'https')
     * @param host - the host that should be used to request the UI5 version
     * @param baseUrl - the base path of the request that should be added to the host
     * @returns the template for the sandbox HTML file
     * @private
     */
    async getUi5Version(protocol, host, baseUrl = '') {
        let version;
        if (!host) {
            this.logger.error('Unable to fetch UI5 version: No host found in request header.');
        }
        else {
            try {
                const versionUrl = `${protocol}://${host}${baseUrl}/resources/sap-ui-version.json`;
                const responseJson = (await fetch(versionUrl).then((res) => res.json()));
                version = responseJson?.libraries?.find((lib) => lib.name === 'sap.ui.core')?.version;
            }
            catch (error) {
                this.logger.error(error);
            }
        }
        if (!version) {
            this.logger.error('Could not get UI5 version of application. Using version: 1.130.0 as fallback.');
            version = '1.130.0';
        }
        const [major, minor, patch] = version.split('.').map((versionPart) => parseInt(versionPart, 10));
        const label = version.split(/-(.*)/s)?.[1];
        if (this.flpConfig.enhancedHomePage &&
            ((major < 2 && minor < 123) || major >= 2 || label?.includes('legacy-free'))) {
            this.flpConfig.enhancedHomePage = this.templateConfig.enhancedHomePage = false;
            this.logger.warn(`Feature enhancedHomePage disabled: UI5 version: ${version} not supported.`);
        }
        return {
            major,
            minor,
            patch,
            label
        };
    }
    /**
     * Read the sandbox template file based on the given UI5 version.
     *
     * @param ui5Version - the UI5 version
     * @returns the template for the sandbox HTML file
     */
    getSandboxTemplate(ui5Version) {
        this.logger.info(`Using sandbox template for UI5 version: ${ui5Version.major}.${ui5Version.minor}.${ui5Version.patch}${ui5Version.label ? `-${ui5Version.label}` : ''}.`);
        const filePrefix = ui5Version.major > 1 || ui5Version.label?.includes('legacy-free') ? '2' : '';
        const template = this.flpConfig.enhancedHomePage ? 'cdm' : 'sandbox';
        return (0, fs_1.readFileSync)((0, path_1.join)(__dirname, `../../templates/flp/${template}${filePrefix}.html`), 'utf-8');
    }
    /**
     * For UI5 version 1.71 and below, the asyncHints.requests need to be removed from the template configuration
     * to load the changes in an Adaptation project.
     */
    removeAsyncHintsRequests() {
        for (const app in this.templateConfig.apps) {
            const appDependencies = this.templateConfig.apps[app].applicationDependencies;
            if (appDependencies?.asyncHints.requests) {
                appDependencies.asyncHints.requests = [];
            }
        }
    }
    /**
     * Try finding a locate-reuse-libs script in the project.
     *
     * @returns the location of the locate-reuse-libs script or undefined.
     */
    async hasLocateReuseLibsScript() {
        const files = await this.project.byGlob('**/locate-reuse-libs.js');
        return files.length > 0;
    }
    /**
     * Add additional routes for apps also to be shown in the local FLP.
     */
    async addRoutesForAdditionalApps() {
        for (const app of this.flpConfig.apps) {
            let manifest;
            if (app.local) {
                this.fs = this.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
                const webappPath = await (0, project_access_1.getWebappPath)(app.local, this.fs);
                manifest = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(webappPath, 'manifest.json'), 'utf-8'));
                this.router.use(app.target, (0, express_1.static)(webappPath));
                this.logger.info(`Serving additional application at ${app.target} from ${app.local}`);
            }
            else if (app.componentId) {
                manifest = {
                    'sap.app': {
                        id: app.componentId,
                        title: app.intent ? `${app.intent.object}-${app.intent.action}` : app.componentId
                    }
                };
            }
            if (manifest) {
                await (0, config_1.addApp)(this.templateConfig, manifest, app, this.logger);
                this.logger.info(`Adding additional intent: ${app.intent?.object}-${app.intent?.action}`);
            }
            else {
                this.logger.info(`Invalid application config for route ${app.target} because neither componentId nor local folder provided.`);
            }
        }
    }
    /**
     * Add routes for cdm.json required by FLP during bootstrapping via cdm.
     *
     */
    addCDMRoute() {
        this.router.get('/cdm.json', async (_req, res) => {
            const json = (0, cdm_1.generateCdm)(this.templateConfig.apps);
            this.sendResponse(res, 'application/json', 200, JSON.stringify(json));
        });
    }
    /**
     * Handler for flex changes GET requests.
     *
     * @param res the response
     * @private
     */
    async flexGetHandler(res) {
        const changes = await (0, flex_1.readChanges)(this.project, this.logger);
        if (this.onChangeRequest) {
            this.fs = this.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
            for (const change of Object.values(changes)) {
                await this.onChangeRequest('read', change, this.fs, this.logger);
            }
        }
        this.sendResponse(res, 'application/json', 200, JSON.stringify(changes));
    }
    /**
     * Handler for flex changes POST requests.
     *
     * @param req the request
     * @param res the response
     * @private
     */
    async flexPostHandler(req, res) {
        this.fs = this.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
        try {
            const body = req.body;
            if (this.onChangeRequest) {
                await this.onChangeRequest('write', body.change, this.fs, this.logger, body.additionalChangeInfo);
            }
            const { success, message } = (0, flex_1.writeChange)(body.change, this.utils.getProject().getSourcePath(), this.fs, this.logger);
            if (success) {
                this.fs.commit(() => this.sendResponse(res, 'text/plain', 200, message ?? ''));
            }
            else {
                this.sendResponse(res, 'text/plain', 400, 'INVALID_DATA');
            }
        }
        catch (error) {
            this.sendResponse(res, 'text/plain', 500, error.message);
        }
    }
    /**
     * Handler for flex changes DELETE requests.
     *
     * @param req the request
     * @param res the response
     * @private
     */
    async flexDeleteHandler(req, res) {
        try {
            const { success, message } = (0, flex_1.deleteChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
            if (success) {
                this.sendResponse(res, 'text/plain', 200, message ?? '');
            }
            else {
                this.sendResponse(res, 'text/plain', 400, 'INVALID_DATA');
            }
        }
        catch (error) {
            this.sendResponse(res, 'text/plain', 500, error.message);
        }
    }
    /**
     * Create required routes for flex.
     */
    createFlexHandler() {
        const api = `${config_1.PREVIEW_URL.api}/changes`;
        this.router.use(api, (0, express_1.json)());
        this.router.get(api, async (_req, res) => {
            await this.flexGetHandler(res);
        });
        this.router.post(api, async (req, res) => {
            await this.flexPostHandler(req, res);
        });
        this.router.delete(api, async (req, res) => {
            await this.flexDeleteHandler(req, res);
        });
    }
    /**
     * Handler for the GET requests to the HTML of the test suite.
     *
     * @param res the response
     * @param testsuite the test suite template
     * @param config the test configuration
     * @private
     */
    async testSuiteHtmlGetHandler(res, testsuite, config) {
        this.logger.debug(`Serving test route: ${config.path}`);
        const templateConfig = {
            basePath: this.templateConfig.basePath,
            initPath: config.init
        };
        const html = (0, ejs_1.render)(testsuite, templateConfig);
        this.sendResponse(res, 'text/html', 200, html);
    }
    /**
     * Handler for the GET requests to the JS of the test suite.
     *
     * @param res the response
     * @param next the next function
     * @param config the test configuration
     * @param initTemplate the test runner template
     * @param testPaths the paths to the test files
     * @private
     */
    async testSuiteJsGetHandler(res, next, config, initTemplate, testPaths) {
        const files = await this.project.byGlob(config.init.replace('.js', '.[jt]s'));
        if (files?.length > 0) {
            this.logger.warn(`Script returned at ${config.path} is loaded from the file system.`);
            next();
        }
        else {
            this.logger.debug(`Serving test route: ${config.init}`);
            const templateConfig = {
                testPaths: testPaths
            };
            const js = (0, ejs_1.render)(initTemplate, templateConfig);
            this.sendResponse(res, 'application/javascript', 200, js);
        }
    }
    /**
     * If it is part of TestConfig, create a test suite for the test configurations.
     *
     * @param configs test configurations
     * @private
     */
    createTestSuite(configs) {
        const testsuiteConfig = configs.find((config) => config.framework === 'Testsuite');
        if (!testsuiteConfig) {
            //silent skip: create a testsuite only if it is explicitly part of the test configuration
            return;
        }
        if (configs.length <= 1) {
            this.logger.warn('Skip testsuite generation. No test frameworks configured.');
            return;
        }
        const testsuite = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/testsuite.qunit.html'), 'utf-8');
        const config = (0, test_1.mergeTestConfigDefaults)(testsuiteConfig);
        this.logger.debug(`Add route for ${config.path}`);
        this.router.get(config.path, async (_req, res) => {
            await this.testSuiteHtmlGetHandler(res, testsuite, config);
        });
        if (testsuiteConfig.init !== undefined) {
            this.logger.debug(`Skip serving testsuite init script in favor of provided script: ${testsuiteConfig.init}`);
            return;
        }
        const testPaths = [];
        for (const testConfig of configs) {
            if (testConfig.framework === 'Testsuite') {
                continue;
            }
            const mergedConfig = (0, test_1.mergeTestConfigDefaults)(testConfig);
            testPaths.push(path_1.posix.relative(path_1.posix.dirname(config.path), mergedConfig.path));
        }
        const initTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/testsuite.qunit.js'), 'utf-8');
        this.logger.debug(`Add route for ${config.init}`);
        this.router.get(config.init, async (_req, res, next) => {
            await this.testSuiteJsGetHandler(res, next, config, initTemplate, testPaths);
        });
    }
    /**
     * Send a response with the given content type, status and body.
     * Ensure compliance with common APIs in express and connect.
     *
     * @param res the response object
     * @param contentType the content type
     * @param status the response status
     * @param body the response body
     * @private
     */
    sendResponse(res, contentType, status, body) {
        res.writeHead(status, {
            'Content-Type': contentType
        });
        res.write(body);
        res.end();
    }
    /**
     * Handler for the GET requests to the HTML of the test runner.
     *
     * @param res the response
     * @param next the next function
     * @param config test configuration
     * @param htmlTemplate the test runner template
     * @param id application id from manifest
     */
    async testRunnerHtmlGetHandler(res, next, config, htmlTemplate, id) {
        this.logger.debug(`Serving test route: ${config.path}`);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const file = await this.project.byPath(config.path);
        if (file) {
            this.logger.warn(`HTML file returned at ${config.path} is loaded from the file system.`);
            next();
        }
        else {
            const templateConfig = (0, config_1.createTestTemplateConfig)(config, id, this.templateConfig.ui5.theme);
            const html = (0, ejs_1.render)(htmlTemplate, templateConfig);
            this.sendResponse(res, 'text/html', 200, html);
        }
    }
    /**
     * Handler for the GET requests to the JS of the test runner.
     *
     * @param res the response
     * @param next the next function
     * @param config test configuration
     * @param initTemplate the test runner template
     * @param ns namespace for the test files
     * @private
     */
    async testRunnerJsGetHandler(res, next, config, initTemplate, ns) {
        this.logger.debug(`Serving test init script: ${config.init}`);
        const files = await this.project.byGlob(config.init.replace('.js', '.[jt]s'));
        if (files?.length > 0) {
            this.logger.warn(`Script returned at ${config.path} is loaded from the file system.`);
            next();
        }
        else {
            const testFiles = await this.project.byGlob(config.pattern);
            const templateConfig = { tests: (0, test_1.generateImportList)(ns, testFiles) };
            const js = (0, ejs_1.render)(initTemplate, templateConfig);
            this.sendResponse(res, 'application/javascript', 200, js);
        }
    }
    /**
     * Add routes for html and scripts required for a local test FLP.
     *
     * @param configs test configurations
     * @param id application id from manifest
     */
    addTestRoutes(configs, id) {
        const ns = id.replace(/\./g, '/');
        const htmlTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.html'), 'utf-8');
        for (const testConfig of configs) {
            const config = (0, test_1.mergeTestConfigDefaults)(testConfig);
            this.logger.debug(`Add route for ${config.path}`);
            // add route for the *.qunit.html
            this.router.get(config.path, async (_req, res, next) => {
                await this.testRunnerHtmlGetHandler(res, next, config, htmlTemplate, id);
            });
            if (testConfig.init !== undefined) {
                this.logger.debug(`Skip serving test init script in favor of provided script: ${testConfig.init}`);
                continue;
            }
            // add route for the init file
            const initTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.js'), 'utf-8');
            this.logger.debug(`Add route for ${config.init}`);
            this.router.get(config.init, async (_req, res, next) => {
                await this.testRunnerJsGetHandler(res, next, config, initTemplate, ns);
            });
        }
    }
    /**
     * Stores the card manifest files in the webapp folder of the project and updates the application manifest.
     *
     * @param {Request} req - The HTTP request object containing the card manifest data in the body.
     * @param {Response} res - The HTTP response object used to send the response back to the client.
     * @returns {Promise<void>} A promise that resolves when the operation is complete.
     */
    async storeCardManifestHandler(req, res) {
        try {
            const { floorplan, localPath, fileName = project_access_1.FileName.Manifest, manifests } = req.body;
            this.fs = this.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
            const webappPath = await (0, project_access_1.getWebappPath)(path_1.default.resolve(), this.fs);
            const fullPath = (0, path_1.join)(webappPath, localPath);
            const filePath = fileName.endsWith('.json') ? (0, path_1.join)(fullPath, fileName) : `${(0, path_1.join)(fullPath, fileName)}.json`;
            const integrationCard = (0, cards_1.getIntegrationCard)(manifests);
            this.fs.write(filePath, JSON.stringify(integrationCard.manifest, null, 2));
            const entitySet = integrationCard.entitySet;
            const sapCardsAp = (this.manifest['sap.cards.ap'] ??= {});
            sapCardsAp.embeds ??= {};
            sapCardsAp.embeds[floorplan] = {
                default: entitySet,
                manifests: {
                    [entitySet]: [
                        {
                            localUri: localPath
                        }
                    ]
                }
            };
            const appAccess = await (0, project_access_1.createApplicationAccess)(path_1.default.resolve(), this.fs);
            await appAccess.updateManifestJSON(this.manifest, this.fs);
            this.fs.commit(() => this.sendResponse(res, 'text/plain', 201, `Files were updated/created`));
        }
        catch (error) {
            this.logger.error(`Files could not be created/updated. Error: ${error}`);
            this.sendResponse(res, 'text/plain', 500, 'Files could not be created/updated.');
        }
    }
    /**
     * Adds a route to store card manifest files, the files are stored in the webapp folder of the project.
     * The application manifest.json file is updated with the new card manifests information within the sap.cards.ap.embeds.
     *
     * @returns {Promise<void>} A promise that resolves when the route is added.
     */
    async addStoreCardManifestRoute() {
        if (this.projectType !== 'EDMXBackend') {
            return;
        }
        this.router.use(config_1.CARD_GENERATOR_DEFAULT.cardsStore, (0, express_1.json)());
        this.logger.debug(`Add route for ${config_1.CARD_GENERATOR_DEFAULT.cardsStore}`);
        this.router.post(config_1.CARD_GENERATOR_DEFAULT.cardsStore, async (req, res) => {
            await this.storeCardManifestHandler(req, res);
        });
    }
    /**
     * Handles the storage of i18n keys in the i18n file.
     *
     * @param {Request} req - The HTTP request object containing the i18n key-value pairs in the body.
     * @param {Response} res - The HTTP response object used to send the response back to the client.
     * @returns {Promise<void>} A promise that resolves when the operation is complete.
     */
    async storeI18nKeysHandler(req, res) {
        try {
            this.fs = this.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
            const webappPath = await (0, project_access_1.getWebappPath)(path_1.default.resolve(), this.fs);
            const i18nPath = this.manifest['sap.app'].i18n;
            const filePath = i18nPath ? (0, path_1.join)(webappPath, i18nPath) : (0, path_1.join)(webappPath, 'i18n', 'i18n.properties');
            const entries = req.body || [];
            entries.forEach((entry) => {
                if (entry.comment) {
                    entry.annotation = entry.comment;
                }
            });
            await (0, i18n_1.createPropertiesI18nEntries)(filePath, entries);
            this.fs.commit(() => this.sendResponse(res, 'text/plain', 201, `i18n file updated.`));
        }
        catch (error) {
            this.logger.error(`File could not be updated. Error: ${error}`);
            this.sendResponse(res, 'text/plain', 500, 'File could not be updated.');
        }
    }
    /**
     * Adds a route to store i18n properties in the i18n file.
     * This function updates the i18n file with new properties provided in the request body.
     *
     * @returns {Promise<void>} A promise that resolves when the route is added.
     */
    async addStoreI18nKeysRoute() {
        if (this.projectType !== 'EDMXBackend') {
            return;
        }
        this.router.use(config_1.CARD_GENERATOR_DEFAULT.i18nStore, (0, express_1.json)());
        this.logger.debug(`Add route for ${config_1.CARD_GENERATOR_DEFAULT.i18nStore}`);
        this.router.post(config_1.CARD_GENERATOR_DEFAULT.i18nStore, async (req, res) => {
            await this.storeI18nKeysHandler(req, res);
        });
    }
}
exports.FlpSandbox = FlpSandbox;
/**
 * Creates an attribute string that can be added to an HTML element.
 *
 * @param attributes map with attributes and their values
 * @param indent indentation that's inserted before each attribute
 * @param prefix value that should be added at the start of to all attribute names
 * @returns attribute string
 */
function serializeDataAttributes(attributes, indent = '', prefix = 'data') {
    return [...attributes.entries()]
        .map(([name, value]) => {
        return `${indent}${prefix}-${name}="${value}"`;
    })
        .join('\n');
}
/**
 * Creates an attribute string that can be added to bootstrap script in a HTML file.
 *
 * @param config ui5 configuration options
 * @returns attribute string
 */
function serializeUi5Configuration(config) {
    return '\n' + serializeDataAttributes(config, '        ', 'data-sap-ui');
}
/**
 * Initialize the preview for an adaptation project.
 *
 * @param rootProject reference to the project
 * @param config configuration from the ui5.yaml
 * @param flp FlpSandbox instance
 * @param util middleware utilities provided by the UI5 CLI
 * @param logger logger instance
 * @throws Error in case no manifest.appdescr_variant found
 */
async function initAdp(rootProject, config, flp, util, logger) {
    const appVariant = await rootProject.byPath('/manifest.appdescr_variant');
    if (appVariant) {
        const adp = new adp_tooling_1.AdpPreview(config, rootProject, util, logger);
        const variant = JSON.parse(await appVariant.getString());
        const layer = await adp.init(variant);
        if (flp.rta) {
            flp.rta.layer = layer;
            flp.rta.options = {
                ...flp.rta.options,
                projectId: variant.id,
                scenario: 'ADAPTATION_PROJECT',
                isCloud: adp.isCloudProject
            };
            for (const editor of flp.rta.endpoints) {
                editor.pluginScript ??= 'open/ux/preview/client/adp/init';
            }
        }
        const descriptor = adp.descriptor;
        const { name, manifest } = descriptor;
        await flp.init(manifest, name, adp.resources, adp);
        flp.router.use(adp.descriptor.url, adp.proxy.bind(adp));
        flp.addOnChangeRequestHandler(adp.onChangeRequest.bind(adp));
        flp.router.use((0, express_1.json)());
        adp.addApis(flp.router);
    }
    else {
        throw new Error('ADP configured but no manifest.appdescr_variant found.');
    }
}
//# sourceMappingURL=flp.js.map