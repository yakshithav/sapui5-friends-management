"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_INTENT = exports.DEFAULT_PATH = exports.DEFAULT_THEME = exports.CARD_GENERATOR_DEFAULT = exports.PREVIEW_URL = void 0;
exports.isFlexConnector = isFlexConnector;
exports.getFlpConfigWithDefaults = getFlpConfigWithDefaults;
exports.sanitizeConfig = sanitizeConfig;
exports.sanitizeRtaConfig = sanitizeRtaConfig;
exports.addApp = addApp;
exports.getAppName = getAppName;
exports.createFlpTemplateConfig = createFlpTemplateConfig;
exports.createTestTemplateConfig = createTestTemplateConfig;
exports.getPreviewPaths = getPreviewPaths;
exports.generatePreviewFiles = generatePreviewFiles;
const logger_1 = require("@sap-ux/logger");
const ejs_1 = require("ejs");
const path_1 = require("path");
const project_access_1 = require("@sap-ux/project-access");
const fs_1 = require("fs");
const test_1 = require("./test");
const mem_fs_editor_1 = require("mem-fs-editor");
const mem_fs_1 = require("mem-fs");
/**
 * Static settings
 */
exports.PREVIEW_URL = {
    client: {
        path: '/preview/client',
        getUrl: (basePath) => path_1.posix.join(basePath, 'preview', 'client'),
        local: (0, path_1.join)(__dirname, '../../dist/client'),
        ns: 'open.ux.preview.client'
    },
    api: '/preview/api'
};
exports.CARD_GENERATOR_DEFAULT = {
    previewGeneratorSandbox: '/test/flpCardGeneratorSandbox.html',
    cardsStore: '/cards/store',
    i18nStore: '/editor/i18n'
};
/**
 * Default theme
 */
exports.DEFAULT_THEME = 'sap_horizon';
/**
 * Default path for mounting the local FLP.
 */
exports.DEFAULT_PATH = '/test/flp.html';
/**
 * Default intent
 */
exports.DEFAULT_INTENT = {
    object: 'app',
    action: 'preview'
};
/**
 * SAPUI5 delivered namespaces from https://ui5.sap.com/#/api/sap
 */
const UI5_LIBS = [
    'sap.apf',
    'sap.base',
    'sap.chart',
    'sap.collaboration',
    'sap.f',
    'sap.fe',
    'sap.fileviewer',
    'sap.gantt',
    'sap.landvisz',
    'sap.m',
    'sap.ndc',
    'sap.ovp',
    'sap.rules',
    'sap.suite',
    'sap.tnt',
    'sap.ui',
    'sap.uiext',
    'sap.ushell',
    'sap.uxap',
    'sap.viz',
    'sap.webanalytics',
    'sap.zen'
];
/**
 * Type guard for FlexConnector.
 *
 * @param connector - the connector to check
 * @returns true if the connector is a FlexConnector, false otherwise
 */
function isFlexConnector(connector) {
    return 'connector' in connector;
}
/**
 * Gets the UI5 libs dependencies from manifest.json.
 *
 * @param manifest application manifest
 * @returns UI5 libs that should preloaded
 */
function getUI5Libs(manifest) {
    const libs = manifest['sap.ui5']?.dependencies?.libs ?? {};
    // add libs that should always be preloaded
    libs['sap.m'] = {};
    libs['sap.ui.core'] = {};
    libs['sap.ushell'] = {};
    return Object.keys(libs)
        .filter((key) => {
        return UI5_LIBS.some((substring) => {
            return key === substring || key.startsWith(substring + '.');
        });
    })
        .join(',');
}
/**
 * Default configuration for the FLP.
 *
 * @param config partial configuration
 * @returns a full configuration with default values
 */
function getFlpConfigWithDefaults(config = {}) {
    const flpConfig = {
        path: config.path ?? exports.DEFAULT_PATH,
        intent: config.intent ?? exports.DEFAULT_INTENT,
        apps: config.apps ?? [],
        libs: config.libs,
        theme: config.theme,
        init: config.init,
        enhancedHomePage: config.enhancedHomePage === true
    };
    if (!flpConfig.path.startsWith('/')) {
        flpConfig.path = `/${flpConfig.path}`;
    }
    return flpConfig;
}
/**
 * The developer mode is only supported for adaptation projects, therefore, notify the user if it is wrongly configured and then disable it.
 *
 * @param config configurations from the ui5.yaml
 * @param logger logger instance
 */
function sanitizeConfig(config, logger) {
    //prettier-ignore
    if (config.rta) { //NOSONAR
        config.editors ??= {};
        config.editors.rta = sanitizeRtaConfig(config.rta, logger); //NOSONAR
        delete config.rta; //NOSONAR
    }
    if (config.editors?.rta && config.adp === undefined) {
        config.editors.rta.endpoints = config.editors.rta.endpoints.map((editor) => {
            if (editor.developerMode) {
                logger.error('developerMode is ONLY supported for SAP UI5 adaptation projects.');
                logger.warn(`developerMode for ${editor.path} disabled`);
                editor.developerMode = false;
            }
            return editor;
        });
    }
}
/**
 * Sanitize the deprecated RTA configuration.
 *
 * @param deprecatedRtaConfig deprecated RTA configuration
 * @param logger logger instance
 * @returns sanitized RTA configuration
 */
//prettier-ignore
function sanitizeRtaConfig(deprecatedRtaConfig, logger) {
    let rtaConfig;
    if (deprecatedRtaConfig) {
        const { editors, ...rta } = deprecatedRtaConfig;
        rtaConfig = { ...rta, endpoints: [...editors] };
        logger?.warn(`The configuration option 'rta' is deprecated. Please use 'editors.rta' instead.`);
    }
    return rtaConfig;
}
/**
 * Retrieves the configuration settings for UI5 flexibility services.
 *
 * @returns An array of flexibility service configurations, each specifying a connector
 *          and its options, such as the layers it applies to and its service URL, if applicable.
 */
function getFlexSettings() {
    const localConnectorPath = 'open/ux/preview/client/flp/WorkspaceConnector';
    return [
        { connector: 'LrepConnector', layers: [], url: '/sap/bc/lrep' },
        {
            applyConnector: localConnectorPath,
            writeConnector: localConnectorPath,
            custom: true
        },
        {
            connector: 'LocalStorageConnector',
            layers: ['CUSTOMER', 'USER']
        }
    ];
}
/**
 * Add an application to the local FLP preview.
 *
 * @param templateConfig configuration for the preview
 * @param manifest manifest of the additional target app
 * @param app configuration for the preview
 * @param logger logger instance
 */
async function addApp(templateConfig, manifest, app, logger) {
    const id = manifest['sap.app']?.id ?? '';
    if (manifest['sap.app']?.type === 'component') {
        logger.debug(`No application added for id '${id}' because its type is 'component'`);
        templateConfig.apps = templateConfig.apps ?? {};
        return;
    }
    const appName = getAppName(manifest, app.intent);
    templateConfig.ui5.resources[id] = app.target;
    templateConfig.apps[appName] = {
        title: (await getI18nTextFromProperty(app.local, manifest['sap.app']?.title, logger)) ?? id,
        description: (await getI18nTextFromProperty(app.local, manifest['sap.app']?.description, logger)) ?? '',
        additionalInformation: `SAPUI5.Component=${app.componentId ?? id}`,
        applicationType: 'URL',
        url: app.target
    };
}
/**
 * Get the application name based on the manifest and app configuration.
 *
 * @param manifest - The application manifest.
 * @param intent - The app configuration.
 * @returns The application name.
 */
function getAppName(manifest, intent) {
    const id = manifest['sap.app']?.id ?? '';
    intent ??= {
        object: id.replace(/\./g, ''),
        action: 'preview'
    };
    return `${intent?.object}-${intent?.action}`;
}
/**
 * Get the i18n text of the given property.
 *
 * @param projectRoot absolute path to the project root
 * @param propertyValue value of the property
 * @param logger logger instance
 * @returns i18n text of the property
 */
async function getI18nTextFromProperty(projectRoot, propertyValue, logger) {
    //i18n model format could be {{key}} or {i18n>key}
    if (!projectRoot || !propertyValue || propertyValue.search(/{{\w+}}|{i18n>\w+}/g) === -1) {
        return propertyValue;
    }
    const propertyI18nKey = propertyValue.replace(/i18n>|[{}]/g, '');
    const projectAccess = await (0, project_access_1.createProjectAccess)(projectRoot);
    const applicationIds = projectAccess.getApplicationIds();
    try {
        const bundle = (await projectAccess.getApplication(applicationIds[0]).getI18nBundles())['sap.app'];
        return bundle[propertyI18nKey]?.[0]?.value?.value ?? propertyI18nKey;
    }
    catch (e) {
        logger.warn('Failed to load i18n properties bundle');
    }
    return propertyI18nKey;
}
/**
 * Creates the configuration object for the sandbox.html template.
 *
 * @param config FLP configuration
 * @param manifest application manifest
 * @param resources additional resources
 * @returns configuration object for the sandbox.html template
 */
function createFlpTemplateConfig(config, manifest, resources = {}) {
    const flex = getFlexSettings();
    const supportedThemes = manifest['sap.ui5']?.supportedThemes ?? [exports.DEFAULT_THEME];
    const ui5Theme = config.theme ?? (supportedThemes.includes(exports.DEFAULT_THEME) ? exports.DEFAULT_THEME : supportedThemes[0]);
    const id = manifest['sap.app']?.id ?? '';
    const ns = id.replace(/\./g, '/');
    const basePath = path_1.posix.relative(path_1.posix.dirname(config.path), '/') ?? '.';
    return {
        basePath: basePath,
        apps: {},
        init: config.init ? ns + config.init : undefined,
        ui5: {
            libs: getUI5Libs(manifest),
            theme: ui5Theme,
            flex,
            resources: {
                ...resources,
                [exports.PREVIEW_URL.client.ns]: exports.PREVIEW_URL.client.getUrl(basePath)
            },
            bootstrapOptions: ''
        },
        locateReuseLibsScript: config.libs,
        enhancedHomePage: config.enhancedHomePage,
        enableCardGenerator: false
    };
}
/**
 * Creates the configuration object for the test template.
 *
 * @param config test configuration
 * @param id application id
 * @param theme theme to be used
 * @returns configuration object for the test template
 */
function createTestTemplateConfig(config, id, theme) {
    return {
        id,
        framework: config.framework,
        basePath: path_1.posix.relative(path_1.posix.dirname(config.path), '/') ?? '.',
        initPath: path_1.posix.relative(path_1.posix.dirname(config.path), config.init),
        theme
    };
}
/**
 * Returns the preview paths.
 *
 * @param config configuration from the ui5.yaml
 * @param logger logger instance
 * @returns an array of preview paths
 */
function getPreviewPaths(config, logger = new logger_1.ToolsLogger()) {
    const urls = [];
    // remove incorrect configurations
    sanitizeConfig(config, logger);
    // add flp preview url
    const flpConfig = getFlpConfigWithDefaults(config.flp);
    urls.push({ path: `${flpConfig.path}#${flpConfig.intent.object}-${flpConfig.intent.action}`, type: 'preview' });
    // add editor urls
    if (config.editors?.rta) {
        config.editors.rta.endpoints.forEach((endpoint) => {
            urls.push({ path: endpoint.path, type: 'editor' });
        });
    }
    // add test urls if configured
    if (config.test) {
        config.test.forEach((test) => {
            const testConfig = (0, test_1.mergeTestConfigDefaults)(test);
            urls.push({ path: testConfig.path, type: 'test' });
        });
    }
    return urls;
}
const TEMPLATE_PATH = (0, path_1.join)(__dirname, '../../templates');
/**
 * Generate test runners.
 *
 * @param configs array of test configurations
 * @param manifest application manifest
 * @param fs mem fs editor instance
 * @param webappPath webapp path
 * @param flpTemplConfig FLP configuration
 */
function generateTestRunners(configs, manifest, fs, webappPath, flpTemplConfig) {
    for (const test of configs ?? []) {
        const testConfig = (0, test_1.mergeTestConfigDefaults)(test);
        if (['QUnit', 'OPA5'].includes(test.framework)) {
            const testTemlpate = (0, fs_1.readFileSync)((0, path_1.join)(TEMPLATE_PATH, 'test/qunit.html'), 'utf-8');
            const testTemplateConfig = createTestTemplateConfig(testConfig, manifest['sap.app'].id, flpTemplConfig.ui5.theme);
            fs.write((0, path_1.join)(webappPath, testConfig.path), (0, ejs_1.render)(testTemlpate, testTemplateConfig));
        }
        else if (test.framework === 'Testsuite') {
            const testTemlpate = (0, fs_1.readFileSync)((0, path_1.join)(TEMPLATE_PATH, 'test/testsuite.qunit.html'), 'utf-8');
            const testTemplateConfig = {
                basePath: flpTemplConfig.basePath,
                initPath: testConfig.init
            };
            fs.write((0, path_1.join)(webappPath, testConfig.path), (0, ejs_1.render)(testTemlpate, testTemplateConfig));
        }
    }
}
/**
 * Generates the preview files.
 *
 * @param basePath path to the application root
 * @param config configuration from the ui5.yaml
 * @param fs file system editor
 * @param logger logger instance
 * @returns a mem-fs editor with the preview files
 */
async function generatePreviewFiles(basePath, config, fs, logger = new logger_1.ToolsLogger()) {
    // remove incorrect configurations
    sanitizeConfig(config, logger);
    // create file system if not provided
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    // generate FLP configuration
    const flpTemplate = (0, fs_1.readFileSync)((0, path_1.join)(TEMPLATE_PATH, 'flp/sandbox.html'), 'utf-8');
    const flpConfig = getFlpConfigWithDefaults(config.flp);
    const webappPath = await (0, project_access_1.getWebappPath)(basePath, fs);
    let manifest;
    if (fs.exists((0, path_1.join)(webappPath, 'manifest.json'))) {
        manifest = (await fs.readJSON((0, path_1.join)(webappPath, 'manifest.json')));
    }
    let flpTemplConfig;
    let flpPath;
    if (manifest) {
        flpTemplConfig = createFlpTemplateConfig(flpConfig, manifest);
        flpPath = (0, path_1.join)(webappPath, flpConfig.path);
        await addApp(flpTemplConfig, manifest, {
            target: flpTemplConfig.basePath,
            local: '.',
            intent: flpConfig.intent
        }, logger);
        generateTestRunners(config.test, manifest, fs, webappPath, flpTemplConfig);
    }
    else {
        flpTemplConfig = createFlpTemplateConfig(flpConfig, {});
        flpPath = (0, path_1.join)(basePath, flpConfig.path);
    }
    if (flpConfig.apps.length > 0) {
        for (const app of flpConfig.apps) {
            if (app.local) {
                const appPath = await (0, project_access_1.getWebappPath)((0, path_1.join)(basePath, app.local), fs);
                if (fs.exists((0, path_1.join)(appPath, 'manifest.json'))) {
                    const appManifest = (await fs.readJSON((0, path_1.join)(appPath, 'manifest.json')));
                    await addApp(flpTemplConfig, appManifest, app, logger);
                }
                else {
                    logger.warn(`Could not add route for ${app}`);
                }
            }
        }
    }
    fs.write(flpPath, (0, ejs_1.render)(flpTemplate, flpTemplConfig));
    return fs;
}
//# sourceMappingURL=config.js.map