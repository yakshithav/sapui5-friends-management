"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeTestConfigDefaults = mergeTestConfigDefaults;
exports.generateImportList = generateImportList;
const DEFAULTS = {
    qunit: {
        path: '/test/unitTests.qunit.html',
        init: '/test/unitTests.qunit.js',
        pattern: '/test/**/*Test.*',
        framework: 'QUnit'
    },
    opa5: {
        path: '/test/opaTests.qunit.html',
        init: '/test/opaTests.qunit.js',
        pattern: '/test/**/*Journey.*',
        framework: 'OPA5'
    },
    testsuite: {
        path: '/test/testsuite.qunit.html',
        init: '/test/testsuite.qunit.js',
        pattern: '',
        framework: 'Testsuite'
    }
};
/**
 * Merge the given test configuration with the default values.
 *
 * @param config test configuration
 * @returns merged test configuration
 */
function mergeTestConfigDefaults(config) {
    const defaults = DEFAULTS[config.framework.toLowerCase()] ?? {};
    const merged = { ...defaults, ...config };
    if (!merged.path.startsWith('/')) {
        merged.path = `/${merged.path}`;
    }
    if (!merged.init.startsWith('/')) {
        merged.init = `/${config.init}`;
    }
    return merged;
}
/**
 * Generate a list of imports from a list of resources.
 *
 * @param ns namespace of the test files
 * @param resourceList list of resources representing test files
 * @returns array of strings representing the tests
 */
function generateImportList(ns, resourceList) {
    return resourceList
        ? resourceList.map((file) => {
            const path = file.getPath().split('.');
            path.pop();
            return `${ns}${path.join('.')}`;
        })
        : [];
}
//# sourceMappingURL=test.js.map