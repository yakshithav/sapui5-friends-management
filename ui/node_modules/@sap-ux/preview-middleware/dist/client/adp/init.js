'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../utils/version',
    '../cpe/communication-service',
    '../cpe/init',
    './sync-views-utils',
    '../utils/application',
    './quick-actions/load',
    './init-dialogs'
], function (log, ___sap_ux_private_control_property_editor_common, ___utils_version, ___cpe_communication_service, __init, ___sync_views_utils, ___utils_application, ___quick_actions_load, ___init_dialogs) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    function __ui5_require_async(path) {
        return new Promise(function (resolve, reject) {
            sap.ui.require([path], function (module) {
                if (!(module && module.__esModule)) {
                    module = module === null || !(typeof module === 'object' && path.endsWith('/library')) ? { default: module } : module;
                    Object.defineProperty(module, '__esModule', { value: true });
                }
                resolve(module);
            }, function (err) {
                reject(err);
            });
        });
    }
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const enableTelemetry = ___sap_ux_private_control_property_editor_common['enableTelemetry'];
    const getUi5Version = ___utils_version['getUi5Version'];
    const getUI5VersionValidationMessage = ___utils_version['getUI5VersionValidationMessage'];
    const isLowerThanMinimalUi5Version = ___utils_version['isLowerThanMinimalUi5Version'];
    const CommunicationService = ___cpe_communication_service['CommunicationService'];
    const init = _interopRequireDefault(__init);
    const updateSyncViewsIds = ___sync_views_utils['updateSyncViewsIds'];
    const showSyncViewsWarning = ___sync_views_utils['showSyncViewsWarning'];
    const getApplicationType = ___utils_application['getApplicationType'];
    const loadDefinitions = ___quick_actions_load['loadDefinitions'];
    const initDialogs = ___init_dialogs['initDialogs'];
    var __exports = async function (rta) {
        const flexSettings = rta.getFlexSettings();
        if (flexSettings.telemetry === true) {
            enableTelemetry();
        }
        const ui5VersionInfo = await getUi5Version();
        const defaultPlugins = rta.getDefaultPlugins();
        rta.setPlugins(defaultPlugins);
        if (isLowerThanMinimalUi5Version(ui5VersionInfo, {
                major: 1,
                minor: 136,
                patch: 2
            })) {
            await initDialogs(rta, ui5VersionInfo);
        } else {
            (await __ui5_require_async('open/ux/preview/client/adp/add-fragment')).initAddXMLPlugin(rta);
            (await __ui5_require_async('open/ux/preview/client/adp/extend-controller')).initExtendControllerPlugin(rta);
        }
        if (!isLowerThanMinimalUi5Version(ui5VersionInfo, {
                major: 1,
                minor: 78
            })) {
            const ExtensionPointService = (await __ui5_require_async('open/ux/preview/client/adp/extension-point')).default;
            const extPointService = new ExtensionPointService(rta);
            extPointService.init();
        }
        const applicationType = getApplicationType(rta.getRootControlInstance().getManifest());
        const quickActionRegistries = await loadDefinitions(applicationType);
        await init(rta, quickActionRegistries);
        rta.getService('outline').then(outlineService => {
            outlineService.attachEvent('update', async () => {
                await updateSyncViewsIds(ui5VersionInfo);
                await showSyncViewsWarning();
            });
        }).catch(error => {
            log.error('Failed to attach update event to outline service', error);
        });
        if (isLowerThanMinimalUi5Version(ui5VersionInfo)) {
            CommunicationService.sendAction(showMessage({
                message: getUI5VersionValidationMessage(ui5VersionInfo),
                shouldHideIframe: true
            }));
            return;
        }
        log.debug('ADP init executed.');
    };
    return __exports;
});