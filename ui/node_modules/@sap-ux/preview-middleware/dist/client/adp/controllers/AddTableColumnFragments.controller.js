'use strict';
sap.ui.define([
    'sap/ui/model/json/JSONModel',
    'sap/ui/dt/OverlayRegistry',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../i18n',
    '../../cpe/communication-service',
    '../control-utils',
    '../command-executor',
    '../api-handler',
    './BaseDialog.controller',
    '../utils',
    'sap/ui/core/library',
    '../../utils/additional-change-info'
], function (JSONModel, OverlayRegistry, ___sap_ux_private_control_property_editor_common, ____i18n, ____cpe_communication_service, __ControlUtils, __CommandExecutor, ___api_handler, __BaseDialog, ___utils, sap_ui_core_library, ____utils_additional_change_info) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    const setApplicationRequiresReload = ___sap_ux_private_control_property_editor_common['setApplicationRequiresReload'];
    const getResourceModel = ____i18n['getResourceModel'];
    const getTextBundle = ____i18n['getTextBundle'];
    const CommunicationService = ____cpe_communication_service['CommunicationService'];
    const ControlUtils = _interopRequireDefault(__ControlUtils);
    const CommandExecutor = _interopRequireDefault(__CommandExecutor);
    const getFragments = ___api_handler['getFragments'];
    const BaseDialog = _interopRequireDefault(__BaseDialog);
    const notifyUser = ___utils['notifyUser'];
    const ValueState = sap_ui_core_library['ValueState'];
    const setAdditionalChangeInfoForChangeFile = ____utils_additional_change_info['setAdditionalChangeInfoForChangeFile'];
    const radix = 10;
    const COLUMNS_AGGREGATION = 'columns';
    const ITEMS_AGGREGATION = 'items';
    const CELLS_AGGREGATION = 'cells';
    const AddTableColumnFragments = BaseDialog.extend('open.ux.preview.client.adp.controllers.AddTableColumnFragments', {
        constructor: function _constructor(name, overlays, rta, options, telemetryData) {
            BaseDialog.prototype.constructor.call(this, name, telemetryData);
            this.options = options;
            this.rta = rta;
            this.overlays = overlays;
            this.model = new JSONModel({ title: options.title });
            this.commandExecutor = new CommandExecutor(this.rta);
        },
        setup: async function _setup(dialog) {
            this.dialog = dialog;
            this.setEscapeHandler();
            await this.buildDialogData();
            const resourceModel = await getResourceModel('open.ux.preview.client');
            this.dialog.setModel(resourceModel, 'i18n');
            this.dialog.setModel(this.model);
            this.dialog.open();
        },
        onCreateBtnPress: async function _onCreateBtnPress(event) {
            await BaseDialog.prototype.onCreateBtnPressHandler.call(this);
            const source = event.getSource();
            source.setEnabled(false);
            const columnFragmentName = this.model.getProperty('/newColumnFragmentName');
            const cellFragmentName = this.model.getProperty('/newCellFragmentName');
            const index = this.model.getProperty('/selectedIndex');
            const fragmentData = {
                index,
                fragments: [
                    {
                        fragmentName: columnFragmentName,
                        targetAggregation: this.model.getProperty('/selectedColumnsAggregation')
                    },
                    {
                        fragmentName: cellFragmentName,
                        targetAggregation: this.model.getProperty('/selectedItemsAggregation')
                    }
                ]
            };
            await this.createFragmentChange(fragmentData);
            const textKey = 'ADP_ADD_TWO_FRAGMENTS_WITH_TEMPLATE_NOTIFICATION';
            const bundle = await getTextBundle();
            notifyUser(bundle.getText(textKey, fragmentData.fragments.map(item => item.fragmentName)), 8000);
            this.handleDialogClose();
        },
        buildDialogData: async function _buildDialogData() {
            const {controlMetadata, targetAggregation} = this.getControlMetadata();
            const defaultAggregation = this.options.aggregation ?? controlMetadata.getDefaultAggregationName();
            const selectedControlName = controlMetadata.getName();
            let selectedControlChildren = Object.keys(ControlUtils.getControlAggregationByName(this.getRuntimeControl(), defaultAggregation));
            selectedControlChildren = selectedControlChildren.map(key => {
                return parseInt(key, radix);
            });
            this.model.setProperty('/selectedControlName', selectedControlName);
            const indexArray = this.fillIndexArray(selectedControlChildren);
            if (!targetAggregation.includes(COLUMNS_AGGREGATION)) {
                throw new Error(`Selected control does not have "${ COLUMNS_AGGREGATION }" aggregation`);
            }
            this.model.setProperty('/selectedColumnsAggregation', COLUMNS_AGGREGATION);
            this.specialIndexHandling(COLUMNS_AGGREGATION);
            if (!targetAggregation.includes(ITEMS_AGGREGATION)) {
                throw new Error(`Selected control does not have "${ ITEMS_AGGREGATION }" aggregation`);
            }
            this.model.setProperty('/selectedItemsAggregation', ITEMS_AGGREGATION);
            try {
                const {fragments} = await getFragments();
                this.model.setProperty('/fragmentList', fragments);
            } catch (e) {
                this.handleError(e);
            }
            this.model.setProperty('/index', indexArray);
            this.model.setProperty('/selectedIndex', indexArray.length - 1);
        },
        updateFormState: function _updateFormState() {
            const form = this.dialog.getContent()[0];
            const formContent = form.getContent();
            const inputs = formContent.filter(item => item.isA('sap.m.Input'));
            const value1 = inputs[0].getValue();
            const value2 = inputs[1].getValue();
            if (value1 === value2 && value1.length) {
                inputs.forEach(input => {
                    if (input.getValueState() === ValueState.Success) {
                        input.setValueState(ValueState.Error).setValueStateText('Duplicate name');
                    }
                });
            } else {
                inputs.forEach(input => {
                    if (input.getValueState() === ValueState.Error && input.getValueStateText() === 'Duplicate name') {
                        input.setValueState(ValueState.Success);
                    }
                });
            }
            const beginBtn = this.dialog.getBeginButton();
            beginBtn.setEnabled(inputs.every(input => input.getValueState() === ValueState.Success));
        },
        onColumnFragmentNameInputChange: function _onColumnFragmentNameInputChange(event) {
            BaseDialog.prototype.onFragmentNameInputChange.call(this, event);
            const input = event.getSource();
            let modelValue = input.getValue();
            if (modelValue.length < 1) {
                modelValue = null;
            }
            this.model.setProperty('/newColumnFragmentName', modelValue);
            this.updateFormState();
        },
        onCellFragmentNameInputChange: function _onCellFragmentNameInputChange(event) {
            BaseDialog.prototype.onFragmentNameInputChange.call(this, event);
            const input = event.getSource();
            let modelValue = input.getValue();
            if (input.getValue().length < 1) {
                modelValue = null;
            }
            this.model.setProperty('/newCellFragmentName', modelValue);
            this.updateFormState();
        },
        createFragmentChange: async function _createFragmentChange(fragmentData) {
            const {fragments, index} = fragmentData;
            const flexSettings = this.rta.getFlexSettings();
            const overlay = OverlayRegistry.getOverlay(this.getRuntimeControl());
            const designMetadata = overlay.getDesignTimeMetadata();
            const compositeCommand = await this.commandExecutor.createCompositeCommand(this.getRuntimeControl());
            for (const fragment of fragments) {
                const modifiedValue = {
                    fragment: `<core:FragmentDefinition xmlns:core='sap.ui.core'></core:FragmentDefinition>`,
                    fragmentPath: `fragments/${ fragment.fragmentName }.fragment.xml`,
                    index: index ?? 0,
                    targetAggregation: fragment.targetAggregation === ITEMS_AGGREGATION ? CELLS_AGGREGATION : fragment.targetAggregation
                };
                const targetObject = fragment.targetAggregation === COLUMNS_AGGREGATION ? this.getRuntimeControl() : this.getRuntimeControl().getAggregation(ITEMS_AGGREGATION)[0];
                const command = await this.commandExecutor.getCommand(targetObject, 'addXML', modifiedValue, flexSettings, designMetadata);
                const templateName = fragment.targetAggregation === COLUMNS_AGGREGATION ? `V2_SMART_TABLE_COLUMN` : 'V2_SMART_TABLE_CELL';
                const preparedChange = command.getPreparedChange();
                setAdditionalChangeInfoForChangeFile(preparedChange.getDefinition().fileName, { templateName });
                compositeCommand.addCommand(command, false);
            }
            await this.commandExecutor.pushAndExecuteCommand(compositeCommand);
            CommunicationService.sendAction(setApplicationRequiresReload(true));
        }
    });
    return AddTableColumnFragments;
});