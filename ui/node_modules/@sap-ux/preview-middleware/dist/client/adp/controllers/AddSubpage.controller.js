'use strict';
sap.ui.define([
    'sap/ui/model/json/JSONModel',
    '../../i18n',
    '../command-executor',
    './BaseDialog.controller',
    'sap/ui/rta/command/CommandFactory',
    '../../cpe/communication-service',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../quick-actions/fe-v4/utils'
], function (JSONModel, ____i18n, __CommandExecutor, __BaseDialog, CommandFactory, ____cpe_communication_service, ___sap_ux_private_control_property_editor_common, ___quick_actions_fe_v4_utils) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    const getResourceModel = ____i18n['getResourceModel'];
    const CommandExecutor = _interopRequireDefault(__CommandExecutor);
    const BaseDialog = _interopRequireDefault(__BaseDialog);
    const CommunicationService = ____cpe_communication_service['CommunicationService'];
    const setApplicationRequiresReload = ___sap_ux_private_control_property_editor_common['setApplicationRequiresReload'];
    const generateRoutePattern = ___quick_actions_fe_v4_utils['generateRoutePattern'];
    const AddSubpage = BaseDialog.extend('open.ux.preview.client.adp.controllers.AddSubpage', {
        constructor: function _constructor(name, overlays, rta, options, telemetryData) {
            BaseDialog.prototype.constructor.call(this, name, telemetryData);
            this.options = options;
            this.rta = rta;
            this.overlays = overlays;
            this.model = new JSONModel({
                title: options.title,
                navigationData: options.navProperties
            });
            this.commandExecutor = new CommandExecutor(this.rta);
        },
        setup: async function _setup(dialog) {
            this.dialog = dialog;
            this.setEscapeHandler();
            await this.buildDialogData();
            const resourceModel = await getResourceModel('open.ux.preview.client');
            this.dialog.setModel(resourceModel, 'i18n');
            this.dialog.setModel(this.model);
            this.dialog.open();
        },
        onPageTypeChange: function _onPageTypeChange() {
        },
        onNavigationChange: function _onNavigationChange(event) {
            const source = event.getSource();
            const selectedKey = source.getSelectedKey();
            this.model.setProperty('/selectedNavigation/key', selectedKey);
        },
        onCreateBtnPress: async function _onCreateBtnPress(event) {
            await BaseDialog.prototype.onCreateBtnPressHandler.call(this);
            const source = event.getSource();
            source.setEnabled(false);
            const flexSettings = this.rta.getFlexSettings();
            const navProperty = this.model.getProperty('/selectedNavigation/key');
            const navigation = this.model.getProperty('/navigationData').find(item => item.navProperty = navProperty);
            const targetEntitySet = navigation?.entitySet ?? '';
            const pageDescriptor = this.options.pageDescriptor;
            let modifiedValue;
            if (pageDescriptor.appType === 'fe-v2') {
                modifiedValue = {
                    appComponent: pageDescriptor.appComponent,
                    changeType: 'appdescr_ui_generic_app_addNewObjectPage',
                    reference: this.options.appReference,
                    parameters: {
                        parentPage: {
                            component: pageDescriptor.pageType,
                            entitySet: pageDescriptor.entitySet
                        },
                        childPage: {
                            id: `ObjectPage|${ navProperty }`,
                            definition: {
                                entitySet: targetEntitySet,
                                navigationProperty: navProperty
                            }
                        }
                    }
                };
            } else {
                const routePattern = generateRoutePattern(pageDescriptor.routePattern, navProperty, targetEntitySet);
                modifiedValue = {
                    appComponent: pageDescriptor.appComponent,
                    changeType: 'appdescr_fe_addNewPage',
                    reference: this.options.appReference,
                    parameters: {
                        sourcePage: {
                            id: pageDescriptor.pageId,
                            navigationSource: navProperty
                        },
                        targetPage: {
                            type: 'Component',
                            id: `${ targetEntitySet }ObjectPage`,
                            name: 'sap.fe.templates.ObjectPage',
                            routePattern,
                            settings: {
                                contextPath: `/${ targetEntitySet }`,
                                editableHeaderContent: false,
                                entitySet: targetEntitySet,
                                pageLayout: '',
                                controlConfiguration: {}
                            }
                        }
                    }
                };
            }
            const command = await CommandFactory.getCommandFor(this.getRuntimeControl(), 'appDescriptor', modifiedValue, null, flexSettings);
            await this.commandExecutor.pushAndExecuteCommand(command);
            CommunicationService.sendAction(setApplicationRequiresReload(true));
            this.handleDialogClose();
        },
        buildDialogData: async function _buildDialogData() {
            this.getControlMetadata();
            const pageTypeOptions = [
                {
                    key: 'ObjectPage',
                    value: 'Object Page'
                },
                {
                    key: 'CustomPage',
                    value: 'Custom Page'
                }
            ];
            this.model.setProperty('/pageTypeOptions', pageTypeOptions);
            this.model.setProperty('/selectedPageType', pageTypeOptions[0]);
            const navigationOptions = this.model.getProperty('/navigationData').map(item => {
                const value = item.entitySet === item.navProperty ? item.entitySet : `${ item.entitySet } (${ item.navProperty })`;
                return {
                    key: item.navProperty,
                    value
                };
            });
            this.model.setProperty('/navigationOptions', navigationOptions);
            this.model.setProperty('/selectedNavigation', navigationOptions[0]);
            return Promise.resolve();
        }
    });
    return AddSubpage;
});