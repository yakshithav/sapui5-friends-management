'use strict';
sap.ui.define([
    'sap/ui/model/json/JSONModel',
    '../../i18n',
    '../command-executor',
    '../api-handler',
    './BaseDialog.controller',
    '../utils',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../cpe/communication-service'
], function (JSONModel, ____i18n, __CommandExecutor, ___api_handler, __BaseDialog, ___utils, ___sap_ux_private_control_property_editor_common, ____cpe_communication_service) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    const getResourceModel = ____i18n['getResourceModel'];
    const getTextBundle = ____i18n['getTextBundle'];
    const CommandExecutor = _interopRequireDefault(__CommandExecutor);
    const getFragments = ___api_handler['getFragments'];
    const BaseDialog = _interopRequireDefault(__BaseDialog);
    const notifyUser = ___utils['notifyUser'];
    const setApplicationRequiresReload = ___sap_ux_private_control_property_editor_common['setApplicationRequiresReload'];
    const CommunicationService = ____cpe_communication_service['CommunicationService'];
    const AddCustomFragment = BaseDialog.extend('open.ux.preview.client.adp.controllers.AddCustomFragment', {
        constructor: function _constructor(name, overlays, rta, options, telemetryData) {
            BaseDialog.prototype.constructor.call(this, name, telemetryData);
            this.options = options;
            this.rta = rta;
            this.overlays = overlays;
            this.model = new JSONModel({ title: options.title });
            this.commandExecutor = new CommandExecutor(this.rta);
        },
        setup: async function _setup(dialog) {
            this.dialog = dialog;
            this.setEscapeHandler();
            await this.buildDialogData();
            const resourceModel = await getResourceModel('open.ux.preview.client');
            this.dialog.setModel(resourceModel, 'i18n');
            this.dialog.setModel(this.model);
            this.dialog.open();
        },
        onCreateBtnPress: async function _onCreateBtnPress(event) {
            const source = event.getSource();
            source.setEnabled(false);
            await BaseDialog.prototype.onCreateBtnPressHandler.call(this);
            const fragmentName = this.model.getProperty('/newFragmentName');
            const template = `fragments.${ fragmentName }`;
            await this.createAppDescriptorChangeForV4(template);
            CommunicationService.sendAction(setApplicationRequiresReload(true));
            const bundle = await getTextBundle();
            notifyUser(bundle.getText('ADP_ADD_FRAGMENT_NOTIFICATION', [fragmentName]), 8000);
            this.handleDialogClose();
        },
        buildDialogData: async function _buildDialogData() {
            try {
                const {fragments} = await getFragments();
                this.model.setProperty('/fragmentList', fragments);
            } catch (e) {
                this.handleError(e);
            }
        },
        createAppDescriptorChangeForV4: async function _createAppDescriptorChangeForV(templatePath) {
            const fragmentName = this.model.getProperty('/newFragmentName');
            const template = `${ this.options.appDescriptor?.projectId }.changes.${ templatePath }`;
            let sectionId = this.options.appDescriptor?.anchor;
            const flexSettings = this.rta.getFlexSettings();
            const modifiedValue = {
                reference: this.options.appDescriptor?.projectId,
                appComponent: this.options.appDescriptor?.appComponent,
                changeType: 'appdescr_fe_changePageConfiguration',
                parameters: {
                    page: this.options.appDescriptor?.pageId,
                    entityPropertyChange: {
                        propertyPath: `${ this.options.propertyPath }${ fragmentName }`,
                        operation: 'UPSERT',
                        propertyValue: {
                            template,
                            title: 'New Custom Section',
                            position: {
                                placement: 'After',
                                anchor: `${ sectionId }`
                            }
                        }
                    }
                }
            };
            const command = await this.commandExecutor.getCommand(this.getRuntimeControl(), 'appDescriptor', modifiedValue, flexSettings);
            await this.commandExecutor.pushAndExecuteCommand(command);
        }
    });
    return AddCustomFragment;
});