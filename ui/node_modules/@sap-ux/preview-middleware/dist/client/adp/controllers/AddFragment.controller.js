'use strict';
sap.ui.define([
    'sap/ui/model/json/JSONModel',
    'sap/ui/dt/OverlayRegistry',
    '../../i18n',
    '../control-utils',
    '../command-executor',
    '../api-handler',
    './BaseDialog.controller',
    '../utils',
    '../../cpe/additional-change-info/add-xml-additional-info',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../cpe/communication-service'
], function (JSONModel, OverlayRegistry, ____i18n, __ControlUtils, __CommandExecutor, ___api_handler, __BaseDialog, ___utils, ____cpe_additional_change_info_add_xml_additional_info, ___sap_ux_private_control_property_editor_common, ____cpe_communication_service) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    const getResourceModel = ____i18n['getResourceModel'];
    const getTextBundle = ____i18n['getTextBundle'];
    const ControlUtils = _interopRequireDefault(__ControlUtils);
    const CommandExecutor = _interopRequireDefault(__CommandExecutor);
    const getFragments = ___api_handler['getFragments'];
    const BaseDialog = _interopRequireDefault(__BaseDialog);
    const notifyUser = ___utils['notifyUser'];
    const getFragmentTemplateName = ____cpe_additional_change_info_add_xml_additional_info['getFragmentTemplateName'];
    const setApplicationRequiresReload = ___sap_ux_private_control_property_editor_common['setApplicationRequiresReload'];
    const CommunicationService = ____cpe_communication_service['CommunicationService'];
    const radix = 10;
    const AddFragment = BaseDialog.extend('open.ux.preview.client.adp.controllers.AddFragment', {
        constructor: function _constructor(name, overlays, rta, options, data, telemetryData) {
            BaseDialog.prototype.constructor.call(this, name, telemetryData);
            this.options = options;
            this.rta = rta;
            this.overlays = overlays;
            this.model = new JSONModel({
                title: options.title,
                completeView: options.aggregation === undefined
            });
            this.commandExecutor = new CommandExecutor(this.rta);
            this.data = data;
        },
        setup: async function _setup(dialog) {
            this.dialog = dialog;
            this.setEscapeHandler();
            await this.buildDialogData();
            const resourceModel = await getResourceModel('open.ux.preview.client');
            this.dialog.setModel(resourceModel, 'i18n');
            this.dialog.setModel(this.model);
            this.dialog.open();
        },
        onAggregationChanged: function _onAggregationChanged(event) {
            const source = event.getSource();
            const selectedKey = source.getSelectedKey();
            const selectedItem = source.getSelectedItem();
            let selectedItemText = '';
            if (selectedItem) {
                selectedItemText = selectedItem.getText();
            }
            this.model.setProperty('/selectedAggregation/key', selectedKey);
            this.model.setProperty('/selectedAggregation/value', selectedItemText);
            let newSelectedControlChildren = Object.keys(ControlUtils.getControlAggregationByName(this.getRuntimeControl(), selectedItemText));
            newSelectedControlChildren = newSelectedControlChildren.map(key => {
                return parseInt(key, radix);
            });
            this.specialIndexHandling(selectedItemText);
            const updatedIndexArray = this.fillIndexArray(newSelectedControlChildren);
            this.model.setProperty('/index', updatedIndexArray);
            this.model.setProperty('/selectedIndex', updatedIndexArray.length - 1);
        },
        onCreateBtnPress: async function _onCreateBtnPress(event) {
            const source = event.getSource();
            source.setEnabled(false);
            await BaseDialog.prototype.onCreateBtnPressHandler.call(this);
            const fragmentName = this.model.getProperty('/newFragmentName');
            const index = this.model.getProperty('/selectedIndex');
            const targetAggregation = this.model.getProperty('/selectedAggregation/value') ?? 'content';
            const modifiedValue = {
                fragment: `<core:FragmentDefinition xmlns:core='sap.ui.core'></core:FragmentDefinition>`,
                fragmentPath: `fragments/${ fragmentName }.fragment.xml`,
                index: index ?? 0,
                targetAggregation: targetAggregation ?? 'content'
            };
            if (this.data) {
                this.data.deferred.resolve(modifiedValue);
            } else {
                await this.createFragmentChange(modifiedValue);
            }
            const templateName = getFragmentTemplateName(this.getRuntimeControl().getId(), targetAggregation);
            if (templateName) {
                CommunicationService.sendAction(setApplicationRequiresReload(true));
            }
            const bundle = await getTextBundle();
            notifyUser(bundle.getText('ADP_ADD_FRAGMENT_NOTIFICATION', [fragmentName]), 8000);
            this.handleDialogClose();
        },
        buildDialogData: async function _buildDialogData() {
            const {controlMetadata, targetAggregation} = this.getControlMetadata();
            const defaultAggregation = this.options.aggregation ?? controlMetadata.getDefaultAggregationName();
            const selectedControlName = controlMetadata.getName();
            let selectedControlChildren = Object.keys(ControlUtils.getControlAggregationByName(this.getRuntimeControl(), defaultAggregation));
            selectedControlChildren = selectedControlChildren.map(key => {
                return parseInt(key, radix);
            });
            this.model.setProperty('/selectedControlName', selectedControlName);
            this.model.setProperty('/selectedAggregation', {});
            const indexArray = this.fillIndexArray(selectedControlChildren);
            const controlAggregation = targetAggregation.map((elem, index) => {
                return {
                    key: index,
                    value: elem
                };
            });
            if (defaultAggregation !== null) {
                controlAggregation.forEach(obj => {
                    if (obj.value === defaultAggregation) {
                        obj.key = 'default';
                        this.model.setProperty('/selectedAggregation/key', obj.key);
                        this.model.setProperty('/selectedAggregation/value', obj.value);
                        this.specialIndexHandling(obj.value);
                    }
                });
            } else {
                this.model.setProperty('/selectedAggregation/key', controlAggregation[0].key);
                this.model.setProperty('/selectedAggregation/value', controlAggregation[0].value);
                this.specialIndexHandling(controlAggregation[0].value);
            }
            try {
                const {fragments} = await getFragments();
                this.model.setProperty('/fragmentList', fragments);
            } catch (e) {
                this.handleError(e);
            }
            this.model.setProperty('/selectedIndex', indexArray.length - 1);
            this.model.setProperty('/targetAggregation', controlAggregation);
            this.model.setProperty('/index', indexArray);
            const defaultIndex = Number(this.options.defaultAggregationArrayIndex);
            if (defaultIndex >= 0) {
                this.model.setProperty('/selectedIndex', indexArray.length - 1 > 0 ? defaultIndex : 0);
            }
        },
        createFragmentChange: async function _createFragmentChange(modifiedValue) {
            const flexSettings = this.rta.getFlexSettings();
            const overlay = OverlayRegistry.getOverlay(this.getRuntimeControl());
            const designMetadata = overlay.getDesignTimeMetadata();
            const command = await this.commandExecutor.getCommand(this.getRuntimeControl(), 'addXML', modifiedValue, flexSettings, designMetadata);
            await this.commandExecutor.pushAndExecuteCommand(command);
        }
    });
    return AddFragment;
});