'use strict';
sap.ui.define([
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    'sap/ui/dt/OverlayUtil',
    '../../cpe/quick-actions/utils',
    '../../utils/core',
    '../../utils/version',
    './quick-action-base',
    './control-types'
], function (___sap_ux_private_control_property_editor_common, OverlayUtil, ____cpe_quick_actions_utils, ____utils_core, ____utils_version, ___quick_action_base, ___control_types) {
    'use strict';
    const NESTED_QUICK_ACTION_KIND = ___sap_ux_private_control_property_editor_common['NESTED_QUICK_ACTION_KIND'];
    const getParentContainer = ____cpe_quick_actions_utils['getParentContainer'];
    const getRelevantControlFromActivePage = ____cpe_quick_actions_utils['getRelevantControlFromActivePage'];
    const getControlById = ____utils_core['getControlById'];
    const isA = ____utils_core['isA'];
    const isManagedObject = ____utils_core['isManagedObject'];
    const getUi5Version = ____utils_version['getUi5Version'];
    const isLowerThanMinimalUi5Version = ____utils_version['isLowerThanMinimalUi5Version'];
    const QuickActionDefinitionBase = ___quick_action_base['QuickActionDefinitionBase'];
    const ANALYTICAL_TABLE_TYPE = ___control_types['ANALYTICAL_TABLE_TYPE'];
    const GRID_TABLE_TYPE = ___control_types['GRID_TABLE_TYPE'];
    const M_TABLE_TYPE = ___control_types['M_TABLE_TYPE'];
    const MDC_TABLE_TYPE = ___control_types['MDC_TABLE_TYPE'];
    const SMART_TABLE_TYPE = ___control_types['SMART_TABLE_TYPE'];
    const TREE_TABLE_TYPE = ___control_types['TREE_TABLE_TYPE'];
    const SMART_TABLE_ACTION_ID = 'CTX_COMP_VARIANT_CONTENT';
    const M_TABLE_ACTION_ID = 'CTX_ADD_ELEMENTS_AS_CHILD';
    const SETTINGS_ID = 'CTX_SETTINGS';
    const REARRANGE_TOOLBAR_SETTINGS_ID = 'CTX_SETTINGS0';
    const ICON_TAB_BAR_TYPE = 'sap.m.IconTabBar';
    async function getActionId(table) {
        const {major, minor} = await getUi5Version();
        if (isA(SMART_TABLE_TYPE, table)) {
            if (major === 1 && minor === 96) {
                return [SETTINGS_ID];
            } else {
                return [SMART_TABLE_ACTION_ID];
            }
        }
        return [
            M_TABLE_ACTION_ID,
            SETTINGS_ID
        ];
    }
    async function getRearrangeToolbarContentActionId() {
        const {major, minor} = await getUi5Version();
        if (major === 1 && minor <= 127) {
            return SETTINGS_ID;
        }
        return REARRANGE_TOOLBAR_SETTINGS_ID;
    }
    class TableQuickActionDefinitionBase extends QuickActionDefinitionBase {
        isApplicable = false;
        children = [];
        tableMap = {};
        get textKey() {
            return this.defaultTextKey;
        }
        constructor(type, controlTypes, defaultTextKey, context) {
            let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            let enablementValidators = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            super(type, NESTED_QUICK_ACTION_KIND, defaultTextKey, context, enablementValidators);
            this.type = type;
            this.controlTypes = controlTypes;
            this.defaultTextKey = defaultTextKey;
            this.context = context;
            this.options = options;
            this.enablementValidators = enablementValidators;
        }
        async addSettingsActionId(table, tableMapKey) {
            if (this.options.includeServiceAction) {
                const actions = await this.context.actionService.get(table.getId());
                const actionsIds = await getActionId(table);
                const changeColumnActionId = actionsIds.find(actionId => actions.findIndex(action => action.id === actionId) > -1);
                this.tableMap[tableMapKey].changeColumnActionId = changeColumnActionId;
                const changeToolbarContentActionId = await getRearrangeToolbarContentActionId();
                const changeToolbarContentAction = actions.find(action => action.id === changeToolbarContentActionId);
                this.tableMap[tableMapKey].changeToolbarContentAction = changeToolbarContentAction ? {
                    id: changeToolbarContentAction.id,
                    enabled: changeToolbarContentAction.enabled
                } : undefined;
            }
        }
        async initialize() {
            const version = await getUi5Version();
            if (isLowerThanMinimalUi5Version(version, {
                    major: 1,
                    minor: 96
                })) {
                this.isApplicable = false;
                return;
            }
            const iconTabBarfilterMap = this.buildIconTabBarFilterMap();
            for (const table of getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, this.controlTypes)) {
                const tabKey = Object.keys(iconTabBarfilterMap).find(key => table.getId().endsWith(key));
                const section = getParentContainer(table, 'sap.uxap.ObjectPageSection');
                if (section) {
                    await this.collectChildrenInSection(section, table);
                } else if (this.iconTabBar && tabKey) {
                    const label = `'${ iconTabBarfilterMap[tabKey] }' table`;
                    const tableMapKey = this.children.length.toString();
                    const child = this.createChild(label, table, tableMapKey);
                    this.children.push(child);
                    this.tableMap[tableMapKey] = {
                        table,
                        iconTabBarFilterKey: tabKey,
                        tableUpdateEventAttachedOnce: false
                    };
                    await this.addSettingsActionId(table, tableMapKey);
                } else {
                    await this.processTable(table);
                }
            }
            if (this.children.length > 0) {
                this.isApplicable = true;
            }
        }
        getInternalTable(table) {
            try {
                let tableInternal;
                if (isA(SMART_TABLE_TYPE, table)) {
                    const itemsAggregation = table.getAggregation('items');
                    tableInternal = itemsAggregation.find(item => [
                        M_TABLE_TYPE,
                        TREE_TABLE_TYPE,
                        ANALYTICAL_TABLE_TYPE,
                        GRID_TABLE_TYPE
                    ].some(tType => isA(tType, item)));
                }
                return tableInternal;
            } catch (error) {
                return undefined;
            }
        }
        getTableLabel(table) {
            if (isA(SMART_TABLE_TYPE, table) || isA(MDC_TABLE_TYPE, table)) {
                const header = table.getHeader();
                if (header) {
                    return `'${ header }' table`;
                }
            } else if (isA(M_TABLE_TYPE, table)) {
                const title = table?.getHeaderToolbar()?.getTitleControl()?.getText();
                if (title) {
                    return `'${ title }' table`;
                }
            }
            return 'Unnamed table';
        }
        buildIconTabBarFilterMap() {
            const iconTabBarFilterMap = {};
            const tabBar = getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, [ICON_TAB_BAR_TYPE])[0];
            if (tabBar) {
                const control = getControlById(tabBar.getId());
                if (isA(ICON_TAB_BAR_TYPE, control)) {
                    this.iconTabBar = control;
                    for (const item of control.getItems()) {
                        if (isManagedObject(item) && isA('sap.m.IconTabFilter', item)) {
                            iconTabBarFilterMap[item.getKey()] = item.getText();
                        }
                    }
                }
            }
            return iconTabBarFilterMap;
        }
        async collectChildrenInSection(section, table) {
            const layout = getParentContainer(table, 'sap.uxap.ObjectPageLayout');
            const subSections = section.getSubSections();
            const subSection = getParentContainer(table, 'sap.uxap.ObjectPageSubSection');
            if (subSection) {
                if (subSections?.length === 1) {
                    await this.processTable(table, {
                        section,
                        subSection: subSections[0],
                        layout
                    });
                } else if (subSections.length > 1) {
                    const existingChildIdx = this.children.findIndex(val => val.label === `'${ section.getTitle() }' section`);
                    let tableMapIndex;
                    const label = this.getTableLabel(table);
                    if (existingChildIdx < 0) {
                        tableMapIndex = `${ this.children.length }/0`;
                        const child = this.createChild(label, table, tableMapIndex);
                        this.children.push({
                            path: this.children.length.toString(),
                            label: `'${ section?.getTitle() }' section`,
                            enabled: true,
                            children: [child]
                        });
                    } else {
                        tableMapIndex = `${ existingChildIdx }/${ this.children[existingChildIdx].children.length }`;
                        const child = this.createChild(label, table, tableMapIndex);
                        this.children[existingChildIdx].children.push(child);
                    }
                    this.tableMap[tableMapIndex] = {
                        table,
                        sectionInfo: {
                            section,
                            subSection,
                            layout
                        },
                        tableUpdateEventAttachedOnce: false
                    };
                    await this.addSettingsActionId(table, tableMapIndex);
                }
            }
        }
        async processTable(table, sectionInfo) {
            const tableMapKey = this.children.length.toString();
            if ([
                    SMART_TABLE_TYPE,
                    M_TABLE_TYPE,
                    MDC_TABLE_TYPE,
                    TREE_TABLE_TYPE,
                    GRID_TABLE_TYPE,
                    ANALYTICAL_TABLE_TYPE
                ].some(type => isA(type, table))) {
                const label = this.getTableLabel(table);
                const child = this.createChild(label, table, tableMapKey);
                this.children.push(child);
            }
            this.tableMap[tableMapKey] = {
                table,
                sectionInfo: sectionInfo,
                tableUpdateEventAttachedOnce: false
            };
            await this.addSettingsActionId(table, tableMapKey);
        }
        selectOverlay(table) {
            const controlOverlay = OverlayUtil.getClosestOverlayFor(table);
            if (controlOverlay) {
                controlOverlay.setSelected(true);
            }
        }
        getActionObject() {
            return {
                kind: NESTED_QUICK_ACTION_KIND,
                id: this.id,
                enabled: !this.isDisabled,
                tooltip: this.tooltip,
                title: this.context.resourceBundle.getText(this.textKey),
                children: this.children
            };
        }
        createChild(label, table, path) {
            const child = {
                path,
                label,
                enabled: true,
                children: []
            };
            if (!this.options.areTableRowsRequired) {
                return child;
            }
            const innerTable = this.getInternalTable(table);
            const tableRows = innerTable?.getAggregation('items') || [];
            if (isA(M_TABLE_TYPE, innerTable) && !tableRows.length) {
                child.enabled = false;
                child.tooltip = this.context.resourceBundle.getText('TABLE_CUSTOM_COLUMN_ACTION_NOT_AVAILABLE');
            }
            return child;
        }
    }
    var __exports = { __esModule: true };
    __exports.TableQuickActionDefinitionBase = TableQuickActionDefinitionBase;
    return __exports;
});