"use strict";

sap.ui.define(["../../../utils/core", "../table-quick-action-base", "../dialog-enablement-validator"], function (_____utils_core, ___table_quick_action_base, ___dialog_enablement_validator) {
  "use strict";

  const getControlById = _____utils_core["getControlById"];
  const isA = _____utils_core["isA"];
  const TableQuickActionDefinitionBase = ___table_quick_action_base["TableQuickActionDefinitionBase"];
  const DIALOG_ENABLEMENT_VALIDATOR = ___dialog_enablement_validator["DIALOG_ENABLEMENT_VALIDATOR"];
  const CHANGE_TABLE_COLUMNS = 'change-table-columns';
  const SMART_TABLE_TYPE = 'sap.ui.comp.smarttable.SmartTable';
  const M_TABLE_TYPE = 'sap.m.Table';
  // maintain order if action id
  const CONTROL_TYPES = [SMART_TABLE_TYPE, M_TABLE_TYPE, 'sap.ui.table.TreeTable', 'sap.ui.table.Table'];
  class ChangeTableColumnsQuickAction extends TableQuickActionDefinitionBase {
    constructor(context) {
      super(CHANGE_TABLE_COLUMNS, CONTROL_TYPES, 'V2_QUICK_ACTION_CHANGE_TABLE_COLUMNS', context, {
        includeServiceAction: true
      }, [DIALOG_ENABLEMENT_VALIDATOR]);
    }
    async execute(path) {
      const {
        table,
        iconTabBarFilterKey,
        changeColumnActionId,
        sectionInfo
      } = this.tableMap[path];
      if (!table) {
        return [];
      }
      if (sectionInfo) {
        const {
          layout,
          section,
          subSection
        } = sectionInfo;
        layout?.setSelectedSection(section);
        section.setSelectedSubSection(subSection);
        this.selectOverlay(table);
      } else {
        getControlById(table.getId())?.getDomRef()?.scrollIntoView();
        this.selectOverlay(table);
      }
      if (this.iconTabBar && iconTabBarFilterKey) {
        this.iconTabBar.setSelectedKey(iconTabBarFilterKey);
      }
      if (changeColumnActionId) {
        const executeAction = async () => await this.context.actionService.execute(table.getId(), changeColumnActionId);
        if (isA(SMART_TABLE_TYPE, table)) {
          await executeAction();
        } else if (isA(M_TABLE_TYPE, table)) {
          // if table is busy, i.e. lazy loading, then we subscribe to 'updateFinished' event and call action service when loading is done
          // to avoid reopening the dialog after close
          if (this.isTableLoaded(table)) {
            await executeAction();
          } else {
            table.attachEventOnce('updateFinished', executeAction, this);
          }
        }
      }
      return [];
    }
    isAbsoluteAggregationBinding(element, aggregationName) {
      const mBindingInfo = element.getBindingInfo(aggregationName);
      const path = mBindingInfo?.path;
      if (!path) {
        return false;
      }
      return path.indexOf('/') === 0;
    }

    /**
     * Checks if table is loaded and has binding context available.
     * This is needed to properly render change columns dialog.
     * Based on {@link https://github.com/SAP/openui5/blob/rel-1.127/src/sap.ui.fl/src/sap/ui/fl/write/_internal/delegates/ODataV2ReadDelegate.js#L269-L271| ODataV2ReadDelegate.getPropertyInfo}.
     *
     * @param element - Table control.
     * @returns True if binding context is available.
     */
    isTableLoaded(element) {
      const aggregationName = 'items';
      if (this.isAbsoluteAggregationBinding(element, aggregationName)) {
        const bindingInfo = element.getBindingInfo(aggregationName);
        // check to be default model binding otherwise return undefined
        if (typeof bindingInfo.model === 'string' && bindingInfo.model !== '') {
          return false;
        }
        return bindingInfo.path !== undefined;
      } else {
        // here we explicitly request the default models binding context
        const bindingContext = element.getBindingContext();
        return !!bindingContext;
      }
    }
  }
  var __exports = {
    __esModule: true
  };
  __exports.CHANGE_TABLE_COLUMNS = CHANGE_TABLE_COLUMNS;
  __exports.ChangeTableColumnsQuickAction = ChangeTableColumnsQuickAction;
  return __exports;
});
//# sourceMappingURL=change-table-columns.js.map