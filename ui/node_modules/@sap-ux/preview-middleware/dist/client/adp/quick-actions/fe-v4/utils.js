"use strict";

sap.ui.define(["../../../utils/core", "sap/ui/rta/command/CommandFactory", "../../../utils/fe-v4"], function (_____utils_core, CommandFactory, _____utils_fe_v4) {
  "use strict";

  const getControlById = _____utils_core["getControlById"];
  const getV4AppComponent = _____utils_fe_v4["getV4AppComponent"];
  const getPageName = _____utils_fe_v4["getPageName"];
  const getReference = _____utils_fe_v4["getReference"];
  async function executeToggleAction(context, isButtonEnabled, controlType, propertyPath) {
    const controls = context.controlIndex[controlType] ?? [];
    const control = controls[0];
    if (control) {
      const modifiedControl = getControlById(control.controlId);
      if (!modifiedControl) {
        return [];
      }
      const {
        flexSettings
      } = context;
      const parent = modifiedControl.getParent();
      if (!parent) {
        return [];
      }
      const modifiedValue = {
        reference: getReference(modifiedControl),
        appComponent: getV4AppComponent(modifiedControl),
        changeType: 'appdescr_fe_changePageConfiguration',
        parameters: {
          page: getPageName(parent),
          entityPropertyChange: {
            propertyPath: propertyPath,
            propertyValue: !isButtonEnabled,
            operation: 'UPSERT'
          }
        }
      };
      const command = await CommandFactory.getCommandFor(modifiedControl, 'appDescriptor', modifiedValue, null, flexSettings);
      return [command];
    }
    return [];
  }
  const PATTERN_SUFFIX = ':?query:';

  /**
   * Generates the pattern for a new route based on the input.
   *
   * @param sourceRoutePattern source page route pattern
   * @param navProperty navigation property name (used to build nav pattern for nested OP )
   * @param targetEntitySet navigation target entity set
   * @returns the generated pattern as string
   */
  function generateRoutePattern(sourceRoutePattern, navProperty, targetEntitySet) {
    const parts = [];
    const basePattern = sourceRoutePattern.replace(PATTERN_SUFFIX, '');
    if (basePattern) {
      parts.push(basePattern);
      parts.push('/');
      parts.push(navProperty);
    } else {
      parts.push(targetEntitySet);
    }
    parts.push(`({${targetEntitySet}Key})`);
    parts.push(PATTERN_SUFFIX);
    return parts.join('');
  }
  var __exports = {
    __esModule: true
  };
  __exports.executeToggleAction = executeToggleAction;
  __exports.generateRoutePattern = generateRoutePattern;
  return __exports;
});
//# sourceMappingURL=utils.js.map