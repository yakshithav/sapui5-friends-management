'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    './outline/service',
    './selection',
    './changes/service',
    './documentation',
    './ui5-utils',
    './connector-service',
    './rta-service',
    '../utils/error',
    './quick-actions/quick-action-service',
    './communication-service',
    './context-menu-service'
], function (Log, ___sap_ux_private_control_property_editor_common, ___outline_service, ___selection, ___changes_service, ___documentation, ___ui5_utils, ___connector_service, ___rta_service, ___utils_error, ___quick_actions_quick_action_service, ___communication_service, ___context_menu_service) {
    'use strict';
    const iconsLoaded = ___sap_ux_private_control_property_editor_common['iconsLoaded'];
    const enableTelemetry = ___sap_ux_private_control_property_editor_common['enableTelemetry'];
    const appLoaded = ___sap_ux_private_control_property_editor_common['appLoaded'];
    const OutlineService = ___outline_service['OutlineService'];
    const SelectionService = ___selection['SelectionService'];
    const ChangeService = ___changes_service['ChangeService'];
    const loadDefaultLibraries = ___documentation['loadDefaultLibraries'];
    const getIcons = ___ui5_utils['getIcons'];
    const WorkspaceConnectorService = ___connector_service['WorkspaceConnectorService'];
    const RtaService = ___rta_service['RtaService'];
    const getError = ___utils_error['getError'];
    const QuickActionService = ___quick_actions_quick_action_service['QuickActionService'];
    const CommunicationService = ___communication_service['CommunicationService'];
    const ContextMenuService = ___context_menu_service['ContextMenuService'];
    function init(rta) {
        let registries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        Log.info('Initializing Control Property Editor');
        const flexSettings = rta.getFlexSettings();
        if (flexSettings.telemetry === true) {
            enableTelemetry();
        }
        function subscribe(handler) {
            CommunicationService.subscribe(handler);
        }
        const rtaService = new RtaService(rta);
        const changesService = new ChangeService({ rta });
        const selectionService = new SelectionService(rta, changesService);
        const connectorService = new WorkspaceConnectorService();
        const contextMenuService = new ContextMenuService(rta);
        const outlineService = new OutlineService(rta, changesService);
        const quickActionService = new QuickActionService(rta, outlineService, registries, changesService);
        const services = [
            connectorService,
            selectionService,
            changesService,
            contextMenuService,
            outlineService,
            rtaService,
            quickActionService
        ];
        try {
            loadDefaultLibraries();
            const allPromises = services.map(service => {
                return service.init(CommunicationService.sendAction, subscribe)?.catch(error => {
                    Log.error('Service Initialization Failed: ', getError(error));
                });
            });
            Promise.all(allPromises).then(() => {
                CommunicationService.sendAction(appLoaded());
            }).catch(Log.error);
            const icons = getIcons();
            CommunicationService.sendAction(iconsLoaded(icons));
        } catch (error) {
            Log.error('Error during initialization of Control Property Editor', getError(error));
        }
        return Promise.resolve();
    }
    return init;
});