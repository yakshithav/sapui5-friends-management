'use strict';
sap.ui.define([
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    './control-data',
    './utils',
    'sap/base/Log',
    './documentation',
    'sap/ui/dt/OverlayRegistry',
    'sap/ui/dt/OverlayUtil',
    '../utils/core',
    '../utils/error'
], function (___sap_ux_private_control_property_editor_common, ___control_data, ___utils, Log, ___documentation, OverlayRegistry, OverlayUtil, ___utils_core, ___utils_error) {
    'use strict';
    const controlSelected = ___sap_ux_private_control_property_editor_common['controlSelected'];
    const propertyChanged = ___sap_ux_private_control_property_editor_common['propertyChanged'];
    const selectControl = ___sap_ux_private_control_property_editor_common['selectControl'];
    const reportTelemetry = ___sap_ux_private_control_property_editor_common['reportTelemetry'];
    const changeProperty = ___sap_ux_private_control_property_editor_common['changeProperty'];
    const PropertyType = ___sap_ux_private_control_property_editor_common['PropertyType'];
    const buildControlData = ___control_data['buildControlData'];
    const getOverlay = ___utils['getOverlay'];
    const getRuntimeControl = ___utils['getRuntimeControl'];
    const getDocumentation = ___documentation['getDocumentation'];
    const getComponent = ___utils_core['getComponent'];
    const getControlById = ___utils_core['getControlById'];
    const getError = ___utils_error['getError'];
    function propertyChangeId(controlId, propertyName) {
        return [
            controlId,
            propertyName
        ].join(',');
    }
    function getPropertyDocument(property, ui5Type, document) {
        return document?.[property.name] ? document[property.name] : {
            defaultValue: property.defaultValue ?? '-',
            description: '',
            propertyName: property.name,
            type: ui5Type ?? '-',
            propertyType: ui5Type ?? '-'
        };
    }
    async function addDocumentationForProperties(control, controlData) {
        try {
            const controlMetadata = control.getMetadata();
            const allProperties = controlMetadata.getAllProperties();
            const selectedControlName = controlMetadata.getName();
            const selContLibName = controlMetadata.getLibraryName();
            const document = await getDocumentation(selectedControlName, selContLibName);
            controlData.properties.forEach(controlProp => {
                if (controlProp.propertyType === PropertyType.ControlProperty) {
                    const property = allProperties[controlProp.name];
                    controlProp.documentation = getPropertyDocument(property, controlProp.ui5Type, document);
                }
            });
        } catch (e) {
            Log.error('Document loading failed', getError(e));
        }
    }
    class SelectionService {
        appliedChangeCache = new Map();
        activeChangeHandlers = new Set();
        constructor(rta, changeService) {
            this.rta = rta;
            this.changeService = changeService;
        }
        init(sendAction, subscribe) {
            const eventOrigin = new Set();
            const onselectionChange = this.createOnSelectionChangeHandler(sendAction, eventOrigin);
            this.rta.attachSelectionChange(event => {
                onselectionChange(event).catch(error => Log.error('Event interrupted: ', getError(error)));
            });
            subscribe(async action => {
                if (changeProperty.match(action)) {
                    this.applyControlPropertyChange(action.payload.controlId, action.payload.propertyName);
                } else if (selectControl.match(action)) {
                    const id = action.payload;
                    const control = getControlById(id);
                    if (!control) {
                        const component = getComponent(id);
                        if (component) {
                            await this.buildProperties(component, sendAction);
                        }
                        return;
                    }
                    this.currentSelection = control;
                    eventOrigin.add('outline');
                    let controlOverlay = OverlayRegistry.getOverlay(control);
                    const selectedOverlayControls = this.rta.getSelection() ?? [];
                    for (const selectedOverlayControl of selectedOverlayControls) {
                        selectedOverlayControl.setSelected(false);
                    }
                    const controlRef = controlOverlay?.getDomRef?.();
                    controlRef?.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'nearest'
                    });
                    if (!controlRef) {
                        controlOverlay = OverlayUtil.getClosestOverlayFor(control);
                    }
                    if (controlOverlay?.isSelectable()) {
                        controlOverlay.setSelected(true);
                    } else {
                        await this.buildProperties(control, sendAction);
                    }
                }
            });
            this.changeService.onStackChange(async event => {
                const control = event.detail.controls.find(ctrl => ctrl === this.currentSelection);
                if (control) {
                    const overlay = getOverlay(control);
                    await this.buildProperties(control, sendAction, overlay);
                }
            });
        }
        async buildProperties(control, sendAction, overlay) {
            const controlData = buildControlData(control, this.changeService, overlay);
            await addDocumentationForProperties(control, controlData);
            const action = controlSelected(controlData);
            sendAction(action);
        }
        applyControlPropertyChange(controlId, propertyName) {
            const changeId = propertyChangeId(controlId, propertyName);
            this.appliedChangeCache.set(changeId, Date.now());
        }
        createOnSelectionChangeHandler(sendAction, eventOrigin) {
            return async event => {
                const selection = event.getParameter('selection');
                for (const dispose of this.activeChangeHandlers) {
                    dispose();
                }
                this.activeChangeHandlers.clear();
                if (Array.isArray(selection) && selection.length === 1) {
                    const overlayControl = sap.ui.getCore().byId(selection[0].getId());
                    if (overlayControl) {
                        const runtimeControl = getRuntimeControl(overlayControl);
                        this.currentSelection = runtimeControl;
                        const controlName = runtimeControl.getMetadata().getName();
                        this.handlePropertyChanges(runtimeControl, sendAction);
                        try {
                            const isOutline = eventOrigin.has('outline');
                            const name = controlName.toLowerCase().startsWith('sap') ? controlName : 'Other Control Types';
                            if (isOutline) {
                                reportTelemetry({
                                    category: 'Outline Selection',
                                    controlName: name
                                });
                            } else {
                                reportTelemetry({
                                    category: 'Overlay Selection',
                                    controlName: name
                                });
                            }
                        } catch (error) {
                            Log.error('Failed to report telemetry', getError(error));
                        } finally {
                            await this.buildProperties(runtimeControl, sendAction, overlayControl);
                            eventOrigin.delete('outline');
                        }
                    }
                }
            };
        }
        handlePropertyChanges(runtimeControl, sendAction) {
            const handler = e => {
                const propertyName = e.getParameter('name');
                const controlId = e.getParameter('id');
                const changeId = propertyChangeId(controlId, propertyName);
                const timestamp = this.appliedChangeCache.get(changeId);
                if (timestamp) {
                    this.appliedChangeCache.delete(changeId);
                    return;
                }
                const info = runtimeControl.getBindingInfo(propertyName);
                const newValue = info?.bindingString ?? e.getParameter('newValue');
                const change = propertyChanged({
                    controlId,
                    propertyName,
                    newValue
                });
                sendAction(change);
            };
            runtimeControl.attachEvent('_change', handler);
            this.activeChangeHandlers.add(() => {
                try {
                    runtimeControl.detachEvent('_change', handler);
                } catch {
                }
            });
        }
    }
    var __exports = { __esModule: true };
    __exports.SelectionService = SelectionService;
    return __exports;
});