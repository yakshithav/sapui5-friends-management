'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    'sap/ui/core/IconPool',
    'sap/base/i18n/ResourceBundle',
    '../adp/api-handler',
    '../utils/error',
    './initCdm',
    './initConnectors',
    '../utils/version',
    '../cpe/communication-service',
    '../i18n'
], function (Log, ___sap_ux_private_control_property_editor_common, IconPool, ResourceBundle, ___adp_api_handler, ___utils_error, __initCdm, __initConnectors, ___utils_version, ___cpe_communication_service, ___i18n) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    function __ui5_require_async(path) {
        return new Promise(function (resolve, reject) {
            sap.ui.require([path], function (module) {
                if (!(module && module.__esModule)) {
                    module = module === null || !(typeof module === 'object' && path.endsWith('/library')) ? { default: module } : module;
                    Object.defineProperty(module, '__esModule', { value: true });
                }
                resolve(module);
            }, function (err) {
                reject(err);
            });
        });
    }
    const SCENARIO = ___sap_ux_private_control_property_editor_common['SCENARIO'];
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const getManifestAppdescr = ___adp_api_handler['getManifestAppdescr'];
    const getError = ___utils_error['getError'];
    const initCdm = _interopRequireDefault(__initCdm);
    const initConnectors = _interopRequireDefault(__initConnectors);
    const getUi5Version = ___utils_version['getUi5Version'];
    const isLowerThanMinimalUi5Version = ___utils_version['isLowerThanMinimalUi5Version'];
    const CommunicationService = ___cpe_communication_service['CommunicationService'];
    const getTextBundle = ___i18n['getTextBundle'];
    const UI5_LIBS = [
        'sap.apf',
        'sap.base',
        'sap.chart',
        'sap.collaboration',
        'sap.f',
        'sap.fe',
        'sap.fileviewer',
        'sap.gantt',
        'sap.landvisz',
        'sap.m',
        'sap.ndc',
        'sap.ovp',
        'sap.rules',
        'sap.suite',
        'sap.tnt',
        'sap.ui',
        'sap.uiext',
        'sap.ushell',
        'sap.uxap',
        'sap.viz',
        'sap.webanalytics',
        'sap.zen'
    ];
    function addKeys(dependency, customLibs) {
        Object.keys(dependency).forEach(function (key) {
            if (!UI5_LIBS.some(function (substring) {
                    return key === substring || key.startsWith(substring + '.');
                })) {
                customLibs[key] = true;
            }
        });
    }
    function getComponentUsageNames(compUsages, customLibs) {
        const compNames = Object.keys(compUsages).map(function (compUsageKey) {
            return compUsages[compUsageKey].name;
        });
        compNames.forEach(function (key) {
            if (!UI5_LIBS.some(function (substring) {
                    return key === substring || key.startsWith(substring + '.');
                })) {
                customLibs[key] = true;
            }
        });
    }
    async function getManifestLibs(appUrls) {
        const result = {};
        const promises = [];
        for (const url of appUrls) {
            promises.push(fetch(`${ url }/manifest.json`).then(async resp => {
                const manifest = await resp.json();
                if (manifest) {
                    if (manifest['sap.ui5']?.dependencies) {
                        if (manifest['sap.ui5'].dependencies.libs) {
                            addKeys(manifest['sap.ui5'].dependencies.libs, result);
                        }
                        if (manifest['sap.ui5'].dependencies.components) {
                            addKeys(manifest['sap.ui5'].dependencies.components, result);
                        }
                    }
                    if (manifest['sap.ui5']?.componentUsages) {
                        getComponentUsageNames(manifest['sap.ui5'].componentUsages, result);
                    }
                }
            }));
        }
        return Promise.all(promises).then(() => Object.keys(result).join(','));
    }
    function registerModules(dataFromAppIndex) {
        Object.keys(dataFromAppIndex).forEach(function (moduleDefinitionKey) {
            const moduleDefinition = dataFromAppIndex[moduleDefinitionKey];
            if (moduleDefinition?.dependencies) {
                moduleDefinition.dependencies.forEach(function (dependency) {
                    if (dependency.url && dependency.url.length > 0 && dependency.type === 'UI5LIB') {
                        Log.info('Registering Library ' + dependency.componentId + ' from server ' + dependency.url);
                        const compId = dependency.componentId.replace(/\./g, '/');
                        const config = { paths: {} };
                        config.paths[compId] = dependency.url;
                        sap.ui.loader.config(config);
                    }
                });
            }
        });
    }
    async function resetAppState(container) {
        const urlParams = new URLSearchParams(window.location.hash);
        const appStateValue = urlParams.get('sap-iapp-state') ?? urlParams.get('/?sap-iapp-state');
        if (appStateValue) {
            const appStateService = await container.getServiceAsync('AppState');
            appStateService.deleteAppState(appStateValue);
        }
    }
    async function registerComponentDependencyPaths(appUrls, urlParams) {
        const libs = await getManifestLibs(appUrls);
        if (libs && libs.length > 0) {
            let url = '/sap/bc/ui2/app_index/ui5_app_info?id=' + libs;
            const sapClient = urlParams.get('sap-client');
            if (sapClient && sapClient.length === 3) {
                url = url + '&sap-client=' + sapClient;
            }
            const response = await fetch(url);
            try {
                registerModules(await response.json());
            } catch (error) {
                Log.error(`Registering of reuse libs failed. Error:${ error }`);
            }
        }
    }
    function registerSAPFonts() {
        const fioriTheme = {
            fontFamily: 'SAP-icons-TNT',
            fontURI: sap.ui.require.toUrl('sap/tnt/themes/base/fonts/')
        };
        IconPool.registerFont(fioriTheme);
        const suiteTheme = {
            fontFamily: 'BusinessSuiteInAppSymbols',
            fontURI: sap.ui.require.toUrl('sap/ushell/themes/base/fonts/')
        };
        IconPool.registerFont(suiteTheme);
    }
    async function loadI18nResourceBundle(scenario) {
        if (scenario === SCENARIO.AdaptationProject) {
            const manifest = await getManifestAppdescr();
            const enhanceWith = manifest.content.filter(content => content.texts?.i18n).map(content => ({ bundleUrl: `../${ content.texts.i18n }` }));
            return ResourceBundle.create({
                url: '../i18n/i18n.properties',
                enhanceWith
            });
        }
        return ResourceBundle.create({ url: 'i18n/i18n.properties' });
    }
    function setI18nTitle(resourceBundle) {
        let i18nKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'appTitle';
        if (resourceBundle.hasText(i18nKey)) {
            document.title = resourceBundle.getText(i18nKey) ?? document.title;
        }
    }
    function addCardGenerationUserAction(componentInstance, container) {
        sap.ui.require(['sap/cards/ap/generator/CardGenerator'], async CardGenerator => {
            const extensionService = await container.getServiceAsync('Extension');
            const controlProperties = {
                icon: 'sap-icon://add',
                id: 'generate_card',
                text: 'Generate Card',
                tooltip: 'Generate Card',
                press: () => {
                    CardGenerator.initializeAsync(componentInstance);
                }
            };
            const parameters = { controlType: 'sap.ushell.ui.launchpad.ActionItem' };
            const generateCardAction = await extensionService.createUserAction(controlProperties, parameters);
            generateCardAction.showForCurrentApp();
        });
    }
    async function init(_ref) {
        let {appUrls, flex, customInit, enhancedHomePage, enableCardGenerator} = _ref;
        if (enhancedHomePage) {
            initCdm();
        }
        const urlParams = new URLSearchParams(window.location.search);
        const container = sap?.ushell?.Container ?? (await __ui5_require_async('sap/ushell/Container')).default;
        let scenario = '';
        const ui5VersionInfo = await getUi5Version();
        if (flex) {
            const flexSettings = JSON.parse(flex);
            scenario = flexSettings.scenario;
            container.attachRendererCreatedEvent(async function () {
                const lifecycleService = await container.getServiceAsync('AppLifeCycle');
                lifecycleService.attachAppLoaded(event => {
                    const view = event.getParameter('componentInstance');
                    const pluginScript = flexSettings.pluginScript ?? '';
                    let libs = [];
                    if (isLowerThanMinimalUi5Version(ui5VersionInfo, {
                            major: 1,
                            minor: 72
                        })) {
                        libs.push('open/ux/preview/client/flp/initRta');
                    } else {
                        libs.push('sap/ui/rta/api/startAdaptation');
                    }
                    if (flexSettings.pluginScript) {
                        libs.push(pluginScript);
                        delete flexSettings.pluginScript;
                    }
                    const options = {
                        rootControl: view,
                        validateAppVersion: false,
                        flexSettings
                    };
                    sap.ui.require(libs, async function (startAdaptation, pluginScript) {
                        try {
                            await startAdaptation(options, pluginScript);
                        } catch (error) {
                            await handleHigherLayerChanges(error, ui5VersionInfo);
                        }
                    });
                });
            });
        }
        if (enableCardGenerator && !isLowerThanMinimalUi5Version(ui5VersionInfo, {
                major: 1,
                minor: 121
            })) {
            container.attachRendererCreatedEvent(async function () {
                const lifecycleService = await container.getServiceAsync('AppLifeCycle');
                lifecycleService.attachAppLoaded(event => {
                    const componentInstance = event.getParameter('componentInstance');
                    addCardGenerationUserAction(componentInstance, container);
                });
            });
        } else {
            Log.warning('Card generator is not supported for the current UI5 version.');
        }
        if (urlParams.get('fiori-tools-iapp-state')?.toLocaleLowerCase() !== 'true') {
            await resetAppState(container);
        }
        if (appUrls) {
            await registerComponentDependencyPaths(JSON.parse(appUrls) ?? [], urlParams);
        }
        await initConnectors();
        if (customInit) {
            sap.ui.require([customInit]);
        }
        const resourceBundle = await loadI18nResourceBundle(scenario);
        setI18nTitle(resourceBundle);
        registerSAPFonts();
        if (enhancedHomePage) {
            await container.init('cdm');
        }
        const renderer = ui5VersionInfo.major < 2 && !ui5VersionInfo.label?.includes('legacy-free') ? await container.createRenderer(undefined, true) : await container.createRendererInternal(undefined, true);
        renderer.placeAt('content');
    }
    const bootstrapConfig = document.getElementById('sap-ui-bootstrap');
    if (bootstrapConfig) {
        init({
            appUrls: bootstrapConfig.getAttribute('data-open-ux-preview-libs-manifests'),
            flex: bootstrapConfig.getAttribute('data-open-ux-preview-flex-settings'),
            customInit: bootstrapConfig.getAttribute('data-open-ux-preview-customInit'),
            enhancedHomePage: !!bootstrapConfig.getAttribute('data-open-ux-preview-enhanced-homepage'),
            enableCardGenerator: !!bootstrapConfig.getAttribute('data-open-ux-preview-enable-card-generator')
        }).catch(e => {
            const error = getError(e);
            Log.error('Sandbox initialization failed: ' + error.message);
        });
    }
    async function handleHigherLayerChanges(error, ui5VersionInfo) {
        const err = getError(error);
        if (err.message.includes('Reload triggered')) {
            if (!isLowerThanMinimalUi5Version(ui5VersionInfo, {
                    major: 1,
                    minor: 84
                })) {
                const bundle = await getTextBundle();
                const action = showMessage({
                    message: bundle.getText('HIGHER_LAYER_CHANGES_INFO_MESSAGE'),
                    shouldHideIframe: false
                });
                CommunicationService.sendAction(action);
            }
            window.location.reload();
        }
    }
    var __exports = { __esModule: true };
    __exports.resetAppState = resetAppState;
    __exports.registerComponentDependencyPaths = registerComponentDependencyPaths;
    __exports.registerSAPFonts = registerSAPFonts;
    __exports.loadI18nResourceBundle = loadI18nResourceBundle;
    __exports.setI18nTitle = setI18nTitle;
    __exports.init = init;
    __exports.handleHigherLayerChanges = handleHigherLayerChanges;
    return __exports;
});