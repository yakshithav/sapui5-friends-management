"use strict";

sap.ui.define(["sap/base/util/merge", "sap/ui/fl/write/api/connectors/ObjectStorageConnector", "sap/ui/fl/Layer", "./common", "../utils/version", "../utils/additional-change-info"], function (merge, ObjectStorageConnector, Layer, ___common, ___utils_version, ___utils_additional_change_info) {
  "use strict";

  const CHANGES_API_PATH = ___common["CHANGES_API_PATH"];
  const getFlexSettings = ___common["getFlexSettings"];
  const getUi5Version = ___utils_version["getUi5Version"];
  const isLowerThanMinimalUi5Version = ___utils_version["isLowerThanMinimalUi5Version"];
  const getAdditionalChangeInfo = ___utils_additional_change_info["getAdditionalChangeInfo"];
  const connector = merge({}, ObjectStorageConnector, {
    layers: [Layer.VENDOR, Layer.CUSTOMER_BASE],
    storage: {
      _itemsStoredAsObjects: true,
      fileChangeRequestNotifier: undefined,
      setItem: function (_key, change) {
        const settings = getFlexSettings();
        if (settings) {
          change.support ??= {};
          change.support.generator = settings.generator;
        }
        const additionalChangeInfo = getAdditionalChangeInfo(change);
        if (typeof this.fileChangeRequestNotifier === 'function' && change.fileName) {
          try {
            this.fileChangeRequestNotifier(change.fileName, 'create', change, additionalChangeInfo);
          } catch (e) {
            // exceptions in the listener call are ignored
          }
        }
        const body = {
          change,
          additionalChangeInfo
        };
        return fetch(CHANGES_API_PATH, {
          method: 'POST',
          body: JSON.stringify(body, null, 2),
          headers: {
            'content-type': 'application/json'
          }
        });
      },
      removeItem: function (key) {
        if (typeof this.fileChangeRequestNotifier === 'function') {
          try {
            this.fileChangeRequestNotifier(key, 'delete');
          } catch (e) {
            // exceptions in the listener call are ignored
          }
        }
        return fetch(CHANGES_API_PATH, {
          method: 'DELETE',
          body: JSON.stringify({
            fileName: key
          }),
          headers: {
            'content-type': 'application/json'
          }
        });
      },
      clear: function () {
        // not implemented
      },
      getItem: function (_key) {
        // not implemented
      },
      getItems: async function () {
        const response = await fetch(CHANGES_API_PATH, {
          method: 'GET',
          headers: {
            'content-type': 'application/json'
          }
        });
        return await response.json();
      }
    },
    loadFeatures: async function () {
      const features = await ObjectStorageConnector.loadFeatures();
      features.isVariantAdaptationEnabled = !isLowerThanMinimalUi5Version(await getUi5Version(), {
        major: 1,
        minor: 90
      });
      const settings = getFlexSettings();
      if (settings?.developerMode) {
        features.isVariantAdaptationEnabled = false;
      }
      if (settings?.scenario === 'ADAPTATION_PROJECT') {
        features.isVariantAdaptationEnabled = true;
      }
      return features;
    }
  });
  return connector;
});
//# sourceMappingURL=WorkspaceConnector.js.map