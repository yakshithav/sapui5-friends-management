"use strict";

sap.ui.define(["sap/ui/core/Component", "./core", "sap/ui/rta/command/CommandFactory", "../cpe/utils"], function (Component, ___core, CommandFactory, ___cpe_utils) {
  "use strict";

  const isA = ___core["isA"];
  const getOverlay = ___cpe_utils["getOverlay"];
  /**
   * Gets app component of a v4 project.
   *
   * @param control - ManagedObject.
   * @returns AppComponent.
   */
  function getV4AppComponent(control) {
    const ownerComponent = Component.getOwnerComponentFor(control);
    if (ownerComponent?.isA('sap.fe.core.TemplateComponent')) {
      return ownerComponent.getAppComponent();
    }
    return undefined;
  }

  /**
   * Gets reference id of the app.
   *
   * @param control - ManagedObject.
   * @returns string.
   */
  function getReference(control) {
    const manifest = getV4AppComponent(control)?.getManifest();
    return manifest?.['sap.app']?.id ?? '';
  }

  /**
   * Determines the page type of v4 app.
   *
   * @param control - ManagedObject.
   * @returns 'ObjectPage' | 'ListReport' | undefined.
   */
  function getV4PageType(control) {
    const component = Component.getOwnerComponentFor(control);
    if (!component?.isA('sap.fe.core.TemplateComponent')) {
      return undefined;
    }
    const view = component.getRootControl();
    const name = view.getViewName();
    if (name === 'sap.fe.templates.ObjectPage.ObjectPage') {
      return 'ObjectPage';
    }
    if (name === 'sap.fe.templates.ListReport.ListReport') {
      return 'ListReport';
    }
    return undefined;
  }

  /**
   * Get the containing page name of a control.
   *
   * @param control - UI5 control instance.
   * @returns Page name to which the control belongs.
   */
  function getPageName(control) {
    const component = Component.getOwnerComponentFor(control);
    if (!isA('sap.fe.core.TemplateComponent', component)) {
      return undefined;
    }
    const view = component.getRootControl();
    return view.getId().split('::').pop();
  }
  function getConfigMapControlIdMap(page, propertyPathSegments) {
    if (page && !propertyPathSegments.length) {
      return page;
    }
    if (page) {
      return `${page}-${propertyPathSegments.join('/')}`;
    }
    return propertyPathSegments.join('/');
  }

  /**
   * Get the modified value for a control.
   * @param modifiedControl - The modified control.
   * @param flexSettings - Flex Settings of the control.
   * @param propertyChanges - The change object
   * @param propertyPathExtraSegments - optional path segments which are added to the default modified control manifest path
   *
   * @returns  A Promise resolving to an array of FlexCommand objects.
   */
  async function createManifestPropertyChange(modifiedControl, flexSettings, propertyChanges, propertyPathExtraSegments) {
    const overlay = getOverlay(modifiedControl);
    if (!overlay) {
      return undefined;
    }
    const overlayData = overlay.getDesignTimeMetadata().getData();
    const settings = overlayData.manifestSettings(modifiedControl);
    let manifestPropertyPath = overlayData.manifestPropertyPath(modifiedControl);
    if (propertyPathExtraSegments) {
      manifestPropertyPath += '/' + propertyPathExtraSegments.join('/');
    }
    const adjustedChanges = {};
    for (const [key, value] of Object.entries(propertyChanges)) {
      const setting = settings.find(s => s.id === key);
      if (setting) {
        adjustedChanges[setting.path ?? setting.id] = value;
      } else {
        adjustedChanges[key] = value;
      }
    }
    const [manifestPropertyChange] = overlayData.manifestPropertyChange(adjustedChanges, manifestPropertyPath, modifiedControl);
    const modifiedValue = {
      reference: getReference(modifiedControl),
      appComponent: manifestPropertyChange.appComponent,
      changeType: manifestPropertyChange.changeSpecificData.appDescriptorChangeType,
      parameters: manifestPropertyChange.changeSpecificData.content.parameters,
      selector: manifestPropertyChange.selector
    };
    const command = await CommandFactory.getCommandFor(modifiedControl, 'appDescriptor', modifiedValue, null, flexSettings);
    return command;
  }

  /**
   * Returns application object page definitions found in manifest
   *
   * @param manifest - manifest object
   * @returns array with page descriptors
   */
  function getV4ApplicationPages(manifest) {
    const result = [];
    const targets = manifest['sap.ui5'].routing?.targets ?? {};
    for (const target of Object.values(targets)) {
      if (target.name === 'sap.fe.templates.ObjectPage') {
        result.push({
          id: target.id,
          entitySet: target.options?.settings?.entitySet,
          contextPath: target.options?.settings?.contextPath
        });
      }
    }
    return result;
  }
  var __exports = {
    __esModule: true
  };
  __exports.getV4AppComponent = getV4AppComponent;
  __exports.getReference = getReference;
  __exports.getV4PageType = getV4PageType;
  __exports.getPageName = getPageName;
  __exports.getConfigMapControlIdMap = getConfigMapControlIdMap;
  __exports.createManifestPropertyChange = createManifestPropertyChange;
  __exports.getV4ApplicationPages = getV4ApplicationPages;
  return __exports;
});
//# sourceMappingURL=fe-v4.js.map