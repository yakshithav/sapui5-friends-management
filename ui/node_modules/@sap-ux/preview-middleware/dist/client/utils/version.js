"use strict";

sap.ui.define(["sap/ui/VersionInfo", "sap/base/Log"], function (VersionInfo, Log) {
  "use strict";

  /**
   * Default minimal supported UI5 version
   */
  const minVersionInfo = {
    major: 1,
    minor: 71
  };

  /**
   * Check if the given version info is valid.
   * @param versionInfo to check
   * @throws Error if the version info is invalid
   */
  function checkVersionInfo(versionInfo) {
    if (isNaN(versionInfo.major) || isNaN(versionInfo.minor) || isNaN(versionInfo.patch ?? 0)) {
      throw new Error('Invalid version info');
    }
  }

  /**
   * Retrieve the UI5 version.
   * If no library is given, the version from 'sap.ui.core' will be retrieved.
   * Note that the patch version of actual SAPUI5 version might differ from the lib that has been used for the version request (e.g. SAPUI5 1.96.38 contains sap.ui.core 1.96.36).
   * For details see the patch info of the respective SAPUI5 version (e.g. https://ui5.sap.com/1.96.38/patchinfo.html).
   *
   * @param library - (optional) specific library name to get the version from, e.g. 'sap.m'
   * @returns Ui5VersionInfo
   */
  async function getUi5Version() {
    let library = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sap.ui.core';
    let version = (await VersionInfo.load({
      library
    }))?.version;
    if (!version) {
      Log.error('Could not get UI5 version of application. Using version: 1.130.0 as fallback.');
      version = '1.130.0';
    }
    const [major, minor, patch] = version.split('.').map(versionPart => parseInt(versionPart, 10));
    const label = version.split(/-(.*)/s)?.[1];
    return {
      major,
      minor,
      patch,
      label
    };
  }

  /**
   * Checks if the given version is lower than the required minimal version.
   * Note that the patch version of actual SAPUI5 version might differ from the lib that has been used for the version request (e.g. SAPUI5 1.96.38 contains sap.ui.core 1.96.36).
   * For details see the patch info of the respective SAPUI5 version (e.g. https://ui5.sap.com/1.96.38/patchinfo.html).
   *
   * @param ui5VersionInfo to check
   * @param minUi5VersionInfo to check against (default is 1.71)
   * @throws Error if the version info is invalid
   *
   * @returns boolean
   */
  function isLowerThanMinimalUi5Version(ui5VersionInfo) {
    let minUi5VersionInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minVersionInfo;
    checkVersionInfo(ui5VersionInfo);
    checkVersionInfo(minUi5VersionInfo);
    return ui5VersionInfo.major < minUi5VersionInfo.major || ui5VersionInfo.major === minUi5VersionInfo.major && ui5VersionInfo.minor < minUi5VersionInfo.minor || ui5VersionInfo.major === minUi5VersionInfo.major && ui5VersionInfo.minor === minUi5VersionInfo.minor && (ui5VersionInfo?.patch ?? 0) < (minUi5VersionInfo?.patch ?? 0);
  }

  /**
   * Checks if the given version is equal to the specified version.
   * Note that the patch version of actual SAPUI5 version might differ from the lib that has been used for the version request (e.g. SAPUI5 1.96.38 contains sap.ui.core 1.96.36).
   * For details see the patch info of the respective SAPUI5 version (e.g. https://ui5.sap.com/1.96.38/patchinfo.html).
   *
   * @param ui5VersionInfo to check
   * @param targetUi5VersionInfo to check against (default is 1.71)
   * @throws Error if the version info is invalid
   *
   * @returns boolean
   */
  function isVersionEqualOrHasNewerPatch(ui5VersionInfo) {
    let targetUi5VersionInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minVersionInfo;
    checkVersionInfo(ui5VersionInfo);
    checkVersionInfo(targetUi5VersionInfo);
    return ui5VersionInfo.major === targetUi5VersionInfo.major && ui5VersionInfo.minor === targetUi5VersionInfo.minor && (ui5VersionInfo?.patch ?? 0) >= (targetUi5VersionInfo?.patch ?? 0);
  }

  /**
   * Get UI5 version validation message.
   * @param ui5VersionInfo to be mentioned in the message
   * @returns string with validation message.
   */
  function getUI5VersionValidationMessage(ui5VersionInfo) {
    return `The current SAPUI5 version set for this Adaptation project is ${ui5VersionInfo.major}.${ui5VersionInfo.minor}. The minimum version to use for SAPUI5 Adaptation Project and its SAPUI5 Visual Editor is ${minVersionInfo.major}.${minVersionInfo.minor}`;
  }
  var __exports = {
    __esModule: true
  };
  __exports.getUi5Version = getUi5Version;
  __exports.isLowerThanMinimalUi5Version = isLowerThanMinimalUi5Version;
  __exports.isVersionEqualOrHasNewerPatch = isVersionEqualOrHasNewerPatch;
  __exports.getUI5VersionValidationMessage = getUI5VersionValidationMessage;
  return __exports;
});
//# sourceMappingURL=version.js.map