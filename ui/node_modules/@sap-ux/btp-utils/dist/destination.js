"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbapEnvType = exports.DestinationProxyType = exports.WebIDEAdditionalData = exports.WebIDEUsage = exports.ProxyType = exports.Suffix = exports.Authentication = exports.OAuthUrlType = exports.DestinationType = void 0;
exports.isAbapSystem = isAbapSystem;
exports.isAbapEnvironmentOnBtp = isAbapEnvironmentOnBtp;
exports.isGenericODataDestination = isGenericODataDestination;
exports.isPartialUrlDestination = isPartialUrlDestination;
exports.isFullUrlDestination = isFullUrlDestination;
exports.isOnPremiseDestination = isOnPremiseDestination;
exports.isHTML5DynamicConfigured = isHTML5DynamicConfigured;
exports.getDisplayName = getDisplayName;
exports.isS4HC = isS4HC;
exports.isAbapODataDestination = isAbapODataDestination;
/**
 * Support different Token Service URL Types
 */
var DestinationType;
(function (DestinationType) {
    DestinationType["HTTP"] = "HTTP";
    DestinationType["LDAP"] = "LDAP";
    DestinationType["MAIL"] = "MAIL";
    DestinationType["RFC"] = "RFC";
})(DestinationType || (exports.DestinationType = DestinationType = {}));
/**
 * Support different Token Service URL Types
 */
var OAuthUrlType;
(function (OAuthUrlType) {
    OAuthUrlType["DEDICATED"] = "Dedicated";
    OAuthUrlType["COMMON"] = "Common";
})(OAuthUrlType || (exports.OAuthUrlType = OAuthUrlType = {}));
/**
 * Support destination authentication types
 */
var Authentication;
(function (Authentication) {
    Authentication["BASIC_AUTHENTICATION"] = "BasicAuthentication";
    Authentication["CLIENT_CERT_AUTHENTICATION"] = "ClientCertificateAuthentication";
    Authentication["NO_AUTHENTICATION"] = "NoAuthentication";
    Authentication["OAUTH2_CLIENT_CREDENTIALS"] = "OAuth2ClientCredentials";
    Authentication["OAUTH2_JWT_BEARER"] = "OAuth2JWTBearer";
    Authentication["OAUTH2_PASSWORD"] = "OAuth2Password";
    Authentication["OAUTH2_REFRESH_TOKEN"] = "OAuth2RefreshToken";
    Authentication["OAUTH2_SAML_BEARER_ASSERTION"] = "OAuth2SAMLBearerAssertion";
    Authentication["OAUTH2_USER_TOKEN_EXCHANGE"] = "OAuth2UserTokenExchange";
    Authentication["SAML_ASSERTION"] = "SAMLAssertion";
})(Authentication || (exports.Authentication = Authentication = {}));
/**
 * Relevant values for display extended destination properties to the UI
 */
var Suffix;
(function (Suffix) {
    Suffix["S4HC"] = "S4HC";
    Suffix["BTP"] = "BTP";
})(Suffix || (exports.Suffix = Suffix = {}));
var ProxyType;
(function (ProxyType) {
    ProxyType["ON_PREMISE"] = "OnPremise";
    ProxyType["INTERNET"] = "Internet";
    ProxyType["PRIVATE_LINK"] = "PrivateLink";
})(ProxyType || (exports.ProxyType = ProxyType = {}));
/**
 * Relevant values for the WebIDEUsage property used to identify different types of destinations.
 */
var WebIDEUsage;
(function (WebIDEUsage) {
    WebIDEUsage["ODATA_GENERIC"] = "odata_gen";
    WebIDEUsage["ODATA_ABAP"] = "odata_abap";
    WebIDEUsage["DEV_ABAP"] = "dev_abap";
    WebIDEUsage["ABAP_CLOUD"] = "abap_cloud";
})(WebIDEUsage || (exports.WebIDEUsage = WebIDEUsage = {}));
/**
 * Possible values for the WebIDEAdditionalData property
 */
var WebIDEAdditionalData;
(function (WebIDEAdditionalData) {
    WebIDEAdditionalData["FULL_URL"] = "full_url";
    WebIDEAdditionalData["API_MGMT"] = "api_mgmt";
})(WebIDEAdditionalData || (exports.WebIDEAdditionalData = WebIDEAdditionalData = {}));
/**
 * Relevant values for DestinationProxyType property
 */
var DestinationProxyType;
(function (DestinationProxyType) {
    DestinationProxyType["ON_PREMISE"] = "OnPremise";
    DestinationProxyType["INTERNET"] = "Internet";
    DestinationProxyType["PRIVATE_LINK"] = "PrivateLink";
})(DestinationProxyType || (exports.DestinationProxyType = DestinationProxyType = {}));
/**
 * Checks whether the provided destination is configured to point to an ABAP system (both cloud and on-premise).
 *
 * @param destination destination info
 * @returns true of the destination is configured for an ABAP system
 */
function isAbapSystem(destination) {
    return Boolean(destination.WebIDEUsage?.includes('abap') ||
        destination['sap-client'] ||
        destination['sap-platform']?.toLocaleLowerCase() === 'abap');
}
/**
 * Checks whether the provided destination is configured to point to an ABAP environment on BTP (aka steampunk).
 *
 * @param destination destination info
 * @returns true of the destination is configured for a steampunk system
 */
function isAbapEnvironmentOnBtp(destination) {
    return Boolean(destination.WebIDEUsage?.includes(WebIDEUsage.ABAP_CLOUD) ||
        destination['sap-platform']?.toLocaleLowerCase() === 'abap');
}
/**
 * Checks if the destination attributes WebIDEUsage is configured with odata_gen, and not odata_abap
 * We want to maintain existing destinations, perhaps accidentally configured with both, continue
 * working as abap catalogs.
 *
 * @param destination destination info
 * @returns true, if this destination has the the 'odata_gen', and not the 'odata_abap' attribute set
 */
function isGenericODataDestination(destination) {
    return Boolean(destination.WebIDEUsage?.includes(WebIDEUsage.ODATA_GENERIC) &&
        !destination.WebIDEUsage.includes(WebIDEUsage.ODATA_ABAP));
}
/**
 * A destination configured as generic odata without the 'full_url' attribute are considered partial url destinations.
 *
 * @param destination destination info
 * @returns true, if this destination is generic odata and 'full_url' attribute is not set
 */
function isPartialUrlDestination(destination) {
    return Boolean(!destination.WebIDEAdditionalData?.includes(WebIDEAdditionalData.FULL_URL) &&
        isGenericODataDestination(destination));
}
/**
 * A destination configured as generic odata WITH the 'full_url' attribute are considered full url destinations.
 *
 * @param destination destination info
 * @returns true, if this destination has the generic odata and 'full_url' attribute is set
 */
function isFullUrlDestination(destination) {
    return Boolean(destination.WebIDEAdditionalData?.includes(WebIDEAdditionalData.FULL_URL) &&
        isGenericODataDestination(destination));
}
/**
 * Checks whether the provided destination is configured as an on-premise system.
 *
 * @param destination destination info
 * @returns true if the destination is configured as an on-premise system
 */
function isOnPremiseDestination(destination) {
    return Boolean(destination.ProxyType.includes(DestinationProxyType.ON_PREMISE));
}
/**
 * Validate if a destination has the property `HTML5.DynamicDestination` configured.
 *
 * @param destination destination info
 * @returns true, if this destination has HTML5.DynamicDestination configured
 */
function isHTML5DynamicConfigured(destination) {
    return Boolean(destination['HTML5.DynamicDestination']);
}
/**
 * Escape any special RegExp character that we want to use literally.
 *
 * @param str string input
 * @returns string a cleansed version of the input
 */
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
/**
 * Trim, cleanse and return a system name appended with the appropriate suffix i.e. BTP | S4HC.
 *
 * @param destinationName name of the destination
 * @param suffix the appropriate suffix appended, BTP | S4HC
 * @returns string return an escaped string, appended with the appropriate suffix
 */
function addSuffix(destinationName, suffix) {
    const suffixStr = ` (${suffix})`;
    return RegExp(`${escapeRegExp(suffixStr)}$`).exec(destinationName.trim())
        ? destinationName
        : `${destinationName} (${suffix})`;
}
/**
 * Generate a display name using the destination name, username if supplied and the appropriate suffix i.e. BTP | S4HC.
 *
 * @param destination destination info
 * @param displayUsername name to display with destination
 * @returns string a newly generated string value with the name of the destination, username if present and the system type
 */
function getDisplayName(destination, displayUsername) {
    const userDisplayName = displayUsername ? ` [${displayUsername}]` : '';
    let systemDisplayName;
    if (isAbapEnvironmentOnBtp(destination)) {
        systemDisplayName = addSuffix(destination.Name, Suffix.BTP);
    }
    else if (isS4HC(destination)) {
        systemDisplayName = addSuffix(destination.Name, Suffix.S4HC);
    }
    else {
        systemDisplayName = destination.Name;
    }
    return `${systemDisplayName}${userDisplayName}`;
}
/**
 * Checks whether the provided destination is configured to point to an S/4 HANA system.
 *
 * @param destination destination info
 * @returns boolean if the destination is configured for an SAP S/4HANA system
 */
function isS4HC(destination) {
    return Boolean(destination.WebIDEUsage?.includes(WebIDEUsage.ODATA_ABAP) &&
        destination.Authentication === Authentication.SAML_ASSERTION &&
        destination.ProxyType === ProxyType.INTERNET);
}
/**
 * Checks if the destination attributes WebIDEUsage is configured with odata_abap.
 * This is a non-strict check, as we want to maintain existing destinations, perhaps accidentally configured with other conflicting configurations.
 *
 * @param destination destination configuration properties
 * @returns true, if this destination has the 'odata_abap' attribute set
 */
function isAbapODataDestination(destination) {
    return !!destination.WebIDEUsage?.includes(WebIDEUsage.ODATA_ABAP);
}
/**
 * Cloud Foundry instance types
 */
exports.AbapEnvType = {
    /**
     * ABAP instance type
     */
    ABAP: 'abap',
    /**
     * ABAP trial instance type
     */
    ABAP_TRIAL: 'abap-trial',
    /**
     * ABAP CANARY trial instance type
     */
    ABAP_CANARY: 'abap-canary',
    /**
     * ABAP OEM instance type
     */
    ABAP_OEM: 'abap-oem',
    /**
     * ABAP OEM CANARY instance type
     */
    ABAP_OEM_CANARY: 'abap-oem-canary',
    /**
     * ABAP HAAS instance type
     */
    ABAP_HAAS: 'abap-haas',
    /**
     * Destination service instance type
     */
    DESTINATION: 'destination',
    /**
     * ABAP Staging service instance type
     */
    ABAP_STAGING: 'abap-staging',
    /**
     * ABAP Internal Staging service instance type
     */
    ABAP_INTERNAL_STAGING: 'abap-internal-staging'
};
//# sourceMappingURL=destination.js.map