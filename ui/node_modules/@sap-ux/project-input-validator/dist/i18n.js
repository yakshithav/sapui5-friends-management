"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROJECT_INPUT_VALIDATOR_NS = void 0;
exports.addi18nResourceBundle = addi18nResourceBundle;
exports.initI18nProjectValidators = initI18nProjectValidators;
exports.t = t;
const i18next_1 = __importDefault(require("i18next"));
const project_input_validator_i18n_json_1 = __importDefault(require("./translations/project-input-validator.i18n.json"));
exports.PROJECT_INPUT_VALIDATOR_NS = 'project-input-validator';
/**
 * Adds the `project-input-validator` resource bundle to i18next.
 * May be required to load i18n translations after initialising in the consumer module.
 */
function addi18nResourceBundle() {
    i18next_1.default.addResourceBundle('en', exports.PROJECT_INPUT_VALIDATOR_NS, project_input_validator_i18n_json_1.default);
}
/**
 * Initialize i18next with the translations for this module.
 */
async function initI18nProjectValidators() {
    await i18next_1.default.init({ lng: 'en', fallbackLng: 'en' });
    addi18nResourceBundle();
}
/**
 * Helper function facading the call to i18next. Unless a namespace option is provided the local namespace will be used.
 *
 * @param key i18n key
 * @param options additional options
 * @returns {string} localized string stored for the given key
 */
function t(key, options) {
    if (!options?.ns) {
        options = Object.assign(options ?? {}, { ns: exports.PROJECT_INPUT_VALIDATOR_NS });
    }
    return i18next_1.default.t(key, options);
}
initI18nProjectValidators().catch(() => {
    // needed by lint
});
//# sourceMappingURL=i18n.js.map