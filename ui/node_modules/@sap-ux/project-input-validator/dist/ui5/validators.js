"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateNamespace = validateNamespace;
exports.validateLibModuleName = validateLibModuleName;
exports.validateProjectFolder = validateProjectFolder;
exports.validateModuleName = validateModuleName;
const path_1 = require("path");
const i18n_1 = require("../i18n");
const fs_1 = require("fs");
const validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
/**
 * Validator: UI5 application namespace.
 *
 * @param namespace - namespace
 * @param moduleName - module name
 * @param allowUnderscore - should allow underscores in namespace
 * @returns true if valid, otherwise an error message string for use in Inquirer validation functions
 */
function validateNamespacePattern(namespace, moduleName = '', allowUnderscore = true) {
    // Since namespace is concatenated with name to write the app id to the yamls we must comply with the yaml specVersion validation
    // https://sap.github.io/ui5-tooling/stable/pages/Configuration/#name
    if (!/^[a-zA-Z]/.test(namespace)) {
        return (0, i18n_1.t)('ui5.namespaceMustStartWithLetter');
    }
    if (namespace.endsWith('.')) {
        return (0, i18n_1.t)('ui5.namespaceEndInPeriod');
    }
    if (namespace.toUpperCase() === 'SAP') {
        return (0, i18n_1.t)('ui5.namespaceCannotBeSap', { str: namespace });
    }
    if (namespace.toLowerCase().startsWith('new')) {
        return (0, i18n_1.t)('ui5.namespaceStartsWithNew', { str: namespace.substring(0, 3) });
    }
    if (/\.\d/.test(namespace)) {
        return (0, i18n_1.t)('ui5.namespaceNumberAfterPeriod');
    }
    if (allowUnderscore && !/^[\w.]+$/.test(namespace)) {
        return (0, i18n_1.t)('ui5.namespaceSpecialCharacter');
    }
    else if (!allowUnderscore && !/^[a-z0-9.]*$/g.test(namespace)) {
        return (0, i18n_1.t)('ui5.lowerAlphaNumericDotsOnly');
    }
    if ((moduleName + namespace).length > 70) {
        return (0, i18n_1.t)('ui5.nameCombinedTooLong', { length: 70 });
    }
    if (namespace.toLowerCase() !== namespace) {
        return (0, i18n_1.t)('ui5.inputValueContainsCapital', { promptName: 'Namespace' });
    }
    return true;
}
/**
 * Validator: UI5 namespace.
 *
 * @param namespace - namepsace to validate
 * @param moduleName - module name
 * @param allowUnderscore - is underscore characters allowed
 * @returns true if valid, otherwise an error message string for use in Inquirer validation functions
 */
function validateNamespace(namespace, moduleName, allowUnderscore = true) {
    if (!namespace) {
        return false;
    }
    return validateNamespacePattern(namespace, moduleName, allowUnderscore);
}
/**
 * Validator: UI5 library module name.
 *
 * @param libName - library module name
 * @returns true if valid, otherwise an error message string for use in Inquirer validation functions
 */
function validateLibModuleName(libName) {
    const isValid = validateModuleName(libName);
    if (typeof isValid === 'string') {
        return isValid;
    }
    if (!/^[a-z0-9]*$/g.test(libName)) {
        return (0, i18n_1.t)('ui5.lowerAlphaNumericOnly');
    }
    return true;
}
/**
 * Validator: UI5 project directory can be used to create a UI5 application.
 *
 * @param targetFolder - the directory path not including the application folder (UI5 application name)
 * @param projectName - the UI5 application directory name
 * @returns true if valid, otherwise an error message string for use in Inquirer validation function
 */
function validateProjectFolder(targetFolder, projectName) {
    if (!folderExists(targetFolder)) {
        return (0, i18n_1.t)('ui5.folderDoesNotExist');
    }
    if (!folderWritePermExists(targetFolder)) {
        return (0, i18n_1.t)('ui5.folderDoesNotHaveCorrectPermissions');
    }
    if (targetFolder && targetFolder.length > 0 && !folderExists((0, path_1.join)(targetFolder, projectName))) {
        return true;
    }
    else if (targetFolder && targetFolder.length > 0 && folderExists((0, path_1.join)(targetFolder, projectName))) {
        return (0, i18n_1.t)('ui5.moduleAlreadyExists', { folderName: projectName });
    }
    else {
        return (0, i18n_1.t)('ui5.enterProjectFolder');
    }
}
/**
 * Validator: UI5 package json module name validator. Validates a module name accoding to npm package rules and some additional UI5 specific rules.
 *
 * @param moduleName - module name to validate
 * @returns true if valid, otherwise an error message string for use in Inquirer validation functions
 */
function validateModuleName(moduleName) {
    if (/^[^a-zA-Z]/.test(moduleName)) {
        return (0, i18n_1.t)('ui5.moduleNameMustStartWithLetter');
    }
    if (moduleName?.length > 70) {
        return (0, i18n_1.t)('ui5.nameTooLong', { length: 70 });
    }
    if (moduleName?.length < 3) {
        return (0, i18n_1.t)('ui5.nameTooShort', { length: 3 });
    }
    // convert the validation strings from `validateNpmPackageName` to required texts
    const messageMap = {
        'name cannot be null': (0, i18n_1.t)('ui5.nameNull'),
        'name cannot be undefined': (0, i18n_1.t)('ui5.nameUndefined'),
        'name must be a string': (0, i18n_1.t)('ui5.nameNotString'),
        'name length must be greater than zero': (0, i18n_1.t)('ui5.nameLengthZero'),
        'name cannot start with a period': (0, i18n_1.t)('ui5.nameStartsWithPeriod'),
        'name cannot start with an underscore': (0, i18n_1.t)('ui5.nameStartsWithUnderscore'),
        'name cannot contain leading or trailing spaces': (0, i18n_1.t)('ui5.nameStartsOrEndsWithSpace'),
        [moduleName + ' is a blocklisted name']: (0, i18n_1.t)('ui5.nameBlocklisted', { moduleName }),
        [moduleName + ' is a core module name']: (0, i18n_1.t)('ui5.nameIsCoreModule', { moduleName }),
        'name can no longer contain more than 214 characters': (0, i18n_1.t)('ui5.nameTooLong', { length: 214 }),
        'name can no longer contain capital letters': (0, i18n_1.t)('ui5.inputValueContainsCapital', {
            promptName: 'Module'
        }),
        'name can no longer contain special characters ("~\'!()*")': (0, i18n_1.t)('ui5.nameContainsSpecialCharacters'),
        'name can only contain URL-friendly characters': (0, i18n_1.t)('ui5.nameNotUrlFriendly')
    };
    const valid = (0, validate_npm_package_name_1.default)(moduleName);
    if (valid.validForNewPackages && valid.validForOldPackages) {
        return true;
    }
    return [...(valid.errors ?? []), ...(valid.warnings ?? [])]
        .filter((msg) => !!msg)
        .map((msg) => messageMap[msg] ?? (0, i18n_1.t)('ui5.invalidModuleName'))
        .join(', ');
}
/**
 * Test for existence of specified directory path.
 *
 * @param dirPath - directory path
 * @returns true if the directory exists, false if not or validation error message
 */
function folderExists(dirPath) {
    if (dirPath && typeof dirPath !== 'string') {
        return (0, i18n_1.t)('ERROR_NAME_NOT_STRING');
    }
    return (0, fs_1.existsSync)(dirPath) && (0, fs_1.lstatSync)(dirPath).isDirectory();
}
/**
 * Test for directory write permissions.
 *
 * @param dirPath - path to the directory to test
 * @returns true, if write is allowed
 */
function folderWritePermExists(dirPath) {
    let folderPerm = true;
    const isWin = process.platform === 'win32';
    try {
        (0, fs_1.accessSync)(isWin ? path_1.posix.basename(dirPath) : dirPath, fs_1.constants.W_OK);
    }
    catch (err) {
        folderPerm = false;
    }
    return folderPerm;
}
//# sourceMappingURL=validators.js.map