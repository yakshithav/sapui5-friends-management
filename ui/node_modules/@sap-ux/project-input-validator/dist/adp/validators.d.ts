/**
 * Validates a value for duplication in existing change files.
 *
 * @param value The value to check for duplication.
 * @param propertyName The property name in the change file objects to check.
 * @param changeFiles The list of existing change files to check against.
 * @returns {boolean} Returns true if a content duplication is found and false if there is no content duplication.
 */
export declare function hasContentDuplication(value: string, propertyName: string, changeFiles: {
    content: object;
}[]): boolean;
/**
 * Validates a value for starting with a customer prefix.
 *
 * @param value The value to validate.
 * @returns {boolean} True if the value starts with 'customer.' and false if it does not.
 */
export declare function hasCustomerPrefix(value: string): boolean;
/**
 * Validates if a value is a valid data source URI.
 *
 * @param uri The URI to validate.
 * @returns {boolean} True if the URI is valid, false if it is not.
 */
export declare function isDataSourceURI(uri: string): boolean;
/**
 * Validates that the project name is not empty and it is correct for VENDOR and CUSTOMER_BASE layer.
 *
 * @param {string} value - The project name.
 * @param {string} destinationPath - The project directory.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
export declare function validateProjectName(value: string, destinationPath: string, isCustomerBase: boolean): boolean | string;
/**
 * Validates that project name is valid for CUSTOMER_BASE layer.
 *
 * @param {string} value - The project name.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
export declare function validateProjectNameExternal(value: string): boolean | string;
/**
 * Validates that project name is valid for VENDOR layer.
 *
 * @param {string} value - The project name.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
export declare function validateProjectNameInternal(value: string): boolean | string;
/**
 * Validates that project name is unique in directory.
 *
 * @param {string} value - The project name.
 * @param {string} destinationPath - The project directory.
 * @returns {string | boolean} If project with same name already exists return error message otherwise true.
 */
export declare function validateDuplicateProjectName(value: string, destinationPath: string): boolean | string;
/**
 * Validates that the project name is valid. Checks that it is not empty string and it is valid for CUSTOMER_BASE and VENDOR layers.
 *
 * @param {string} namespace - The project namespace.
 * @param {string} projectName - The project name.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If project namespace is valid returns true otherwise error message.
 */
export declare function validateNamespaceAdp(namespace: string, projectName: string, isCustomerBase: boolean): string | boolean;
/**
 * Validates that application ACH is not empty and it is in correct format.
 *
 * @param {string} value - The application component hierarchy.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If application ACH is valid returns true otherwise error message.
 */
export declare function validateAch(value: string, isCustomerBase: boolean): string | boolean;
//# sourceMappingURL=validators.d.ts.map