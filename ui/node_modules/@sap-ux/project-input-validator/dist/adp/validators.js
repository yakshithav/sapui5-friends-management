"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasContentDuplication = hasContentDuplication;
exports.hasCustomerPrefix = hasCustomerPrefix;
exports.isDataSourceURI = isDataSourceURI;
exports.validateProjectName = validateProjectName;
exports.validateProjectNameExternal = validateProjectNameExternal;
exports.validateProjectNameInternal = validateProjectNameInternal;
exports.validateDuplicateProjectName = validateDuplicateProjectName;
exports.validateNamespaceAdp = validateNamespaceAdp;
exports.validateAch = validateAch;
const path_1 = require("path");
const fs_1 = require("fs");
const i18n_1 = require("../i18n");
const validators_1 = require("../general/validators");
/**
 * Validates a value for duplication in existing change files.
 *
 * @param value The value to check for duplication.
 * @param propertyName The property name in the change file objects to check.
 * @param changeFiles The list of existing change files to check against.
 * @returns {boolean} Returns true if a content duplication is found and false if there is no content duplication.
 */
function hasContentDuplication(value, propertyName, changeFiles) {
    return changeFiles.some(({ content }) => {
        const contentProperty = content[propertyName];
        return contentProperty && Object.keys(contentProperty).includes(value);
    });
}
/**
 * Validates a value for starting with a customer prefix.
 *
 * @param value The value to validate.
 * @returns {boolean} True if the value starts with 'customer.' and false if it does not.
 */
function hasCustomerPrefix(value) {
    return value.toLowerCase().startsWith('customer.');
}
/**
 * Validates if a value is a valid data source URI.
 *
 * @param uri The URI to validate.
 * @returns {boolean} True if the URI is valid, false if it is not.
 */
function isDataSourceURI(uri) {
    return /^(?!.*\/\/)\/([^\s]*)\/$/.test(uri);
}
/**
 * Validates that the project name is not empty and it is correct for VENDOR and CUSTOMER_BASE layer.
 *
 * @param {string} value - The project name.
 * @param {string} destinationPath - The project directory.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
function validateProjectName(value, destinationPath, isCustomerBase) {
    const validationResult = (0, validators_1.validateEmptyString)(value);
    if (typeof validationResult === 'string') {
        return validationResult;
    }
    if (/[A-Z]/.test(value)) {
        return (0, i18n_1.t)('adp.projectNameUppercaseError');
    }
    if (!isCustomerBase) {
        return validateProjectNameInternal(value);
    }
    else {
        return validateProjectNameExternal(value);
    }
}
/**
 * Validates that project name is valid for CUSTOMER_BASE layer.
 *
 * @param {string} value - The project name.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
function validateProjectNameExternal(value) {
    if (value.length > 61 || value.toLocaleLowerCase().endsWith('component')) {
        return (0, i18n_1.t)('adp.projectNameLengthErrorExt');
    }
    if (!/^[a-z][a-z0-9]*(\.[a-z][a-z0-9]*)*$/.test(value)) {
        return (0, i18n_1.t)('adp.projectNameValidationErrorExt');
    }
    return true;
}
/**
 * Validates that project name is valid for VENDOR layer.
 *
 * @param {string} value - The project name.
 * @returns {string | boolean} If value is valid returns true otherwise error message.
 */
function validateProjectNameInternal(value) {
    if (value.toLowerCase().startsWith('customer') ||
        value.length > 61 ||
        value.toLocaleLowerCase().endsWith('component')) {
        return (0, i18n_1.t)('adp.projectNameLengthErrorInt');
    }
    if (!/^[a-z]+[a-z0-9]*(\.[a-z]+[a-z0-9]*)+$/i.test(value)) {
        return (0, i18n_1.t)('adp.projectNameValidationErrorInt');
    }
    return true;
}
/**
 * Validates that project name is unique in directory.
 *
 * @param {string} value - The project name.
 * @param {string} destinationPath - The project directory.
 * @returns {string | boolean} If project with same name already exists return error message otherwise true.
 */
function validateDuplicateProjectName(value, destinationPath) {
    if ((0, fs_1.existsSync)((0, path_1.join)(destinationPath, value))) {
        return (0, i18n_1.t)('adp.duplicatedProjectName');
    }
    return true;
}
/**
 * Validates that the project name is valid. Checks that it is not empty string and it is valid for CUSTOMER_BASE and VENDOR layers.
 *
 * @param {string} namespace - The project namespace.
 * @param {string} projectName - The project name.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If project namespace is valid returns true otherwise error message.
 */
function validateNamespaceAdp(namespace, projectName, isCustomerBase) {
    const validationResult = (0, validators_1.validateEmptyString)(namespace);
    if (typeof validationResult === 'string') {
        return validationResult;
    }
    if (!isCustomerBase) {
        if (namespace !== projectName) {
            return (0, i18n_1.t)('adp.differentNamespaceThanProjectName');
        }
    }
    else if (namespace.toLowerCase().startsWith('customer.') !== true) {
        return (0, i18n_1.t)('adp.namespaceSameAsProjectNameError');
    }
    else {
        namespace = namespace.slice('customer.'.length, namespace.length);
    }
    if (namespace.length > 61 || namespace.toLowerCase().endsWith('component') === true) {
        return (0, i18n_1.t)('adp.namespaceLengthError');
    }
    else if (namespace !== '' && /^[a-z]+((\.)?[a-z0-9])*$/.test(namespace) === false) {
        return (0, i18n_1.t)('adp.namespaceValidationError');
    }
    return true;
}
/**
 * Validates that application ACH is not empty and it is in correct format.
 *
 * @param {string} value - The application component hierarchy.
 * @param {boolean} isCustomerBase - Whether the layer is customer base.
 * @returns {string | boolean} If application ACH is valid returns true otherwise error message.
 */
function validateAch(value, isCustomerBase) {
    const validationResult = (0, validators_1.validateEmptyString)(value);
    if (typeof validationResult === 'string') {
        return validationResult;
    }
    const isValid = /^([A-Z0-9]{2,3})(-[A-Z0-9]{1,6})*$/.exec(value.toUpperCase());
    if (!isCustomerBase && !isValid) {
        return (0, i18n_1.t)('adp.achMandatoryError');
    }
    return true;
}
//# sourceMappingURL=validators.js.map