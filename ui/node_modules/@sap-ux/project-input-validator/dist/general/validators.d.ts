export type AllowedCharacters = '_';
/**
 * SAP client number is either empty or 3 digit string.
 *
 * @param client ABAP system client number
 * @returns true or error message
 */
export declare function validateClient(client: string): boolean | string;
/**
 * Validate url input is valid url format.
 *
 * @param input Backend ABAP system url
 * @returns true or error message
 */
export declare function validateUrl(input: string): boolean | string;
/**
 * Validate input is not empty string.
 *
 * @param input input string to be validated
 * @returns true or error message
 */
export declare function validateEmptyString(input: string): boolean | string;
/**
 * Validate input does not contain any whitespace characters.
 *
 * @param value The string to check for whitespace characters.
 * @returns true or error message
 */
export declare function validateEmptySpaces(value: string): boolean | string;
/**
 * Validates that the given string does not exceed the specified maximum length.
 *
 * @param {string} value - The string value to validate.
 * @param {number} [maxLength] - The maximum allowed length of the string. If 0 or not provided, no length validation is performed.
 * @returns {boolean | string} Returns `true` if the validation passes, or an error message string if it fails.
 */
export declare function validateMaxLength(value: string, maxLength?: number): boolean | string;
/**
 * Validates whether the input contains only alphanumeric characters and allowed special characters.
 *
 * @param {string} value - The input string to validate.
 * @param {string[]} allowedCharacters - An array of allowed special characters.
 * @returns {boolean | string} Returns `true` if validation passes, or an error message string if validation fails.
 */
export declare function validateAllowedCharacters(value: string, allowedCharacters?: AllowedCharacters[]): boolean | string;
/**
 * Validate input is valid JSON.
 *
 * @param value The string to test.
 * @returns true or error message
 */
export declare function validateJSON(value: string): boolean | string;
/**
 * Validates a value for special characters.
 *
 * @param value The value to validate.
 * @param regexp The regex expression for allowed special characters.
 * @returns {boolean} True if validation passes, or an error message if validation fails.
 */
export declare function validateSpecialChars(value: string, regexp?: string): boolean | string;
/**
 * Checks if the combined Windows path length exceeds the default limit (256 characters).
 *
 * @param basePath The base path (e.g., target folder or mtaPath) + the name, ID, or additional segment to be appended
 * @param errorMessage The error message to be returned if the path is too long. Use `{length}` as a placeholder for the actual length.
 * @returns true if valid, or the error message if too long
 */
export declare function validateWindowsPathLength(basePath: string, errorMessage: string): true | string;
//# sourceMappingURL=validators.d.ts.map