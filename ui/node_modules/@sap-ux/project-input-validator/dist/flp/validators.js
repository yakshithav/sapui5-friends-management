"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateText = validateText;
const i18n_1 = require("../i18n");
const validators_1 = require("../general/validators");
/**
 * Validates that text input does not have zero length and optionally is less than the specified maximum length.
 * Returns an end user message if validation fails.
 *
 * @param input the text input to validate
 * @param isCLI indicates if the platform is CLI
 * @param maxLength optional, the maximum length of text to allow
 * @param allowedCharacters optional, define a list of special characters that should be allowed in the input field
 * @returns true, if all validation checks pass or a message explaining the validation failure
 */
function validateText(input, isCLI, maxLength = 0, allowedCharacters) {
    const trimmedInput = input ? input.trim() : '';
    const length = trimmedInput.length;
    if (!length) {
        if (isCLI) {
            return (0, i18n_1.t)('general.inputCannotBeEmpty');
        }
        return false;
    }
    const maxLengthValidation = (0, validators_1.validateMaxLength)(input, maxLength);
    if (typeof maxLengthValidation === 'string') {
        return maxLengthValidation;
    }
    const allowedCharsValidation = (0, validators_1.validateAllowedCharacters)(input, allowedCharacters);
    if (typeof allowedCharsValidation === 'string') {
        return allowedCharsValidation;
    }
    return true;
}
//# sourceMappingURL=validators.js.map