"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAppName = validateAppName;
exports.validateAppDescription = validateAppDescription;
exports.validateTransportRequestNumber = validateTransportRequestNumber;
exports.validatePackage = validatePackage;
const i18n_1 = require("../i18n");
const os_1 = require("os");
/**
 * Validator Fiori app name is compatble with Fiori project requirements.
 *
 * @param name Fiori app name
 * @param prefix Prefix required by backend system
 * @returns True or error message
 */
function validateAppName(name, prefix) {
    const errorMessages = [];
    const length = name ? name.trim().length : 0;
    if (!length) {
        return (0, i18n_1.t)('deploy.abapAppNameRequired');
    }
    if (name.split('/').length > 3) {
        errorMessages.push((0, i18n_1.t)('deploy.abapInvalidNamespace'));
    }
    else if (/^\/.*\/\w*$/g.test(name)) {
        const splitNames = name.split('/');
        let accumulatedMsg = '';
        if (splitNames[1].length > 10) {
            const errMsg = (0, i18n_1.t)('deploy.abapInvalidNamespaceLength', { length: splitNames[1].length });
            accumulatedMsg += `${errMsg}, `;
        }
        if (splitNames[2].length > 15) {
            const errMsg = (0, i18n_1.t)('deploy.abapInvalidAppNameLength', { length: splitNames[2].length });
            accumulatedMsg += `${errMsg}, `;
        }
        if (accumulatedMsg) {
            accumulatedMsg = accumulatedMsg.substring(0, accumulatedMsg.length - 2);
            errorMessages.push(accumulatedMsg);
        }
    }
    else if (length > 15) {
        errorMessages.push((0, i18n_1.t)('deploy.abapInvalidAppNameLength', { length }));
    }
    if (prefix && !name.toUpperCase().startsWith(prefix.toUpperCase())) {
        errorMessages.push((0, i18n_1.t)('deploy.abapInvalidAppName', { prefix }));
    }
    if (!/^[A-Za-z0-9_/]*$/.test(name)) {
        errorMessages.push((0, i18n_1.t)('deploy.charactersForbiddenInAppName'));
    }
    return processErrorMessages(errorMessages);
}
/**
 * Helper function to format an array of error messages to a single string.
 *
 * @param errorMessages Array of error messages
 * @returns Returns true or formatted error message string
 */
function processErrorMessages(errorMessages) {
    if (errorMessages.length === 0) {
        return true;
    }
    else if (errorMessages.length === 1) {
        return errorMessages[0];
    }
    else {
        const indentErrorMessageRows = errorMessages.map((errorMessage) => `${' '.repeat(8)}${errorMessage}`).join(os_1.EOL);
        return `${(0, i18n_1.t)('deploy.invalidAppNameMultipleReason')}${os_1.EOL}${indentErrorMessageRows}${os_1.EOL}`;
    }
}
/**
 * Validate Fiori app description length is not exceeding 60 characters.
 *
 * @param description Fiori app description
 * @returns true or error message
 */
function validateAppDescription(description) {
    if (description.length > 60) {
        return (0, i18n_1.t)('deploy.abapAppDescLength');
    }
    else {
        return true;
    }
}
/**
 * Transport request number is not required for local package.
 *
 * @param transportRequest Transport request number
 * @param packageName Package name
 * @returns true or error message
 */
function validateTransportRequestNumber(transportRequest, packageName) {
    const regex = /^[$LlTt]/;
    if (!regex.test(packageName) && !transportRequest?.trim()) {
        return (0, i18n_1.t)('deploy.abapTransportNumRequired');
    }
    else {
        return true;
    }
}
/**
 * Validate package name cannot be empty.
 *
 * @param input Package name
 * @returns true or error message
 */
function validatePackage(input) {
    if (!input?.trim()) {
        return (0, i18n_1.t)('deploy.abapPackageWarn');
    }
    else {
        return true;
    }
}
//# sourceMappingURL=validators.js.map