"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportEnableTelemetryOnOff = exports.reportRuntimeError = void 0;
const appInsights = __importStar(require("applicationinsights"));
const azure_client_config_1 = require("./azure-client-config");
const config_state_1 = require("../config-state");
const types_1 = require("../types");
const parseErrorStack = (errorStack) => {
    const regexps = [/sap-ux.+/gi, /[a-zA-Z-]+\/ide-extension\/.+/gi, /(\/telemetry\/.+)/gi];
    const parsedStack = [];
    const filtered = errorStack.split('\n').filter((line) => !!/^\s*at .*(\S+:\d+|\(native\))/m.exec(line));
    if (!filtered.length) {
        return parsedStack;
    }
    filtered.forEach((line) => {
        let sanitizedLine = line.replace(/^\s+/, '');
        const lineRegexp = / (\((.+):(\d+):(\d+)\)$)/;
        const location = lineRegexp.exec(line);
        if (!location) {
            return;
        }
        let filepath = null;
        const normalizedFilepath = location[2].replace(/\\/g, '/');
        for (const regexp of regexps) {
            const match = regexp.exec(normalizedFilepath);
            if (match) {
                filepath = match[0];
                break;
            }
        }
        if (!filepath) {
            return;
        }
        sanitizedLine = sanitizedLine.replace(location[0], '');
        const functionName = sanitizedLine.split(/\s+/).slice(1).join('');
        const lineNumber = location[3];
        const columnNumber = location[4];
        const parsedStackLine = `${functionName} at (${filepath}:${lineNumber}:${columnNumber});`;
        parsedStack.push(parsedStackLine);
    });
    return parsedStack;
};
let reportingTelemetryClient;
const reportRuntimeError = (error) => {
    if (process.env.SAP_UX_FIORI_TOOLS_DISABLE_TELEMETRY?.trim() !== 'true') {
        reportingTelemetryClient = new appInsights.TelemetryClient(config_state_1.TelemetrySettings.azureInstrumentationKey);
        (0, azure_client_config_1.configAzureTelemetryClient)(reportingTelemetryClient);
    }
    const properties = { message: error.message };
    if (error.stack) {
        const parsedStack = parseErrorStack(error.stack);
        if (parsedStack.length) {
            properties.stack = parsedStack.join(' \n');
        }
    }
    const telemetryEvent = {
        name: types_1.EventName.TELEMETRY_SETTINGS_INIT_FAILED,
        properties,
        measurements: {}
    };
    if (process.env.SAP_UX_FIORI_TOOLS_DISABLE_TELEMETRY !== 'true') {
        reportingTelemetryClient.trackEvent(telemetryEvent);
    }
};
exports.reportRuntimeError = reportRuntimeError;
const reportEnableTelemetryOnOff = (enableTelemetry, commonProperties) => {
    const telemetryEvent = {
        name: types_1.EventName.DISABLE_TELEMETRY,
        properties: {
            disableTelemetry: `${!enableTelemetry}`,
            ...commonProperties
        },
        measurements: {}
    };
    if (process.env.SAP_UX_FIORI_TOOLS_DISABLE_TELEMETRY !== 'true') {
        reportingTelemetryClient.trackEvent(telemetryEvent);
    }
};
exports.reportEnableTelemetryOnOff = reportEnableTelemetryOnOff;
//# sourceMappingURL=reporting.js.map