type instruction = ParamRecordConfigField | string | undefined;
export type dimensions = {
    [key: string]: string;
};
export type measurements = {
    [key: string]: number;
};
/**
 * ParamRecordConfigField
 */
export declare class ParamRecordConfigField {
    path: string;
    /**
     *
     * @param path input path
     */
    constructor(path: string);
}
/**
 *
 */
export declare class ParamRecordConfig {
    key: string | undefined;
    value: instruction;
    paramIndex: number | undefined;
    /**
     *
     * @param key - string or undefined;
     * When string set as key of new field;
     * When undefined key of new field set to - 'data';
     * @param value - instance of ParamRecordConfigField, string or undefined;
     * When instance of ParamRecordConfigField data gets extracted from specified path of parameter under index specified in @param paramIndex;
     * When string set as value of new field;
     * When undefined - new fields value being set as parameter under index of @param paramIndex;
     * @param paramIndex - optional, number or undefined;
     * When number - speicifes index of parameter to capture or extract data from;
     * Set to undefined when want to use strin passed as @param value as new fields value;
     */
    constructor(key?: string | undefined, value?: instruction, paramIndex?: number | undefined);
}
export declare const wrongPathErr: (field: string, index: number) => Error;
export declare const getValue: (obj: any, path: string, field: string, paramIndex: number) => number | string;
export declare const paramsProcessing: (params: any, instructions: ParamRecordConfig) => [dimensions, measurements];
export declare const getParamsData: (params: any, // eslint-disable-line @typescript-eslint/no-explicit-any
instructions: ParamRecordConfig[] | ParamRecordConfig) => [dimensions, measurements];
export {};
//# sourceMappingURL=param-processing.d.ts.map