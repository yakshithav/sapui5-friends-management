"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParamsData = exports.paramsProcessing = exports.getValue = exports.wrongPathErr = exports.ParamRecordConfig = exports.ParamRecordConfigField = void 0;
/**
 * ParamRecordConfigField
 */
class ParamRecordConfigField {
    path;
    /**
     *
     * @param path input path
     */
    constructor(path) {
        this.path = path;
    }
}
exports.ParamRecordConfigField = ParamRecordConfigField;
/**
 *
 */
class ParamRecordConfig {
    key;
    value;
    paramIndex;
    /**
     *
     * @param key - string or undefined;
     * When string set as key of new field;
     * When undefined key of new field set to - 'data';
     * @param value - instance of ParamRecordConfigField, string or undefined;
     * When instance of ParamRecordConfigField data gets extracted from specified path of parameter under index specified in @param paramIndex;
     * When string set as value of new field;
     * When undefined - new fields value being set as parameter under index of @param paramIndex;
     * @param paramIndex - optional, number or undefined;
     * When number - speicifes index of parameter to capture or extract data from;
     * Set to undefined when want to use strin passed as @param value as new fields value;
     */
    constructor(key = undefined, value = undefined, paramIndex = undefined) {
        this.key = key;
        this.value = value;
        this.paramIndex = paramIndex;
    }
}
exports.ParamRecordConfig = ParamRecordConfig;
const wrongPathErr = (field, index) => new Error(`Wrong path for '${field}' field is specified in instructions with index - ${index}`);
exports.wrongPathErr = wrongPathErr;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getValue = (obj, path, field, paramIndex) => {
    const pathArr = path.split('/');
    let node = obj, i = 0;
    while (i < pathArr.length) {
        node = node[pathArr[i]];
        if (node === undefined) {
            throw (0, exports.wrongPathErr)(field, paramIndex);
        }
        i++;
    }
    return node;
};
exports.getValue = getValue;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const paramsProcessing = (params, instructions) => {
    const processedDimensions = {};
    const processedMeasurements = {};
    let param = null; // eslint-disable-line @typescript-eslint/no-explicit-any
    if (instructions.paramIndex !== undefined) {
        param = params[instructions.paramIndex];
    }
    const key = instructions.key ? instructions.key : 'data';
    let val = '';
    if (typeof instructions.value === 'string') {
        val = instructions.value;
    }
    else if (instructions.value !== undefined && instructions.paramIndex !== undefined) {
        val = (0, exports.getValue)(param, instructions.value.path, 'val', instructions.paramIndex);
    }
    else {
        val = param;
    }
    if (!isNaN(val)) {
        processedMeasurements[key] = val;
    }
    else {
        processedDimensions[key] = val;
    }
    return [processedDimensions, processedMeasurements];
};
exports.paramsProcessing = paramsProcessing;
const getParamsData = (params, // eslint-disable-line @typescript-eslint/no-explicit-any
instructions) => {
    let processedDimensions, processedMeasurements;
    let customDimensions = {};
    let customMeasurements = {};
    if (Array.isArray(instructions)) {
        for (const instruction of instructions) {
            [processedDimensions, processedMeasurements] = (0, exports.paramsProcessing)(params, instruction);
            customDimensions = {
                ...customDimensions,
                ...processedDimensions
            };
            customMeasurements = {
                ...customMeasurements,
                ...processedMeasurements
            };
        }
    }
    else {
        [customDimensions, customMeasurements] = (0, exports.paramsProcessing)(params, instructions);
    }
    return [customDimensions, customMeasurements];
};
exports.getParamsData = getParamsData;
//# sourceMappingURL=param-processing.js.map