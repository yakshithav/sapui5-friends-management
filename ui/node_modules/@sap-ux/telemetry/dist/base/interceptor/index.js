"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.captureParamAsync = exports.captureParam = exports.durationAsync = exports.duration = exports.notifyAsync = exports.notify = void 0;
const client_1 = require("../client");
const api_1 = require("../performance/api");
const param_processing_1 = require("../utils/param-processing");
const notify = (target, originalFn, evtName, sampleRate) => {
    return (...args) => {
        const result = originalFn.apply(target, args);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, {}, {}, sampleRate);
        return result;
    };
};
exports.notify = notify;
const notifyAsync = (target, originalFn, evtName, sampleRate) => {
    return async (...args) => {
        const result = await originalFn.apply(target, args);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, {}, {}, sampleRate);
        return result;
    };
};
exports.notifyAsync = notifyAsync;
const duration = (target, originalFn, evtName, sampleRate) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return (...args) => {
        const markName = api_1.PerformanceMeasurementAPI.startMark('mark');
        const result = originalFn.apply(target, args);
        api_1.PerformanceMeasurementAPI.endMark(markName);
        api_1.PerformanceMeasurementAPI.measure(markName);
        const duration = api_1.PerformanceMeasurementAPI.getMeasurementDuration(markName);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, {}, { ms: duration }, sampleRate);
        return result;
    };
};
exports.duration = duration;
const durationAsync = (target, originalFn, evtName, sampleRate) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return async (...args) => {
        const markName = api_1.PerformanceMeasurementAPI.startMark('mark');
        const result = await originalFn.apply(target, args);
        api_1.PerformanceMeasurementAPI.endMark(markName);
        api_1.PerformanceMeasurementAPI.measure(markName);
        const duration = api_1.PerformanceMeasurementAPI.getMeasurementDuration(markName);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, {}, { ms: duration }, sampleRate);
        return result;
    };
};
exports.durationAsync = durationAsync;
const captureParam = (target, originalFn, evtName, sampleRate, instructions) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return (...args) => {
        const result = originalFn.apply(target, args);
        const [customDimensions, customMeasurements] = (0, param_processing_1.getParamsData)(args, instructions);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, customDimensions, customMeasurements, sampleRate);
        return result;
    };
};
exports.captureParam = captureParam;
const captureParamAsync = (target, originalFn, evtName, sampleRate, instructions) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return async (...args) => {
        const result = await originalFn.apply(target, args);
        const [customDimensions, customMeasurements] = (0, param_processing_1.getParamsData)(args, instructions);
        const appinsightClient = client_1.ClientFactory.getTelemetryClient();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        appinsightClient.report(evtName, customDimensions, customMeasurements, sampleRate);
        return result;
    };
};
exports.captureParamAsync = captureParamAsync;
//# sourceMappingURL=index.js.map