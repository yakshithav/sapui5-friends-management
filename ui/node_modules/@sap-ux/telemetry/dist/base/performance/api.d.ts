import type { EntriesArray } from './types';
import { EntryType, PerformanceMeasurement } from './types';
/**
 *
 */
declare class PerformanceMeasurementAPI extends PerformanceMeasurement {
    static initTiming: number;
    private static now;
    static entries: EntriesArray;
    static initialize(): void;
    /**
     * Create a new Mark.
     *
     * @param name Name of mark
     * @param type type of mark
     * @param timing Timestamp when mark is created, measured in ms
     */
    private static mark;
    /**
     * Create a start mark of a measurement.
     *
     * @param name Name of start mark
     * @returns Id to track a measurement
     */
    static startMark(name: string): string;
    /**
     * Set end mark of a measurement.
     *
     * @param name Name of end mark
     */
    static endMark(name: string): void;
    /**
     * Measure execution time lenght of a given mark name.
     *
     * @param markName Name of mark
     */
    static measure(markName: string): void;
    /**
     * @returns All entries
     */
    static getEntries(): EntriesArray;
    /**
     * Get Mark/Measurement by name.
     *
     * @param name Name of entry
     * @returns array of marks/measurements
     */
    static getEntriesByName(name: string): EntriesArray;
    /**
     * Get Mark/Measurement by name and type.
     *
     * @param name Name of entry
     * @param type EntryType
     * @returns array of marks/measurements
     */
    static getEntriesByNameType(name: string, type: EntryType): EntriesArray;
    /**
     * Get Mark/Measurement by type.
     *
     * @param type EntryType
     * @returns array of marks/measurements
     */
    static getEntriesByType(type: EntryType): EntriesArray;
    /**
     * Get duration of a measurement.
     *
     * @param name Name of a measurement
     * @returns time length in ms
     */
    static getMeasurementDuration(name: string): number;
    static clearEntries(): void;
}
export { PerformanceMeasurementAPI };
//# sourceMappingURL=api.d.ts.map