"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolsSuiteTelemetryClient = void 0;
const azure_appinsight_client_1 = require("../base/client/azure-appinsight-client");
const _1 = require(".");
const date_1 = require("../base/utils/date");
/**
 *
 */
class ToolsSuiteTelemetryClient extends azure_appinsight_client_1.ApplicationInsightClient {
    /**
     *
     * @param applicationKey Application key to identify the Azure Application Insight resource
     * @param extensionName Unique name of the extension in the format of {publisher}.{extension}
     * @param extensionVersion Conventional version number of the extension
     */
    constructor(applicationKey, extensionName, extensionVersion) {
        super(applicationKey, extensionName, extensionVersion);
    }
    /**
     * Send a telemetry event to Azure Application Insights.
     *
     * @deprecated Use reportEvent instead.
     * @param eventName Categorize the type of the event within the scope of an extension.
     * @param properties A set of string properties to be reported
     * @param measurements  A set of numeric measurements to be reported
     * @param sampleRate Sampling the event to be sent
     * @param telemetryHelperProperties Properties that are passed to the processCommonPropertiesHelper function to assit generate project specific telemetry data
     * @param ignoreSettings Ignore telemetryEnabled settings and skip submitting telemetry data
     * @returns Promise<void>
     */
    async report(eventName, properties, measurements, sampleRate, telemetryHelperProperties, ignoreSettings) {
        const fioriProjectCommonProperties = await (0, _1.processToolsSuiteTelemetry)(telemetryHelperProperties);
        const commonProperties = {
            v: this.extensionVersion,
            datetime: (0, date_1.localDatetimeToUTC)()
        };
        const finalProperties = {
            ...properties,
            ...fioriProjectCommonProperties,
            ...commonProperties
        };
        await super.report(eventName, finalProperties, measurements, sampleRate, telemetryHelperProperties, ignoreSettings);
    }
    /**
     * Send a telemetry event to Azure Application Insights.
     *
     * @param event Telemetry Event
     * @param sampleRate Sampling the event to be sent
     * @param telemetryHelperProperties Properties that are passed to the processCommonPropertiesHelper function to assit generate project specific telemetry data
     * @param ignoreSettings Ignore telemetryEnabled settings and skip submitting telemetry data
     * @returns Promise<void>
     */
    async reportEvent(event, sampleRate, telemetryHelperProperties, ignoreSettings) {
        const { finalProperties, finalMeasurements } = await this.collectToolsSuiteTelemetry(event, telemetryHelperProperties);
        return super.report(event.eventName, finalProperties, finalMeasurements, sampleRate, telemetryHelperProperties, ignoreSettings);
    }
    /**
     * Send a telemetry event to Azure Application Insights. This API makes sure the telemetry event
     * is flushed to Azure backend before executing the next statement. Since this API blocks
     * normal execution flow, please use this API cautiously. See `reportEvent()` method for non-blocking
     * usage.
     *
     * @param event Telemetry Event
     * @param sampleRate Sampling the event to be sent
     * @param telemetryHelperProperties Properties that are passed to the processCommonPropertiesHelper function to assit generate project specific telemetry data
     * @param ignoreSettings Ignore telemetryEnabled settings and skip submitting telemetry data
     * @returns Promise<void>
     */
    async reportEventBlocking(event, sampleRate, telemetryHelperProperties, ignoreSettings) {
        const { finalProperties, finalMeasurements } = await this.collectToolsSuiteTelemetry(event, telemetryHelperProperties);
        return super.reportBlocking(event.eventName, finalProperties, finalMeasurements, sampleRate, ignoreSettings);
    }
    /**
     * Add common properties to properties and measurements of consumer's telemetry event.
     *
     * @param event telemetry event
     * @param telemetryHelperProperties Additional properties that can be undefined
     * @returns Telemetry properties and measurements
     */
    async collectToolsSuiteTelemetry(event, telemetryHelperProperties) {
        const fioriProjectCommonProperties = await (0, _1.processToolsSuiteTelemetry)(telemetryHelperProperties);
        const telemetryEventCommonProperties = {
            v: this.extensionVersion,
            datetime: (0, date_1.localDatetimeToUTC)()
        };
        const finalProperties = {
            ...event.properties,
            ...fioriProjectCommonProperties,
            ...telemetryEventCommonProperties
        };
        const finalMeasurements = {
            ...event.measurements
        };
        return {
            finalProperties,
            finalMeasurements
        };
    }
}
exports.ToolsSuiteTelemetryClient = ToolsSuiteTelemetryClient;
//# sourceMappingURL=telemetry-client.js.map