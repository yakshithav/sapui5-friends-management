"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initTelemetrySettings = void 0;
exports.setEnableTelemetry = setEnableTelemetry;
exports.getTelemetrySetting = getTelemetrySetting;
const reporting_1 = require("../base/utils/reporting");
const store_1 = require("@sap-ux/store");
const btp_utils_1 = require("@sap-ux/btp-utils");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const data_processor_1 = require("./data-processor");
const config_state_1 = require("../base/config-state");
const config_state_2 = require("./config-state");
const deprecatedSettingPaths = {
    win32: '\\AppData\\Roaming\\Code\\User\\settings.json',
    darwin: '/Library/Application Support/Code/User/settings.json',
    linux: '/.config/Code/User/settings.json',
    theia: '/.theia/settings.json'
};
const deprecatedExtensionPropKeys = [
    'sap.ux.annotation.lsp.enableTelemetry',
    'sap.ux.applicationModeler.enableTelemetry',
    'sap.ux.help.enableTelemetry',
    'sap.ux.serviceModeler.enableTelemetry'
];
const definePath = (paths) => {
    const platform = process.platform;
    let settingsPath = paths[platform];
    if ((0, btp_utils_1.isAppStudio)()) {
        settingsPath = paths.theia;
    }
    if (!settingsPath) {
        // no path for unknown platform settings path
        return null;
    }
    const homedir = os_1.default.homedir();
    return path_1.default.join(homedir, settingsPath);
};
/**
 * Read telemetry settings from file store.
 *
 * @param storeService Store service that is used for read/write telemetry settings
 */
async function readEnableTelemetry(storeService) {
    let setting;
    try {
        setting = await storeService.read(new store_1.TelemetrySettingKey());
    }
    catch {
        // ignore read failure, assume file doens't exist and thus setting is undefined
    }
    if (!setting) {
        // If no telemetry setting found in .fioritools folder,
        // check telemetry setting in vscode settings for extensions
        const deprecatedSettingPath = definePath(deprecatedSettingPaths);
        if (!deprecatedSettingPath) {
            // If no vscode setting found, default central telemetry setting to true
            await setEnableTelemetry(true);
        }
        else {
            // If deprecated vscode setting exists, set central telemetry setting to false if any of vscode setting was false
            let content;
            try {
                content = await fs_1.default.promises.readFile(deprecatedSettingPath, 'utf-8');
                const deprecatedSetting = JSON.parse(content);
                const propValues = deprecatedExtensionPropKeys.map((propKey) => (deprecatedSetting[propKey] ?? true));
                const deprecatedEnableTelemetrySetting = propValues.reduce((prevValue, currentValue) => prevValue && currentValue, true);
                await setEnableTelemetry(deprecatedEnableTelemetrySetting);
            }
            catch {
                // ignore read failure and content is undefined
                await setEnableTelemetry(true);
            }
        }
    }
    else {
        config_state_1.TelemetrySettings.telemetryEnabled = setting.enableTelemetry;
    }
}
/**
 * Watch changes to telemetry setting in the store and update runtime settings accordingly.
 *
 * @param storeService Store service that is used for read/write telemetry settings
 */
function watchTelemetrySettingStore(storeService) {
    (0, store_1.getFilesystemWatcherFor)(store_1.Entity.TelemetrySetting, () => {
        storeService
            .read(new store_1.TelemetrySettingKey())
            .then((watchedSetting) => {
            if (watchedSetting) {
                config_state_1.TelemetrySettings.telemetryEnabled = watchedSetting.enableTelemetry;
            }
        })
            .catch(() => {
            // Failed to read file changes, nothing can be done here.
        });
    });
}
/**
 * Telemetry API function to init settings.
 *
 * @param options Settings pass from the consumer module.
 */
const initTelemetrySettings = async (options) => {
    try {
        config_state_1.TelemetrySettings.consumerModuleName = options.consumerModule.name;
        config_state_1.TelemetrySettings.consumerModuleVersion = options.consumerModule.version;
        config_state_2.ToolingTelemetrySettings.internalFeature = options.internalFeature ?? false;
        if (options.resourceId) {
            config_state_1.TelemetrySettings.azureInstrumentationKey = options.resourceId;
        }
        const storeService = await (0, store_1.getService)({
            entityName: 'telemetrySetting'
        });
        await readEnableTelemetry(storeService);
        if (options.watchTelemetrySettingStore) {
            watchTelemetrySettingStore(storeService);
        }
    }
    catch (err) {
        (0, reporting_1.reportRuntimeError)(err);
    }
};
exports.initTelemetrySettings = initTelemetrySettings;
/**
 * Toggle on/off enable telemetry setting. This will update telemetry settings file
 * and the runtime setting.
 *
 * @param enableTelemetry Telemetry is enabled or not
 */
async function setEnableTelemetry(enableTelemetry) {
    try {
        const storeService = await (0, store_1.getService)({
            entityName: 'telemetrySetting'
        });
        const setting = new store_1.TelemetrySetting({ enableTelemetry });
        await storeService.write(setting);
        config_state_1.TelemetrySettings.telemetryEnabled = enableTelemetry;
    }
    catch {
        // Telemetry settings could not be written
    }
    const commonProperties = await (0, data_processor_1.getCommonProperties)();
    (0, reporting_1.reportEnableTelemetryOnOff)(enableTelemetry, commonProperties);
}
/**
 * Get telemetry settings.
 *
 * @returns Telemetry settings of context module that consumes telemetry library
 */
async function getTelemetrySetting() {
    let setting;
    try {
        const storeService = await (0, store_1.getService)({
            entityName: 'telemetrySetting'
        });
        setting = await storeService.read(new store_1.TelemetrySettingKey());
    }
    catch {
        // ignore if settings could not be read, return undefined
    }
    return setting;
}
//# sourceMappingURL=telemetry-settings.js.map