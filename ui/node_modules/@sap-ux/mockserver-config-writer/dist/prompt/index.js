"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockserverConfigQuestions = getMockserverConfigQuestions;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const app_info_1 = require("../app-info");
const __1 = require("..");
/**
 * Return the list of questions to configure mockserver.
 *
 * @param params - optional parameters used to fill default values
 * @param params.webappPath - optional path to webapp folder, where manifest is
 * @param params.askForOverwrite - optional, whether to overwrite services in mockserver config
 * @param params.fs - optional memfs editor instance
 * @returns - array of questions that serves as input for prompt module
 */
function getMockserverConfigQuestions(params) {
    const prompts = [];
    const questionPath = {
        name: 'path',
        message: (0, __1.t)('questions.pathToMock')
    };
    if (params?.webappPath) {
        const fs = params.fs ?? (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
        const manifest = JSON.parse(fs.read((0, path_1.join)(params.webappPath, 'manifest.json')));
        const mainDataSourceUri = (0, app_info_1.getMainServiceDataSource)(manifest)?.uri ?? '';
        const oDataSources = (0, app_info_1.getODataSources)(manifest);
        const choices = [];
        for (const dsName in oDataSources) {
            choices.push({
                title: `${dsName}: ${oDataSources[dsName].uri}`,
                value: oDataSources[dsName].uri,
                description: oDataSources[dsName].settings?.odataVersion ?? undefined
            });
        }
        if (choices.length > 0) {
            questionPath.type = 'select';
            questionPath.choices = choices;
            questionPath.initial = choices.findIndex((c) => c.value === mainDataSourceUri);
        }
    }
    questionPath.type ||= 'text';
    prompts.push(questionPath);
    if (params?.askForOverwrite) {
        const questionOverwrite = {
            type: 'confirm',
            name: 'overwrite',
            message: (0, __1.t)('questions.overwrite')
        };
        prompts.push(questionOverwrite);
    }
    return prompts;
}
//# sourceMappingURL=index.js.map