"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initI18n = initI18n;
exports.t = t;
const i18next_1 = __importDefault(require("i18next"));
const adp_tooling_i18n_json_1 = __importDefault(require("./translations/adp-tooling.i18n.json"));
const adpI18nNamespace = 'adp-tooling';
/**
 * Initialize i18next with the translations for this module.
 *
 * @returns {Promise<void>} A promise that resolves when the i18n initialization is completed.
 */
async function initI18n() {
    await i18next_1.default.init({
        resources: {
            en: {
                [adpI18nNamespace]: adp_tooling_i18n_json_1.default
            }
        },
        lng: 'en',
        fallbackLng: 'en',
        defaultNS: adpI18nNamespace,
        ns: [adpI18nNamespace]
    });
}
/**
 * Helper function facading the call to i18next. Unless a namespace option is provided the local namespace will be used.
 *
 * @param {string} key - The i18n key.
 * @param {TOptions} options - Additional options.
 * @returns {string} Localized string stored for the given key.
 */
function t(key, options) {
    if (!options?.ns) {
        options = Object.assign(options ?? {}, { ns: adpI18nNamespace });
    }
    return i18next_1.default.t(key, options);
}
initI18n().catch(() => {
    // Needed for lint
});
//# sourceMappingURL=i18n.js.map