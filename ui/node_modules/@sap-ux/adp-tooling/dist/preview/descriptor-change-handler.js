"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customFragmentConfig = void 0;
exports.hasTemplate = hasTemplate;
exports.addCustomSectionFragment = addCustomSectionFragment;
const path_1 = require("path");
const utils_1 = require("./utils");
const crypto_1 = require("crypto");
const ejs_1 = require("ejs");
exports.customFragmentConfig = {
    path: 'v4/custom-section.xml',
    getData: () => {
        const uuid = (0, crypto_1.randomBytes)(4).toString('hex');
        return {
            ids: {
                hBox: `hbox-${uuid}`
            }
        };
    }
};
/**
 * Checks if the given object has a 'template' property of type string.
 *
 * @param obj - The object to check.
 * @returns True if the object has a 'template' property of type string, false otherwise.
 */
function hasTemplate(obj) {
    return typeof obj === 'object' && obj !== null && 'template' in obj && typeof obj.template === 'string';
}
/**
 * Adds a custom XML fragment file based on the provided AppDescriptorV4Change and template configuration.
 *
 * @param basePath - The base path where the fragment should be created.
 * @param change - The AppDescriptorV4Change object containing change details.
 * @param fs - The mem-fs-editor instance for file operations.
 * @param logger - The logger instance for logging information and errors.
 */
function addCustomSectionFragment(basePath, change, fs, logger) {
    const propertyValue = change.content.entityPropertyChange.propertyValue;
    const isCustomSectionPropertyPath = change.content.entityPropertyChange.propertyPath.startsWith('content/body/sections/');
    if (isCustomSectionPropertyPath && hasTemplate(propertyValue)) {
        const { template } = propertyValue;
        const path = (0, utils_1.getFragmentPathFromTemplate)(template, change);
        try {
            if (!path) {
                throw new Error('Fragment Path could not be determined');
            }
            const fragmentPath = `${path}.fragment.xml`;
            const fullPath = (0, path_1.join)(basePath, fragmentPath);
            const fragmentTemplatePath = (0, path_1.join)(__dirname, '../../templates/rta', exports.customFragmentConfig.path);
            const text = fs.read(fragmentTemplatePath);
            const template = (0, ejs_1.render)(text, exports.customFragmentConfig.getData());
            fs.write(fullPath, template);
            logger.info(`XML Fragment "${fragmentPath}" was created`);
        }
        catch (error) {
            logger.error(`Failed to create XML Fragment: ${error}`);
        }
    }
}
//# sourceMappingURL=descriptor-change-handler.js.map