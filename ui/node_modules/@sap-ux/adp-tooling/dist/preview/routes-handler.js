"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const ejs_1 = require("ejs");
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const btp_utils_1 = require("@sap-ux/btp-utils");
const project_access_1 = require("@sap-ux/project-access");
const manifest_service_1 = require("../base/abap/manifest-service");
const helper_1 = require("../base/helper");
/**
 * @description Handles API Routes
 */
class RoutesHandler {
    project;
    util;
    provider;
    logger;
    /**
     * Constructor taking project as input.
     *
     * @param project Reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param provider AbapServiceProvider instance
     * @param logger Logger instance
     */
    constructor(project, util, provider, logger) {
        this.project = project;
        this.util = util;
        this.provider = provider;
        this.logger = logger;
    }
    /**
     * Reads files from workspace by given search pattern.
     *
     * @param pattern Search pattern
     * @returns Array of files
     */
    async readAllFilesByGlob(pattern) {
        return this.project.byGlob(pattern);
    }
    /**
     * Sends response with data to the client.
     *
     * @param res Response
     * @param data Data that is sent to the client
     * @param contentType Content type, defaults to json
     */
    sendFilesResponse(res, data, contentType = 'application/json') {
        res.status(200 /* HttpStatusCodes.OK */).contentType(contentType).send(data);
    }
    /**
     * Sanitizes and handles error messages.
     *
     * @param res Response
     * @param next Next function
     * @param e Error
     * @param e.message Error message
     */
    handleErrorMessage(res, next, e) {
        const sanitizedMsg = (0, sanitize_filename_1.default)(e.message);
        this.logger.error(sanitizedMsg);
        res.status(500 /* HttpStatusCodes.INTERNAL_SERVER_ERROR */).send({ message: sanitizedMsg });
        next(e);
    }
    /**
     * Handler for reading all fragment files from the workspace.
     *
     * @param _ Request
     * @param res Response
     * @param next Next Function
     */
    handleReadAllFragments = async (_, res, next) => {
        try {
            const files = await this.readAllFilesByGlob('/**/changes/fragments/*.fragment.xml');
            const fileNames = files.map((file) => ({
                fragmentName: file.getName()
            }));
            this.sendFilesResponse(res, {
                fragments: fileNames,
                message: `${fileNames.length} fragments found in the project workspace.`
            });
            this.logger.debug(`Read fragments ${JSON.stringify(fileNames)}`);
        }
        catch (e) {
            this.handleErrorMessage(res, next, e);
        }
    };
    /**
     * Handler for reading all controller extension files from the workspace.
     *
     * @param _ Request
     * @param res Response
     * @param next Next Function
     */
    handleReadAllControllers = async (_, res, next) => {
        try {
            const files = await this.readAllFilesByGlob('/**/changes/coding/*.{js,ts}');
            const fileNames = files.map((file) => {
                const fullName = file.getName();
                const name = fullName.replace(/\.(js|ts)$/, '');
                return { controllerName: name };
            });
            this.sendFilesResponse(res, {
                controllers: fileNames,
                message: `${fileNames.length} controllers found in the project workspace.`
            });
            this.logger.debug(`Read controllers ${JSON.stringify(fileNames)}`);
        }
        catch (e) {
            this.handleErrorMessage(res, next, e);
        }
    };
    /**
     * Handler for retrieving existing controller extension data from the workspace.
     *
     * @param req Request
     * @param res Response
     * @param next Next Function
     */
    handleGetControllerExtensionData = async (req, res, next) => {
        try {
            const query = req.query;
            const controllerName = query.name;
            const codeExtFiles = await this.readAllFilesByGlob('/**/changes/*_codeExt.change');
            let controllerPathFromRoot = '';
            let controllerExists = false;
            let controllerPath = '';
            let changeFilePath = '';
            const project = this.util.getProject();
            const sourcePath = project.getSourcePath();
            const rootPath = this.util.getProject().getRootPath();
            const projectName = project.getName();
            const isTsSupported = (0, helper_1.isTypescriptSupported)(rootPath);
            const getPath = (projectPath, fileName, folder = project_access_1.DirName.Coding) => path.join(projectPath, project_access_1.DirName.Changes, folder, fileName).split(path.sep).join(path.posix.sep);
            for (const file of codeExtFiles) {
                const fileStr = await file.getString();
                const change = JSON.parse(fileStr);
                if (change.selector.controllerName === controllerName) {
                    const baseFileName = change.content.codeRef.replace('coding/', '');
                    const fileName = isTsSupported ? baseFileName.replace('.js', '.ts') : baseFileName;
                    controllerPath = getPath(sourcePath, fileName);
                    controllerPathFromRoot = getPath(projectName, fileName);
                    changeFilePath = getPath(projectName, file.getName(), '');
                    controllerExists = true;
                    break;
                }
            }
            if (controllerExists && !fs.existsSync(controllerPath)) {
                const errorMsg = `Please delete the change file at "${changeFilePath}" and retry creating the controller extension.`;
                this.logger.debug(errorMsg);
                res.status(404 /* HttpStatusCodes.NOT_FOUND */).send({ message: errorMsg });
                return;
            }
            const isRunningInBAS = (0, btp_utils_1.isAppStudio)();
            this.sendFilesResponse(res, {
                controllerExists,
                controllerPath: os.platform() === 'win32' ? `/${controllerPath}` : controllerPath,
                controllerPathFromRoot,
                isRunningInBAS,
                isTsSupported
            });
            this.logger.debug(controllerExists
                ? `Controller exists at '${controllerPath}'`
                : `Controller with controllerName '${controllerName}' does not exist`);
        }
        catch (e) {
            this.handleErrorMessage(res, next, e);
        }
    };
    /**
     * Handler for writing a controller extension file to the workspace.
     *
     * @param req Request
     * @param res Response
     * @param next Next Function
     */
    handleWriteControllerExt = async (req, res, next) => {
        try {
            const data = req.body;
            const name = (0, sanitize_filename_1.default)(data.controllerName);
            const sourcePath = this.util.getProject().getSourcePath();
            const rootPath = this.util.getProject().getRootPath();
            if (!name) {
                res.status(400 /* HttpStatusCodes.BAD_REQUEST */).send('Controller extension name was not provided!');
                this.logger.debug('Bad request. Controller extension name was not provided!');
                return;
            }
            const isTsSupported = (0, helper_1.isTypescriptSupported)(rootPath);
            const fullPath = path.join(sourcePath, project_access_1.DirName.Changes, project_access_1.DirName.Coding);
            const filePath = path.join(fullPath, `${name}.${isTsSupported ? 'ts' : 'js'}`);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: true });
            }
            if (fs.existsSync(filePath)) {
                res.status(409 /* HttpStatusCodes.CONFLICT */).send(`Controller extension with name "${name}" already exists`);
                this.logger.debug(`Controller extension with name "${name}" already exists`);
                return;
            }
            await generateControllerFile(rootPath, filePath, name);
            const message = 'Controller extension created!';
            res.status(201 /* HttpStatusCodes.CREATED */).send(message);
            this.logger.debug(`Controller extension with name "${name}" was created`);
        }
        catch (e) {
            const sanitizedMsg = (0, sanitize_filename_1.default)(e.message);
            this.logger.error(sanitizedMsg);
            res.status(500 /* HttpStatusCodes.INTERNAL_SERVER_ERROR */).send(sanitizedMsg);
            next(e);
        }
    };
    /**
     * Handler for mapping annotation files with datasoruce.
     *
     * @param _req Request
     * @param res Response
     * @param next Next Function
     */
    handleGetAllAnnotationFilesMappedByDataSource = async (_req, res, next) => {
        try {
            const isRunningInBAS = (0, btp_utils_1.isAppStudio)();
            const manifestService = await this.getManifestService();
            const dataSources = manifestService.getManifestDataSources();
            const apiResponse = {
                isRunningInBAS,
                annotationDataSourceMap: {}
            };
            for (const dataSourceId in dataSources) {
                if (dataSources[dataSourceId].type === 'OData') {
                    const metadataReadErrorMsg = await this.getMetaDataReadErrorMsg(manifestService, dataSourceId);
                    apiResponse.annotationDataSourceMap[dataSourceId] = {
                        annotationDetails: {
                            annotationExistsInWS: false
                        },
                        serviceUrl: dataSources[dataSourceId].uri,
                        metadataReadErrorMsg
                    };
                }
                this.fillAnnotationDataSourceMap(dataSources, dataSourceId, apiResponse.annotationDataSourceMap);
            }
            this.sendFilesResponse(res, apiResponse);
        }
        catch (e) {
            this.handleErrorMessage(res, next, e);
        }
    };
    /**
     *
     * @param manifestService
     * @param dataSrouceID
     * @returns error message with reason
     */
    async getMetaDataReadErrorMsg(manifestService, dataSrouceID) {
        let errorMessage;
        try {
            await manifestService.getDataSourceMetadata(dataSrouceID);
        }
        catch (error) {
            errorMessage = `Metadata: ${error.message}`;
        }
        return errorMessage;
    }
    /**
     * Add local annotation details to api response.
     *
     * @param dataSources DataSources
     * @param dataSourceId string
     * @param apiResponse AnnotationDataSourceMap
     */
    fillAnnotationDataSourceMap(dataSources, dataSourceId, apiResponse) {
        const project = this.util.getProject();
        const getPath = (projectPath, relativePath) => path.join(projectPath, relativePath).split(path.sep).join(path.posix.sep);
        const annotations = [...(dataSources[dataSourceId].settings?.annotations ?? [])].reverse();
        for (const annotation of annotations) {
            const annotationSetting = dataSources[annotation];
            if (annotationSetting.type === 'ODataAnnotation') {
                const ui5NamespaceUri = `ui5://${project.getNamespace()}`;
                if (annotationSetting.uri.startsWith(ui5NamespaceUri)) {
                    const localAnnotationUri = annotationSetting.uri.replace(ui5NamespaceUri, '');
                    const annotationPath = getPath(project.getSourcePath(), localAnnotationUri);
                    const annotationPathFromRoot = getPath(project.getName(), localAnnotationUri);
                    const annotationExists = fs.existsSync(annotationPath);
                    apiResponse[dataSourceId].annotationDetails = {
                        fileName: path.parse(localAnnotationUri).base,
                        annotationPath: os.platform() === 'win32' ? `/${annotationPath}` : annotationPath,
                        annotationPathFromRoot,
                        annotationExistsInWS: annotationExists
                    };
                }
                if (apiResponse[dataSourceId].annotationDetails.annotationExistsInWS) {
                    break;
                }
            }
        }
    }
    /**
     * Returns manifest service.
     *
     * @returns Promise<ManifestService>
     */
    async getManifestService() {
        const project = this.util.getProject();
        const basePath = project.getRootPath();
        const variant = await (0, helper_1.getVariant)(basePath);
        return await manifest_service_1.ManifestService.initMergedManifest(this.provider, basePath, variant, this.logger);
    }
}
exports.default = RoutesHandler;
/**
 * Generates a controller file for the Adaptation Project based on the project's TypeScript support.
 *
 * This function creates a controller file in the specified `filePath` by rendering a template.
 * It determines whether to use a TypeScript or JavaScript template based on the TypeScript support of the project.
 *
 * @param {string} rootPath - The root directory of the project.
 * @param {string} filePath - The destination path where the generated controller file should be saved.
 * @param {string} name - The name of the controller extension (used in TypeScript templates).
 * @throws {Error} Throws an error if rendering the template fails.
 */
async function generateControllerFile(rootPath, filePath, name) {
    const id = (await (0, helper_1.getVariant)(rootPath))?.id;
    const isTsSupported = (0, helper_1.isTypescriptSupported)(rootPath);
    const tmplFileName = isTsSupported ? "ts-controller.ejs" /* TemplateFileName.TSController */ : "controller.ejs" /* TemplateFileName.Controller */;
    const tmplPath = path.join(__dirname, '../../templates/rta', tmplFileName);
    const extensionPath = `${id}.${name}`;
    const templateData = isTsSupported ? { name, ns: id } : { extensionPath };
    (0, ejs_1.renderFile)(tmplPath, templateData, {}, (err, str) => {
        if (err) {
            throw new Error(`Error rendering ${isTsSupported ? 'TypeScript' : 'JavaScript'} template: ${err.message}`);
        }
        fs.writeFileSync(filePath, str, { encoding: 'utf8' });
    });
}
//# sourceMappingURL=routes-handler.js.map