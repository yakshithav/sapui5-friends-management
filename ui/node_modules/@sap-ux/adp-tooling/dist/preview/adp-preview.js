"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdpPreview = void 0;
const adm_zip_1 = __importDefault(require("adm-zip"));
const system_access_1 = require("@sap-ux/system-access");
const routes_handler_1 = __importDefault(require("./routes-handler"));
const change_handler_1 = require("./change-handler");
const descriptor_change_handler_1 = require("./descriptor-change-handler");
/**
 * Instance of an adaptation project handling requests and data transformation.
 */
class AdpPreview {
    config;
    project;
    util;
    logger;
    /**
     * Instance of the ABAP provider
     */
    provider;
    /**
     * Merged descriptor variant with reference app manifest
     */
    mergedDescriptor;
    /**
     * Routes handler class to handle API requests
     */
    routesHandler;
    lrep;
    descriptorVariantId;
    isCloud;
    /**
     * @returns merged manifest.
     */
    get descriptor() {
        if (this.mergedDescriptor) {
            return this.mergedDescriptor;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * @returns a list of resources required to the adaptation project as well as the original app.
     */
    get resources() {
        if (this.mergedDescriptor) {
            const resources = {
                [this.mergedDescriptor.name]: this.mergedDescriptor.url
            };
            this.mergedDescriptor.asyncHints.libs?.forEach((lib) => {
                if (lib.url?.url) {
                    resources[lib.name] = lib.url.url;
                }
            });
            this.mergedDescriptor.asyncHints.components?.forEach((comp) => {
                if (comp.url?.url) {
                    resources[comp.name] = comp.url.url;
                }
            });
            return resources;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * @returns {boolean} true if the project is an ABAP cloud project, false otherwise.
     */
    get isCloudProject() {
        if (this.isCloud !== undefined) {
            return this.isCloud;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * Constructor taking the config and a logger as input.
     *
     * @param config adp config
     * @param project reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, util, logger) {
        this.config = config;
        this.project = project;
        this.util = util;
        this.logger = logger;
    }
    /**
     * Fetch all required configurations from the backend and initialize all configurations.
     *
     * @param descriptorVariant descriptor variant from the project
     * @returns the UI5 flex layer for which editing is enabled
     */
    async init(descriptorVariant) {
        this.descriptorVariantId = descriptorVariant.id;
        this.provider = await (0, system_access_1.createAbapServiceProvider)(this.config.target, { ignoreCertErrors: this.config.ignoreCertErrors }, true, this.logger);
        this.routesHandler = new routes_handler_1.default(this.project, this.util, this.provider, this.logger);
        this.lrep = this.provider.getLayeredRepository();
        // fetch a merged descriptor from the backend
        await this.lrep.getCsrfToken();
        // check if the project is an ABAP cloud project
        this.isCloud = await this.provider.isAbapCloud();
        await this.sync();
        return descriptorVariant.layer;
    }
    /**
     * Synchronize local changes with the backend.
     * The descriptor is refreshed only if the global flag is set to true.
     */
    async sync() {
        if (!global.__SAP_UX_MANIFEST_SYNC_REQUIRED__ && this.mergedDescriptor) {
            return;
        }
        if (!this.lrep || !this.descriptorVariantId) {
            throw new Error('Not initialized');
        }
        const zip = new adm_zip_1.default();
        const files = await this.project.byGlob('**/*.*');
        for (const file of files) {
            zip.addFile(file.getPath().substring(1), await file.getBuffer());
        }
        const buffer = zip.toBuffer();
        this.mergedDescriptor = (await this.lrep.mergeAppDescriptorVariant(buffer, '//'))[this.descriptorVariantId];
        global.__SAP_UX_MANIFEST_SYNC_REQUIRED__ = false;
    }
    /**
     * Proxy for the merged application manifest.json and blocking of preload files.
     *
     * @param req incoming request
     * @param res outgoing response object
     * @param next next middleware that is to be called if the request cannot be handled
     */
    async proxy(req, res, next) {
        if (req.path === '/manifest.json') {
            await this.sync();
            res.status(200);
            res.send(JSON.stringify(this.descriptor.manifest, undefined, 2));
        }
        else if (req.path === '/Component-preload.js') {
            res.status(404).send();
        }
        else {
            // check if the requested file exists in the file system (replace .js with .* for typescript)
            const files = await this.project.byGlob(req.path.replace('.js', '.*'));
            if (files.length === 1) {
                // redirect to the exposed path so that other middlewares can handle it
                res.redirect(302, req.path);
            }
            else {
                next();
            }
        }
    }
    /**
     * Add additional APIs to the router that are required for adaptation projects only.
     *
     * This method sets up various GET and POST routes for handling fragments, controllers,
     * and code extensions. For POST routes to work correctly, ensure that the router is
     * using the **express.json()** middleware. This middleware is responsible for parsing
     * incoming requests with JSON payloads and is based on body-parser.
     *
     * Usage:
     * ```ts
     * import express from "express";
     *
     * const app = express();
     * const router = express.Router();
     *
     * // Ensure express.json() middleware is applied to the router or app
     * router.use(express.json());
     *
     * const adp = new AdpPreview();
     * adp.addApis(router);
     *
     * app.use('/', router);
     * ```
     *
     * @param {Router} router - The router that is to be enhanced with the API.
     * @returns {void} A promise that resolves when the APIs have been added.
     */
    addApis(router) {
        router.get("/adp/api/fragment" /* ApiRoutes.FRAGMENT */, this.routesHandler.handleReadAllFragments);
        router.get("/adp/api/controller" /* ApiRoutes.CONTROLLER */, this.routesHandler.handleReadAllControllers);
        router.post("/adp/api/controller" /* ApiRoutes.CONTROLLER */, this.routesHandler.handleWriteControllerExt);
        router.get("/adp/api/code_ext" /* ApiRoutes.CODE_EXT */, this.routesHandler.handleGetControllerExtensionData);
        router.get("/adp/api/annotation" /* ApiRoutes.ANNOTATION */, this.routesHandler.handleGetAllAnnotationFilesMappedByDataSource);
    }
    /**
     * Handles different types of change requests to project files.
     *
     * @param {string} type - The type of change request.
     * @param {CommonChangeProperties} change - An object containing properties common to all change types.
     * @param {Editor} fs - An instance of an editor interface for file system operations.
     * @param {Logger} logger - An instance of a logging interface for message logging.
     * @param {CommonAdditionalChangeInfoProperties} [additionalChangeInfo] - An optional object containing extended change properties.
     * @returns {Promise<void>} A promise that resolves when the change request has been processed.
     */
    async onChangeRequest(type, change, fs, logger, additionalChangeInfo) {
        switch (type) {
            case 'read':
                if (change_handler_1.moduleNameContentMap[change.changeType] && !change.moduleName) {
                    (0, change_handler_1.tryFixChange)(change, logger);
                }
                break;
            case 'write':
                if ((0, change_handler_1.isAddXMLChange)(change)) {
                    (0, change_handler_1.addXmlFragment)(this.util.getProject().getSourcePath(), change, fs, logger, additionalChangeInfo);
                }
                if ((0, change_handler_1.isCodeExtChange)(change)) {
                    await (0, change_handler_1.addControllerExtension)(this.util.getProject().getRootPath(), this.util.getProject().getSourcePath(), change, fs, logger);
                }
                if ((0, change_handler_1.isAddAnnotationChange)(change)) {
                    await (0, change_handler_1.addAnnotationFile)(this.util.getProject().getSourcePath(), this.util.getProject().getRootPath(), change, fs, logger, this.provider);
                }
                if ((0, change_handler_1.isV4DescriptorChange)(change)) {
                    (0, descriptor_change_handler_1.addCustomSectionFragment)(this.util.getProject().getSourcePath(), change, fs, logger);
                }
                break;
            default:
                // no need to handle delete changes
                break;
        }
    }
}
exports.AdpPreview = AdpPreview;
//# sourceMappingURL=adp-preview.js.map