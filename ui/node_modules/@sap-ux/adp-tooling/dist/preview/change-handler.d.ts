import type { Editor } from 'mem-fs-editor';
import type { AddXMLChange, CommonChangeProperties, CodeExtChange, AnnotationFileChange, CommonAdditionalChangeInfoProperties, AppDescriptorV4Change } from '../types';
import type { Logger } from '@sap-ux/logger';
import type { AbapServiceProvider } from '@sap-ux/axios-extension';
interface FragmentTemplateConfig<T = {
    [key: string]: any;
}> {
    /**
     * Relative path to ../../templates/rta, includes template file name
     */
    path: string;
    getData: (change: AddXMLChange) => T;
}
export declare const fragmentTemplateDefinitions: Record<string, FragmentTemplateConfig>;
/**
 * A mapping object that defines how to extract change content data from changes based on their type.
 */
export declare const moduleNameContentMap: {
    [key: string]: (change: CommonChangeProperties) => string;
};
/**
 * Sets the moduleName property of the provided change to also support old changes with newer UI5 versions.
 *
 * @param change change to be fixed
 * @param logger logger instance
 */
/**
 * Attempts to fix a change object by setting its moduleName based on its reference and changeType
 * to also support old changes with newer UI5 versions.
 *
 * @param {CommonChangeProperties} change - The change object to be fixed.
 * @param {Logger} logger - An instance for logging warnings, errors, or informational messages.
 */
export declare function tryFixChange(change: CommonChangeProperties, logger: Logger): void;
/**
 * Determines whether a given change is of type `AddXMLChange`.
 *
 * @param {CommonChangeProperties} change - The change object to check.
 * @returns {boolean} `true` if the `changeType` is either 'addXML' or 'addXMLAtExtensionPoint',
 *          indicating the change is of type `AddXMLChange`.
 */
export declare function isAddXMLChange(change: CommonChangeProperties): change is AddXMLChange;
/**
 * Determines whether a given change is of type `codeExt`.
 *
 * @param {CommonChangeProperties} change - The change object to check.
 * @returns {boolean} `true` if the `changeType` is `codeExt`, indicating the change is of type `codeExtChange`.
 */
export declare function isCodeExtChange(change: CommonChangeProperties): change is CodeExtChange;
/**
 * Determines whether a given change is of type `AnnotationFileChange`.
 *
 * @param {CommonChangeProperties} change - The change object to check.
 * @returns {boolean} `true` if the `changeType` is either 'appdescr_app_addAnnotationsToOData',
 *          indicating the change is of type `AnnotationFileChange`.
 */
export declare function isAddAnnotationChange(change: CommonChangeProperties): change is AnnotationFileChange;
/**
 * Determines whether a given change is of type `V4 Descriptor Change`.
 *
 * @param {CommonChangeProperties} change - The change object to check.
 * @returns {boolean} `true` if the `changeType` is either 'appdescr_fe_changePageConfiguration',
 *          indicating the change is of type `V4 Descriptor Change`.
 */
export declare function isV4DescriptorChange(change: CommonChangeProperties): change is AppDescriptorV4Change;
/**
 * Asynchronously adds an XML fragment to the project if it doesn't already exist.
 *
 * @param {string} basePath - The base path of the project.
 * @param {AddXMLChange} change - The change data, including the fragment path.
 * @param {Editor} fs - The mem-fs-editor instance.
 * @param {Logger} logger - The logging instance.
 * @param {CommonAdditionalChangeInfoProperties} additionalChangeInfo - Optional extended change properties.
 */
export declare function addXmlFragment(basePath: string, change: AddXMLChange, fs: Editor, logger: Logger, additionalChangeInfo?: CommonAdditionalChangeInfoProperties): void;
/**
 * Asynchronously adds an controller extension to the project if it doesn't already exist.
 *
 * @param {string} rootPath - The root path of the project.
 * @param {string} basePath - The base path of the project.
 * @param {CodeExtChange} change - The change data, including the fragment path.
 * @param {Editor} fs - The mem-fs-editor instance.
 * @param {Logger} logger - The logging instance.
 */
export declare function addControllerExtension(rootPath: string, basePath: string, change: CodeExtChange, fs: Editor, logger: Logger): Promise<void>;
/**
 * Asynchronously adds an XML fragment to the project if it doesn't already exist.
 *
 * @param {string} basePath - The base path of the project.
 * @param {string} projectRoot - The root path of the project.
 * @param {AnnotationFileChange} change - The change data, including the fragment path.
 * @param {Editor} fs - The mem-fs-editor instance.
 * @param {Logger} logger - The logging instance.
 *@param {AbapServiceProvider} provider - abap provider.
 */
export declare function addAnnotationFile(basePath: string, projectRoot: string, change: AnnotationFileChange, fs: Editor, logger: Logger, provider: AbapServiceProvider): Promise<void>;
export {};
//# sourceMappingURL=change-handler.d.ts.map