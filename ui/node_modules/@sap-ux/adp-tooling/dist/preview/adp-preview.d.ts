import type { ReaderCollection } from '@ui5/fs';
import type { MiddlewareUtils } from '@ui5/server';
import type { NextFunction, Request, Response, Router } from 'express';
import type { Logger, ToolsLogger } from '@sap-ux/logger';
import { type UI5FlexLayer } from '@sap-ux/project-access';
import type { MergedAppDescriptor } from '@sap-ux/axios-extension';
import type { AdpPreviewConfig, CommonChangeProperties, DescriptorVariant, OperationType, CommonAdditionalChangeInfoProperties } from '../types';
import type { Editor } from 'mem-fs-editor';
declare global {
    var __SAP_UX_MANIFEST_SYNC_REQUIRED__: boolean | undefined;
}
export declare const enum ApiRoutes {
    FRAGMENT = "/adp/api/fragment",
    CONTROLLER = "/adp/api/controller",
    CODE_EXT = "/adp/api/code_ext",
    ANNOTATION = "/adp/api/annotation"
}
/**
 * Instance of an adaptation project handling requests and data transformation.
 */
export declare class AdpPreview {
    private readonly config;
    private readonly project;
    private readonly util;
    private readonly logger;
    /**
     * Instance of the ABAP provider
     */
    private provider;
    /**
     * Merged descriptor variant with reference app manifest
     */
    private mergedDescriptor;
    /**
     * Routes handler class to handle API requests
     */
    private routesHandler;
    private lrep;
    private descriptorVariantId;
    private isCloud;
    /**
     * @returns merged manifest.
     */
    get descriptor(): MergedAppDescriptor;
    /**
     * @returns a list of resources required to the adaptation project as well as the original app.
     */
    get resources(): {
        [name: string]: string;
    };
    /**
     * @returns {boolean} true if the project is an ABAP cloud project, false otherwise.
     */
    get isCloudProject(): boolean;
    /**
     * Constructor taking the config and a logger as input.
     *
     * @param config adp config
     * @param project reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config: AdpPreviewConfig, project: ReaderCollection, util: MiddlewareUtils, logger: ToolsLogger);
    /**
     * Fetch all required configurations from the backend and initialize all configurations.
     *
     * @param descriptorVariant descriptor variant from the project
     * @returns the UI5 flex layer for which editing is enabled
     */
    init(descriptorVariant: DescriptorVariant): Promise<UI5FlexLayer>;
    /**
     * Synchronize local changes with the backend.
     * The descriptor is refreshed only if the global flag is set to true.
     */
    sync(): Promise<void>;
    /**
     * Proxy for the merged application manifest.json and blocking of preload files.
     *
     * @param req incoming request
     * @param res outgoing response object
     * @param next next middleware that is to be called if the request cannot be handled
     */
    proxy(req: Request, res: Response, next: NextFunction): Promise<void>;
    /**
     * Add additional APIs to the router that are required for adaptation projects only.
     *
     * This method sets up various GET and POST routes for handling fragments, controllers,
     * and code extensions. For POST routes to work correctly, ensure that the router is
     * using the **express.json()** middleware. This middleware is responsible for parsing
     * incoming requests with JSON payloads and is based on body-parser.
     *
     * Usage:
     * ```ts
     * import express from "express";
     *
     * const app = express();
     * const router = express.Router();
     *
     * // Ensure express.json() middleware is applied to the router or app
     * router.use(express.json());
     *
     * const adp = new AdpPreview();
     * adp.addApis(router);
     *
     * app.use('/', router);
     * ```
     *
     * @param {Router} router - The router that is to be enhanced with the API.
     * @returns {void} A promise that resolves when the APIs have been added.
     */
    addApis(router: Router): void;
    /**
     * Handles different types of change requests to project files.
     *
     * @param {string} type - The type of change request.
     * @param {CommonChangeProperties} change - An object containing properties common to all change types.
     * @param {Editor} fs - An instance of an editor interface for file system operations.
     * @param {Logger} logger - An instance of a logging interface for message logging.
     * @param {CommonAdditionalChangeInfoProperties} [additionalChangeInfo] - An optional object containing extended change properties.
     * @returns {Promise<void>} A promise that resolves when the change request has been processed.
     */
    onChangeRequest(type: OperationType, change: CommonChangeProperties, fs: Editor, logger: Logger, additionalChangeInfo?: CommonAdditionalChangeInfoProperties): Promise<void>;
}
//# sourceMappingURL=adp-preview.d.ts.map