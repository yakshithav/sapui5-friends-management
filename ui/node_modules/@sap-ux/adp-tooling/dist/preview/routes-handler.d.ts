import type { ToolsLogger } from '@sap-ux/logger';
import type { MiddlewareUtils } from '@ui5/server';
import type { ReaderCollection } from '@ui5/fs';
import type { NextFunction, Request, Response } from 'express';
import type { AbapServiceProvider } from '@sap-ux/axios-extension';
interface AnnotationFileDetails {
    fileName?: string;
    annotationPath?: string;
    annotationPathFromRoot?: string;
    annotationExistsInWS: boolean;
}
interface AnnotationDataSourceMap {
    [key: string]: {
        serviceUrl: string;
        annotationDetails: AnnotationFileDetails;
        metadataReadErrorMsg: string | undefined;
    };
}
export interface AnnotationDataSourceResponse {
    isRunningInBAS: boolean;
    annotationDataSourceMap: AnnotationDataSourceMap;
}
/**
 * @description Handles API Routes
 */
export default class RoutesHandler {
    private readonly project;
    private readonly util;
    private readonly provider;
    private readonly logger;
    /**
     * Constructor taking project as input.
     *
     * @param project Reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param provider AbapServiceProvider instance
     * @param logger Logger instance
     */
    constructor(project: ReaderCollection, util: MiddlewareUtils, provider: AbapServiceProvider, logger: ToolsLogger);
    /**
     * Reads files from workspace by given search pattern.
     *
     * @param pattern Search pattern
     * @returns Array of files
     */
    private readAllFilesByGlob;
    /**
     * Sends response with data to the client.
     *
     * @param res Response
     * @param data Data that is sent to the client
     * @param contentType Content type, defaults to json
     */
    private sendFilesResponse;
    /**
     * Sanitizes and handles error messages.
     *
     * @param res Response
     * @param next Next function
     * @param e Error
     * @param e.message Error message
     */
    private handleErrorMessage;
    /**
     * Handler for reading all fragment files from the workspace.
     *
     * @param _ Request
     * @param res Response
     * @param next Next Function
     */
    handleReadAllFragments: (_: Request, res: Response, next: NextFunction) => Promise<void>;
    /**
     * Handler for reading all controller extension files from the workspace.
     *
     * @param _ Request
     * @param res Response
     * @param next Next Function
     */
    handleReadAllControllers: (_: Request, res: Response, next: NextFunction) => Promise<void>;
    /**
     * Handler for retrieving existing controller extension data from the workspace.
     *
     * @param req Request
     * @param res Response
     * @param next Next Function
     */
    handleGetControllerExtensionData: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    /**
     * Handler for writing a controller extension file to the workspace.
     *
     * @param req Request
     * @param res Response
     * @param next Next Function
     */
    handleWriteControllerExt: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    /**
     * Handler for mapping annotation files with datasoruce.
     *
     * @param _req Request
     * @param res Response
     * @param next Next Function
     */
    handleGetAllAnnotationFilesMappedByDataSource: (_req: Request, res: Response, next: NextFunction) => Promise<void>;
    /**
     *
     * @param manifestService
     * @param dataSrouceID
     * @returns error message with reason
     */
    private getMetaDataReadErrorMsg;
    /**
     * Add local annotation details to api response.
     *
     * @param dataSources DataSources
     * @param dataSourceId string
     * @param apiResponse AnnotationDataSourceMap
     */
    private fillAnnotationDataSourceMap;
    /**
     * Returns manifest service.
     *
     * @returns Promise<ManifestService>
     */
    private getManifestService;
}
export {};
//# sourceMappingURL=routes-handler.d.ts.map