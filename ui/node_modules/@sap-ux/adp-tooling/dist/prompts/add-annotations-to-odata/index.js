"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrompts = getPrompts;
const i18n_1 = require("../../i18n");
const project_access_1 = require("@sap-ux/project-access");
const fs_1 = require("fs");
const project_input_validator_1 = require("@sap-ux/project-input-validator");
const path_1 = require("path");
/**
 * Gets the prompts for adding annotations to OData service.
 *
 * @param {string} basePath - The base path of the project.
 * @param {Record<string, ManifestNamespace.DataSource>} dataSources - Data sources from the manifest.
 * @returns {YUIQuestion<AddAnnotationsAnswers>[]} The questions/prompts.
 */
function getPrompts(basePath, dataSources) {
    const dataSourceIds = Object.keys((0, project_access_1.filterDataSourcesByType)(dataSources, 'OData'));
    const annotationFileSelectOptions = [
        { name: (0, i18n_1.t)('choices.annotationFile.selectFromWorkspace'), value: 1 /* AnnotationFileSelectType.ExistingFile */ },
        { name: (0, i18n_1.t)('choices.annotationFile.createTemplateFile'), value: 2 /* AnnotationFileSelectType.NewEmptyFile */ }
    ];
    return [
        {
            type: 'list',
            name: 'id',
            message: (0, i18n_1.t)('prompts.oDataSourceLabel'),
            choices: dataSourceIds,
            default: dataSourceIds[0],
            store: false,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.addAnnotationOdataSourceTooltip')
            }
        },
        {
            type: 'list',
            name: 'fileSelectOption',
            message: (0, i18n_1.t)('prompts.fileSelectOptionLabel'),
            choices: annotationFileSelectOptions,
            default: 0,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.fileSelectOptionTooltip')
            },
            when: (answers) => answers.id !== ''
        },
        {
            type: 'input',
            name: 'filePath',
            message: (0, i18n_1.t)('prompts.filePathLabel'),
            guiType: 'file-browser',
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.filePathTooltip')
            },
            default: '',
            when: (answers) => answers.id !== '' && answers.fileSelectOption === 1 /* AnnotationFileSelectType.ExistingFile */,
            validate: async (value) => {
                const validationResult = (0, project_input_validator_1.validateEmptyString)(value);
                if (typeof validationResult === 'string') {
                    return validationResult;
                }
                const filePath = (0, path_1.isAbsolute)(value) ? value : (0, path_1.join)(basePath, value);
                if (!(0, fs_1.existsSync)(filePath)) {
                    return (0, i18n_1.t)('validators.fileDoesNotExist');
                }
                if ((0, fs_1.existsSync)((0, path_1.join)(await (0, project_access_1.getWebappPath)(basePath), project_access_1.DirName.Changes, project_access_1.DirName.Annotations, (0, path_1.basename)(filePath)))) {
                    return (0, i18n_1.t)('validators.annotationFileAlreadyExists');
                }
                return true;
            }
        }
    ];
}
//# sourceMappingURL=index.js.map