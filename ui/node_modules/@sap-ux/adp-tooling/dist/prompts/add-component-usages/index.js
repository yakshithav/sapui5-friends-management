"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrompts = getPrompts;
const change_utils_1 = require("../../base/change-utils");
const i18n_1 = require("../../i18n");
const project_input_validator_1 = require("@sap-ux/project-input-validator");
/**
 * Exucute generic validation for input.
 *
 * @param value The value to validate.
 * @returns {string | boolean} An error message if the value is an empty string, or true if it is not.
 */
function validatePromptInput(value) {
    const validators = [project_input_validator_1.validateEmptyString, project_input_validator_1.validateEmptySpaces, project_input_validator_1.validateSpecialChars];
    for (const validator of validators) {
        const validationResult = validator(value);
        if (typeof validationResult === 'string') {
            return validationResult;
        }
    }
    return true;
}
/**
 * Validates the input for the component usage ID.
 *
 * @param value The value to validate.
 * @param changeFiles The change files to check for duplication.
 * @param isCustomerBase Flag to check if the project is customer scenario.
 * @returns {string | boolean} An error message if the value is invalid, or true if it is not.
 */
function validatePromptId(value, changeFiles, isCustomerBase) {
    const validationResult = validatePromptInput(value);
    if (typeof validationResult === 'string') {
        return validationResult;
    }
    if (isCustomerBase) {
        if (!(0, project_input_validator_1.hasCustomerPrefix)(value)) {
            return (0, i18n_1.t)('validators.errorInputInvalidValuePrefix', {
                value: (0, i18n_1.t)('prompts.component.usageIdLabel'),
                prefix: "customer." /* NamespacePrefix.CUSTOMER */
            });
        }
        if (!value.replace('customer.', '').length) {
            return (0, i18n_1.t)('validators.errorCustomerEmptyValue', {
                value: (0, i18n_1.t)('prompts.component.usageIdLabel'),
                prefix: "customer." /* NamespacePrefix.CUSTOMER */
            });
        }
    }
    if ((0, project_input_validator_1.hasContentDuplication)(value, 'componentUsages', changeFiles)) {
        return (0, i18n_1.t)('validators.errorDuplicateValueComponentId');
    }
    return true;
}
/**
 * Validates the input for the library reference.
 *
 * @param value The value to validate.
 * @param changeFiles The change files to check for duplication.
 * @returns {string | boolean} An error message if the value is invalid, or true if it is not.
 */
function validatePromptLibrary(value, changeFiles) {
    const validationResult = validatePromptInput(value);
    if (typeof validationResult === 'string') {
        return validationResult;
    }
    if ((0, project_input_validator_1.hasContentDuplication)(value, 'libraries', changeFiles)) {
        return (0, i18n_1.t)('validators.errorDuplicateValueLibrary');
    }
    return true;
}
/**
 * Validates a JSON string.
 *
 * @param value The JSON string to validate.
 * @returns {boolean | string} True if the JSON is valid, or an error message if validation fails.
 */
function validatePromptJSON(value) {
    const validationResult = (0, project_input_validator_1.validateEmptyString)(value);
    if (typeof validationResult === 'string') {
        return true;
    }
    return (0, project_input_validator_1.validateJSON)(value);
}
/**
 * Gets the prompts for adding a component usage.
 *
 * @param {string} basePath - The base path of the project.
 * @param {UI5FlexLayer} layer - The layer of the project.
 * @returns {YUIQuestion<AddComponentUsageAnswers>[]} The questions/prompts.
 */
function getPrompts(basePath, layer) {
    const componentUsageChangeFiles = (0, change_utils_1.getChangesByType)(basePath, "appdescr_ui5_addComponentUsages" /* ChangeType.ADD_COMPONENT_USAGES */, 'manifest');
    const libraryChangeFiles = (0, change_utils_1.getChangesByType)(basePath, "appdescr_ui5_addLibraries" /* ChangeType.ADD_LIBRARY_REFERENCE */, 'manifest');
    const isCustomerBase = layer === "CUSTOMER_BASE" /* FlexLayer.CUSTOMER_BASE */;
    const isLazyDropDownOptions = [
        { name: (0, i18n_1.t)('choices.true'), value: 'true' },
        { name: (0, i18n_1.t)('choices.false'), value: 'false' }
    ];
    return [
        {
            type: 'input',
            name: `usageId`,
            message: (0, i18n_1.t)('prompts.component.usageIdLabel'),
            validate: (value) => validatePromptId(value, componentUsageChangeFiles, isCustomerBase),
            default: isCustomerBase ? "customer." /* NamespacePrefix.CUSTOMER */ : "" /* NamespacePrefix.EMPTY */,
            store: false,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.component.usageIdTooltip')
            }
        },
        {
            type: 'input',
            name: 'name',
            message: (0, i18n_1.t)('prompts.component.nameLabel'),
            validate: validatePromptInput,
            store: false,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.component.nameTooltip')
            }
        },
        {
            type: 'list',
            name: 'isLazy',
            message: (0, i18n_1.t)('prompts.component.isLazyLabel'),
            choices: isLazyDropDownOptions,
            default: isLazyDropDownOptions[1].value,
            store: false,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.component.isLazyTooltip')
            }
        },
        {
            type: 'editor',
            name: `settings`,
            message: (0, i18n_1.t)('prompts.component.settingsLabel'),
            validate: validatePromptJSON,
            store: false,
            guiOptions: {
                hint: (0, i18n_1.t)('prompts.component.tooltip', { input: (0, i18n_1.t)('prompts.component.settingsLabel') })
            }
        },
        {
            type: 'editor',
            name: `data`,
            message: (0, i18n_1.t)('prompts.component.dataLabel'),
            validate: validatePromptJSON,
            store: false,
            guiOptions: {
                hint: (0, i18n_1.t)('prompts.component.tooltip', { input: (0, i18n_1.t)('prompts.component.dataLabel') })
            }
        },
        {
            type: 'confirm',
            name: 'shouldAddLibrary',
            message: (0, i18n_1.t)('prompts.component.shouldAddLibraryLabel'),
            default: false,
            guiOptions: {
                hint: (0, i18n_1.t)('prompts.component.shouldAddLibraryTooltip')
            }
        },
        {
            type: 'input',
            name: 'library',
            message: (0, i18n_1.t)('prompts.component.libraryLabel'),
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.component.libraryTooltip')
            },
            validate: (value) => validatePromptLibrary(value, libraryChangeFiles),
            store: false,
            when: (answers) => answers.shouldAddLibrary
        },
        {
            type: 'list',
            name: `libraryIsLazy`,
            message: (0, i18n_1.t)('prompts.component.libraryIsLazyLabel'),
            choices: isLazyDropDownOptions,
            default: isLazyDropDownOptions[1].value,
            store: false,
            guiOptions: {
                mandatory: true,
                hint: (0, i18n_1.t)('prompts.component.libraryIsLazyTooltip')
            },
            when: (answers) => answers.shouldAddLibrary
        }
    ];
}
//# sourceMappingURL=index.js.map