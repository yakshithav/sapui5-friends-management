"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = generate;
exports.migrate = migrate;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const manifest_1 = require("./manifest");
const options_1 = require("./options");
const i18n_1 = require("./i18n");
const project_utils_1 = require("./project-utils");
const source_1 = require("../source");
const baseTmplPath = (0, path_1.join)(__dirname, '../../templates');
/**
 * Set default values for optional properties.
 *
 * @param config configuration provided by the calling middleware
 * @returns enhanced configuration with default values
 */
function setDefaults(config) {
    const configWithDefaults = {
        app: { ...config.app },
        target: { ...config.target },
        ui5: { ...config.ui5 },
        deploy: config.deploy ? { ...config.deploy } : undefined,
        options: { ...config.options },
        flp: config.flp ? { ...config.flp } : undefined,
        customConfig: config.customConfig ? { ...config.customConfig } : undefined
    };
    configWithDefaults.app.title ??= `Adaptation of ${config.app.reference}`;
    configWithDefaults.app.layer ??= "CUSTOMER_BASE" /* FlexLayer.CUSTOMER_BASE */;
    configWithDefaults.package ??= config.package ? { ...config.package } : {};
    configWithDefaults.package.name ??= config.app.id.toLowerCase().replace(/\./g, '-');
    configWithDefaults.package.description ??= configWithDefaults.app.title;
    configWithDefaults.app.i18nModels ??= (0, i18n_1.getI18nModels)(configWithDefaults.app.manifest, configWithDefaults.app.layer, configWithDefaults.app.reference, configWithDefaults.app.title);
    configWithDefaults.app.i18nDescription ??= (0, i18n_1.getI18nDescription)(configWithDefaults.app.layer, configWithDefaults.app.title);
    configWithDefaults.app.appType ??= (0, source_1.getApplicationType)(configWithDefaults.app.manifest);
    configWithDefaults.app.content ??= (0, manifest_1.getManifestContent)(configWithDefaults);
    if (configWithDefaults.flp && !configWithDefaults.flp.inboundId) {
        configWithDefaults.flp.inboundId = `${configWithDefaults.app.id}.InboundID`;
    }
    if (configWithDefaults.customConfig?.adp.environment === 'C' && configWithDefaults.flp) {
        (0, options_1.enhanceManifestChangeContentWithFlpConfig)(configWithDefaults.flp, configWithDefaults.app.id, configWithDefaults.app.content);
    }
    return configWithDefaults;
}
/**
 * Writes the adp-project template to the mem-fs-editor instance.
 *
 * @param basePath - the base path
 * @param config - the writer configuration
 * @param fs - the memfs editor instance
 * @returns the updated memfs editor instance
 */
async function generate(basePath, config, fs) {
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    const fullConfig = setDefaults(config);
    (0, i18n_1.writeI18nModels)(basePath, fullConfig.app.i18nModels, fs);
    (0, project_utils_1.writeTemplateToFolder)(baseTmplPath, (0, path_1.join)(basePath), fullConfig, fs);
    await (0, project_utils_1.writeUI5DeployYaml)(basePath, fullConfig, fs);
    await (0, project_utils_1.writeUI5Yaml)(basePath, fullConfig, fs);
    return fs;
}
/**
 * Writes the adp-project template to the mem-fs-editor instance during migration.
 *
 * @param basePath - the base path
 * @param config - the writer configuration
 * @param fs - the memfs editor instance
 * @returns the updated memfs editor instance
 */
async function migrate(basePath, config, fs) {
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    const fullConfig = setDefaults(config);
    const tmplPath = (0, path_1.join)(baseTmplPath, 'project');
    // Copy the specified files to target project
    fs.copyTpl((0, path_1.join)(tmplPath, '**/ui5.yaml'), (0, path_1.join)(basePath), fullConfig, undefined, {
        globOptions: { dot: true }
    });
    fs.copyTpl((0, path_1.join)(tmplPath, '**/package.json'), (0, path_1.join)(basePath), fullConfig, undefined, {
        globOptions: { dot: true }
    });
    fs.copyTpl((0, path_1.join)(tmplPath, '**/gitignore.tmpl'), (0, path_1.join)(basePath), fullConfig, undefined, {
        globOptions: { dot: true },
        processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
    });
    // delete .che folder
    if (fs.exists((0, path_1.join)(basePath, '.che/project.json'))) {
        fs.delete((0, path_1.join)(basePath, '.che/*'));
    }
    // delete neo-app.json
    if (fs.exists((0, path_1.join)(basePath, 'neo-app.json'))) {
        fs.delete((0, path_1.join)(basePath, 'neo-app.json'));
    }
    await (0, project_utils_1.writeUI5Yaml)(basePath, fullConfig, fs);
    await (0, project_utils_1.writeUI5DeployYaml)(basePath, fullConfig, fs);
    return fs;
}
//# sourceMappingURL=index.js.map