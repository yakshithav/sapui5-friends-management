"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJSONInfo = getPackageJSONInfo;
exports.getTypes = getTypes;
exports.getCustomConfig = getCustomConfig;
exports.writeTemplateToFolder = writeTemplateToFolder;
exports.writeUI5Yaml = writeUI5Yaml;
exports.writeUI5DeployYaml = writeUI5DeployYaml;
const path_1 = require("path");
const fs_1 = require("fs");
const uuid_1 = require("uuid");
const options_1 = require("./options");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Retrieves the package name and version from the package.json file located two levels up the directory tree.
 *
 * @returns {Package} An object containing the `name` and `version` of the package.
 */
function getPackageJSONInfo() {
    const defaultPackage = {
        name: '@sap-ux/adp-tooling',
        version: 'NO_VERSION_FOUND'
    };
    try {
        return JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../package.json'), 'utf-8'));
    }
    catch (e) {
        return defaultPackage;
    }
}
/**
 * Determines the correct TypeScript definitions package and version based on a given UI5 version.
 *
 * If the version includes `"snapshot"`, it returns a predefined default types package and version.
 * Otherwise, it selects the appropriate package and computes the corresponding version using either
 * `getTypesVersion` or `getEsmTypesVersion`.
 *
 * @param {string} [ui5Version] - The version of UI5 (e.g., `"1.108.0"` or `"snapshot"`).
 * @returns {TypesConfig} - The package name and version string for the UI5 types.
 */
function getTypes(ui5Version) {
    if (ui5Version?.includes('snapshot')) {
        return {
            typesPackage: "@sapui5/types" /* UI5_DEFAULT.TYPES_PACKAGE_NAME */,
            typesVersion: `~${"1.136.0" /* UI5_DEFAULT.TYPES_VERSION_BEST */}`
        };
    }
    const typesPackage = (0, ui5_config_1.getTypesPackage)(ui5Version);
    const isTypesPackage = typesPackage === "@sapui5/types" /* UI5_DEFAULT.TYPES_PACKAGE_NAME */;
    const typesVersion = isTypesPackage ? (0, ui5_config_1.getTypesVersion)(ui5Version) : (0, ui5_config_1.getEsmTypesVersion)(ui5Version);
    return {
        typesPackage,
        typesVersion
    };
}
/**
 * Constructs a custom configuration object for the Adaptation Project (ADP).
 *
 * @param {OperationsType} environment - The operations type ('P' for on-premise or 'C' for cloud ready).
 * @param {object} pkg - The parsed contents of `package.json`.
 * @param {string} pkg.name - The name of the tool or package generating the config.
 * @param {string} pkg.version - The version of the tool generating the config.
 * @returns {CustomConfig} The generated ADP custom configuration object.
 */
function getCustomConfig(environment, { name: id, version }) {
    return {
        adp: {
            environment,
            support: {
                id: id ?? '',
                version: version ?? '',
                toolsId: (0, uuid_1.v4)()
            }
        }
    };
}
/**
 * Writes a given project template files within a specified folder in the project directory.
 *
 * @param {string} baseTmplPath - The root path of the templates folder.
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
function writeTemplateToFolder(baseTmplPath, projectPath, data, fs) {
    const ui5Version = data.ui5?.version;
    const tmplPath = (0, path_1.join)(baseTmplPath, 'project', '**/*.*');
    const tsConfigPath = (0, path_1.join)(baseTmplPath, 'typescript', 'tsconfig.json');
    const { typesPackage, typesVersion } = getTypes(ui5Version);
    try {
        fs.copyTpl(tmplPath, projectPath, { ...data, typesPackage, typesVersion }, undefined, {
            globOptions: { dot: true },
            processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
        });
        if (data.options?.enableTypeScript) {
            const id = data.app?.id?.split('.').join('/');
            fs.copyTpl(tsConfigPath, (0, path_1.join)(projectPath, 'tsconfig.json'), { id, typesPackage }, undefined, {
                globOptions: { dot: true }
            });
        }
    }
    catch (e) {
        throw new Error(`Could not write template files to folder. Reason: ${e.message}`);
    }
}
/**
 * Writes a ui5.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
async function writeUI5Yaml(projectPath, data, fs) {
    try {
        const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
        const baseUi5ConfigContent = fs.read(ui5ConfigPath);
        const ui5Config = await ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
        ui5Config.setConfiguration({ propertiesFileSourceEncoding: 'UTF-8' });
        (0, options_1.enhanceUI5YamlWithCustomConfig)(ui5Config, data);
        (0, options_1.enhanceUI5YamlWithTranspileMiddleware)(ui5Config, data);
        (0, options_1.enhanceUI5Yaml)(ui5Config, data);
        (0, options_1.enhanceUI5YamlWithCustomTask)(ui5Config, data);
        fs.write(ui5ConfigPath, ui5Config.toString());
    }
    catch (e) {
        throw new Error(`Could not write ui5.yaml file. Reason: ${e.message}`);
    }
}
/**
 * Writes a ui5-deploy.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
async function writeUI5DeployYaml(projectPath, data, fs) {
    try {
        if ((0, options_1.hasDeployConfig)(data)) {
            const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
            const baseUi5ConfigContent = fs.read(ui5ConfigPath);
            const ui5DeployConfig = await ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
            (0, options_1.enhanceUI5DeployYaml)(ui5DeployConfig, data);
            fs.write((0, path_1.join)(projectPath, 'ui5-deploy.yaml'), ui5DeployConfig.toString());
        }
    }
    catch (e) {
        throw new Error(`Could not write ui5-deploy.yaml file. Reason: ${e.message}`);
    }
}
//# sourceMappingURL=project-utils.js.map