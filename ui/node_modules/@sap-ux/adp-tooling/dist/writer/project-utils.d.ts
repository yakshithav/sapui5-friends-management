import type { Editor } from 'mem-fs-editor';
import type { AdpWriterConfig, CustomConfig, TypesConfig } from '../types';
import type { Package } from '@sap-ux/project-access';
import type { OperationsType } from '@sap-ux/axios-extension';
/**
 * Retrieves the package name and version from the package.json file located two levels up the directory tree.
 *
 * @returns {Package} An object containing the `name` and `version` of the package.
 */
export declare function getPackageJSONInfo(): Package;
/**
 * Determines the correct TypeScript definitions package and version based on a given UI5 version.
 *
 * If the version includes `"snapshot"`, it returns a predefined default types package and version.
 * Otherwise, it selects the appropriate package and computes the corresponding version using either
 * `getTypesVersion` or `getEsmTypesVersion`.
 *
 * @param {string} [ui5Version] - The version of UI5 (e.g., `"1.108.0"` or `"snapshot"`).
 * @returns {TypesConfig} - The package name and version string for the UI5 types.
 */
export declare function getTypes(ui5Version?: string): TypesConfig;
/**
 * Constructs a custom configuration object for the Adaptation Project (ADP).
 *
 * @param {OperationsType} environment - The operations type ('P' for on-premise or 'C' for cloud ready).
 * @param {object} pkg - The parsed contents of `package.json`.
 * @param {string} pkg.name - The name of the tool or package generating the config.
 * @param {string} pkg.version - The version of the tool generating the config.
 * @returns {CustomConfig} The generated ADP custom configuration object.
 */
export declare function getCustomConfig(environment: OperationsType, { name: id, version }: Package): CustomConfig;
/**
 * Writes a given project template files within a specified folder in the project directory.
 *
 * @param {string} baseTmplPath - The root path of the templates folder.
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
export declare function writeTemplateToFolder(baseTmplPath: string, projectPath: string, data: AdpWriterConfig, fs: Editor): void;
/**
 * Writes a ui5.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
export declare function writeUI5Yaml(projectPath: string, data: AdpWriterConfig, fs: Editor): Promise<void>;
/**
 * Writes a ui5-deploy.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
export declare function writeUI5DeployYaml(projectPath: string, data: AdpWriterConfig, fs: Editor): Promise<void>;
//# sourceMappingURL=project-utils.d.ts.map