"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = getConfig;
exports.getUi5Config = getUi5Config;
const ui5_1 = require("../ui5");
const abap_1 = require("../abap");
const project_utils_1 = require("./project-utils");
/**
 * Generates the configuration object for the Adaptation Project.
 *
 * @param {ConfigOptions} options - The configuration options.
 * @param {AbapServiceProvider} options.provider - The ABAP service provider instance.
 * @param {ConfigAnswers} options.configAnswers - User-provided configuration details (system, application, etc.).
 * @param {FlexLayer} options.layer - The FlexLayer indicating the deployment layer.
 * @param {object} options.defaults - Default project parameters.
 * @param {string} options.defaults.namespace - The default namespace to be used.
 * @param {Package} options.packageJson - The package.json information for generating custom configuration.
 * @param {ToolsLogger} options.logger - The logger for debugging and error logging.
 * @returns {Promise<AdpWriterConfig>} A promise that resolves to the generated ADP writer configuration.
 */
async function getConfig(options) {
    const { configAnswers, attributeAnswers, layer, logger, packageJson, provider, publicVersions, systemVersion, manifest } = options;
    const ato = await provider.getAtoInfo();
    const operationsType = ato.operationsType ?? 'P';
    const target = await (0, abap_1.getProviderConfig)(configAnswers.system, logger);
    const customConfig = (0, project_utils_1.getCustomConfig)(operationsType, packageJson);
    const isCloudProject = await provider.isAbapCloud();
    const isCustomerBase = layer === "CUSTOMER_BASE" /* FlexLayer.CUSTOMER_BASE */;
    const ui5Version = isCloudProject
        ? (0, ui5_1.getLatestVersion)(publicVersions)
        : (0, ui5_1.getVersionToBeUsed)(attributeAnswers.ui5Version, isCustomerBase, publicVersions);
    const { namespace, title, enableTypeScript } = attributeAnswers;
    const { application: { id, bspName }, fioriId, ach } = configAnswers;
    const app = {
        id: namespace,
        reference: id,
        layer,
        title,
        manifest,
        ach,
        fioriId
    };
    if (isCloudProject) {
        const lrep = provider.getLayeredRepository();
        const { activeLanguages: languages } = await lrep.getSystemInfo();
        Object.assign(app, {
            bspName,
            languages
        });
    }
    const ui5 = getUi5Config(ui5Version, publicVersions, systemVersion);
    return {
        app,
        ui5,
        customConfig,
        target,
        options: {
            fioriTools: true,
            enableTypeScript
        }
    };
}
/**
 * Generates the configuration details required for a SAPUI5 application based on system and selected UI5 versions.
 *
 * @param {string} ui5Version - The selected UI5 version.
 * @param {UI5Version} publicVersions - The publicly available UI5 versions.
 * @param {string | undefined} systemVersion - The SAPUI5 version detected on the target system.
 * @returns {AdpWriterConfig['ui5']} An object containing the required UI5 configuration for the writer config.
 */
function getUi5Config(ui5Version, publicVersions, systemVersion) {
    return {
        minVersion: (0, ui5_1.getMinUI5VersionForManifest)(publicVersions, systemVersion),
        version: (0, ui5_1.getFormattedVersion)(ui5Version),
        frameworkUrl: (0, ui5_1.getOfficialBaseUI5VersionUrl)(ui5Version),
        shouldSetMinVersion: (0, ui5_1.shouldSetMinUI5Version)(systemVersion)
    };
}
//# sourceMappingURL=writer-config.js.map