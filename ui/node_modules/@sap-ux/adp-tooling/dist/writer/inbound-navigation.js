"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateInboundConfig = generateInboundConfig;
exports.getFlpI18nKeys = getFlpI18nKeys;
exports.updateI18n = updateI18n;
exports.removeInboundChangeTypes = removeInboundChangeTypes;
const path_1 = __importDefault(require("path"));
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const i18n_1 = require("@sap-ux/i18n");
const __1 = require("../");
const options_1 = require("./options");
/**
 * Generates and writes the inbound configuration to the manifest.appdescr_variant file.
 *
 * @param basePath - The base path of the project.
 * @param config - The inbound configuration properties.
 * @param fs - Optional mem-fs editor instance.
 * @returns The mem-fs editor instance.
 */
async function generateInboundConfig(basePath, config, fs) {
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    const variant = await (0, __1.getVariant)(basePath, fs);
    variant.content = removeInboundChangeTypes(variant.content);
    if (!config?.inboundId) {
        config.inboundId = `${variant.id}.InboundID`;
    }
    (0, options_1.enhanceManifestChangeContentWithFlpConfig)(config, variant.id, variant.content);
    await (0, __1.updateVariant)(basePath, variant, fs);
    await updateI18n(basePath, variant.id, config, fs);
    return fs;
}
/**
 * Generates i18n entries for FLP configuration based on the provided configuration and application ID.
 *
 * @param {InternalInboundNavigation} config - The inbound configuration properties.
 * @param {string} appId - The application ID for creating unique i18n keys.
 * @returns {NewI18nEntry[]} An array of new i18n entries to be added or updated.
 */
function getFlpI18nKeys(config, appId) {
    const newEntries = [];
    const baseKey = `${appId}_sap.app.crossNavigation.inbounds.${config.inboundId}`;
    newEntries.push({
        key: `${baseKey}.title`,
        value: config.title,
        annotation: { textType: i18n_1.SapShortTextType.TableTitle, note: 'Fiori Launchpad Tile Title' }
    });
    if (config?.subTitle) {
        newEntries.push({
            key: `${baseKey}.subTitle`,
            value: config.subTitle,
            annotation: { textType: i18n_1.SapShortTextType.TableTitle, note: 'Fiori Launchpad Tile Subtitle' }
        });
    }
    return newEntries;
}
/**
 * Updates the i18n.properties file with new FLP configuration entries.
 *
 * @param {string} basePath - The base path of the project.
 * @param {string} appId - The application ID used to generate i18n keys.
 * @param {InternalInboundNavigation} config - The inbound configuration properties.
 * @param {Editor} fs - The mem-fs editor instance for file operations.
 * @returns {Promise<void>} A promise that resolves when the i18n file is updated.
 */
async function updateI18n(basePath, appId, config, fs) {
    const newEntries = getFlpI18nKeys(config, appId);
    const i18nPath = path_1.default.join(basePath, 'webapp', 'i18n', 'i18n.properties');
    const keysToRemove = [`${appId}_sap.app.crossNavigation.inbounds`];
    await (0, i18n_1.removeAndCreateI18nEntries)(i18nPath, newEntries, keysToRemove, basePath, fs);
}
/**
 * Removes elements with changeType 'appdescr_app_addNewInbound', 'appdescr_app_removeAllInboundsExceptOne' and 'appdescr_app_changeInbound' from the given array.
 *
 * @param content The array of manifest change objects.
 * @returns A new array with the specified elements removed.
 */
function removeInboundChangeTypes(content) {
    return content.filter((item) => item.changeType !== 'appdescr_app_addNewInbound' &&
        item.changeType !== 'appdescr_app_changeInbound' &&
        item.changeType !== 'appdescr_app_removeAllInboundsExceptOne');
}
//# sourceMappingURL=inbound-navigation.js.map