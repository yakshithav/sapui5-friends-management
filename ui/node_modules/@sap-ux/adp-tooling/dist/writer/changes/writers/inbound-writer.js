"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboundWriter = void 0;
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of inbound data changes for a project.
 */
class InboundWriter {
    fs;
    projectPath;
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs the content for an inbound data change based on provided data.
     *
     * @param {InboundData} data - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the inbound data change.
     */
    constructContent(data) {
        const content = {
            inboundId: data.inboundId,
            entityPropertyChange: []
        };
        this.getEnhancedContent(data, content);
        return content;
    }
    /**
     * Enhances the provided content object based on the values provided in answers.
     *
     * @param {InboundData} data - An object containing potential values for title, subTitle, and icon.
     * @param {InboundContent} content - The initial content object to be enhanced.
     * @returns {void}
     */
    getEnhancedContent(data, content) {
        const { icon, title, subtitle } = data.flp;
        if (title) {
            content.entityPropertyChange.push({
                propertyPath: 'title',
                operation: 'UPSERT',
                propertyValue: (0, change_utils_1.getParsedPropertyValue)(title)
            });
        }
        if (subtitle) {
            content.entityPropertyChange.push({
                propertyPath: 'subTitle',
                operation: 'UPSERT',
                propertyValue: (0, change_utils_1.getParsedPropertyValue)(subtitle)
            });
        }
        if (icon) {
            content.entityPropertyChange.push({
                propertyPath: 'icon',
                operation: 'UPSERT',
                propertyValue: (0, change_utils_1.getParsedPropertyValue)(icon)
            });
        }
    }
    /**
     * Writes the inbound data change to the project based on the provided data.
     *
     * @param {InboundData} data - The inbound data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    async write(data) {
        const { changeWithInboundId, filePath } = (0, change_utils_1.findChangeWithInboundId)(this.projectPath, data.inboundId);
        const timestamp = Date.now();
        if (!changeWithInboundId) {
            const content = this.constructContent(data);
            const change = (0, change_utils_1.getChange)(data.variant, timestamp, content, "appdescr_app_changeInbound" /* ChangeType.CHANGE_INBOUND */);
            (0, change_utils_1.writeChangeToFolder)(this.projectPath, change, this.fs);
        }
        else {
            if (changeWithInboundId.content) {
                this.getEnhancedContent(data, changeWithInboundId.content);
            }
            (0, change_utils_1.writeChangeToFile)(filePath, changeWithInboundId, this.fs);
        }
    }
}
exports.InboundWriter = InboundWriter;
//# sourceMappingURL=inbound-writer.js.map