"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationsWriter = void 0;
const path_1 = __importStar(require("path"));
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of annotations data changes for a project.
 */
class AnnotationsWriter {
    fs;
    projectPath;
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs the content for an annotation change based on provided data.
     *
     * @param {AnnotationsData} data - The data object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the annotation change.
     */
    constructContent(data) {
        const { variant: { layer }, annotation: { dataSource, fileName } } = data;
        const annotationFileNameWithoutExtension = fileName?.toLocaleLowerCase().replace('.xml', '');
        const annotationNameSpace = layer === "CUSTOMER_BASE" /* FlexLayer.CUSTOMER_BASE */
            ? `customer.annotation.${annotationFileNameWithoutExtension}`
            : `annotation.${annotationFileNameWithoutExtension}`;
        return {
            dataSourceId: `${dataSource}`,
            annotations: [annotationNameSpace],
            annotationsInsertPosition: 'END',
            dataSource: {
                [annotationNameSpace]: {
                    uri: `annotations/${fileName}`,
                    type: 'ODataAnnotation'
                }
            }
        };
    }
    /**
     * Determines the appropriate filename for the annotation file based on user answers.
     *
     * @param {AnnotationsData} data - The answers object containing user choices.
     * @returns {string | undefined} The determined filename for the annotation file.
     */
    getAnnotationFileName({ annotation }) {
        return annotation.filePath ? path_1.default.basename(annotation.filePath) : `annotation_${Date.now()}.xml`;
    }
    /**
     * Writes the annotation change to the project based on the provided data.
     *
     * @param {AnnotationsData} data - The annotations data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    async write(data) {
        const { variant, annotation } = data;
        annotation.fileName = annotation.fileName ?? this.getAnnotationFileName(data);
        if (annotation.filePath) {
            annotation.filePath = (0, path_1.isAbsolute)(annotation.filePath)
                ? annotation.filePath
                : path_1.default.join(this.projectPath, annotation.filePath);
        }
        const content = this.constructContent(data);
        const timestamp = Date.now();
        let change;
        // When created via command change need to be created else change is created via RTA.
        if (data.isCommand) {
            change = (0, change_utils_1.getChange)(variant, timestamp, content, "appdescr_app_addAnnotationsToOData" /* ChangeType.ADD_ANNOTATIONS_TO_ODATA */);
        }
        (0, change_utils_1.writeAnnotationChange)(this.projectPath, timestamp, data.annotation, change, this.fs);
    }
}
exports.AnnotationsWriter = AnnotationsWriter;
//# sourceMappingURL=annotations-writer.js.map