"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentUsagesWriter = void 0;
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of component usages data changes for a project.
 */
class ComponentUsagesWriter {
    fs;
    projectPath;
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs the content for an component usages change based on provided data.
     *
     * @param {ComponentUsagesData} data - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the component usages change.
     */
    constructContent({ component }) {
        const { data, usageId, settings, isLazy, name } = component;
        const componentUsages = {
            [usageId]: {
                name,
                lazy: isLazy === 'true',
                settings: (0, change_utils_1.parseStringToObject)(settings),
                data: (0, change_utils_1.parseStringToObject)(data)
            }
        };
        return {
            componentUsages
        };
    }
    /**
     * Constructs the content for an library reference change based on provided data.
     *
     * @param {ComponentUsagesData} library - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the library reference change.
     */
    constructLibContent({ library }) {
        const { reference, referenceIsLazy } = library;
        return {
            libraries: {
                [reference]: {
                    lazy: referenceIsLazy === 'true'
                }
            }
        };
    }
    /**
     * Writes the component usages change to the project based on the provided data.
     *
     * @param {ComponentUsagesData} data - The component usages data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    async write(data) {
        const componentUsagesContent = this.constructContent(data);
        const timestamp = Date.now();
        const compUsagesChange = (0, change_utils_1.getChange)(data.variant, timestamp, componentUsagesContent, "appdescr_ui5_addComponentUsages" /* ChangeType.ADD_COMPONENT_USAGES */);
        (0, change_utils_1.writeChangeToFolder)(this.projectPath, compUsagesChange, this.fs);
        if (!('library' in data)) {
            return;
        }
        const libRefContent = this.constructLibContent(data);
        const libTimestamp = timestamp + 1;
        const refLibChange = (0, change_utils_1.getChange)(data.variant, libTimestamp, libRefContent, "appdescr_ui5_addLibraries" /* ChangeType.ADD_LIBRARY_REFERENCE */);
        (0, change_utils_1.writeChangeToFolder)(this.projectPath, refLibChange, this.fs);
    }
}
exports.ComponentUsagesWriter = ComponentUsagesWriter;
//# sourceMappingURL=component-usages-writer.js.map