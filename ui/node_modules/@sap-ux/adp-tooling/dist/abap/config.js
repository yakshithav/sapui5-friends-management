"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProviderConfig = getProviderConfig;
const btp_utils_1 = require("@sap-ux/btp-utils");
const source_1 = require("../source");
/**
 * Determines the ABAP target configuration based on the running environment and system details.
 *
 * For an App Studio environment, the config is constructed with a destination property.
 * For non-AppStudio environments, the function retrieves system details from the SystemLookup service,
 * maps these details to an AbapTarget, and attaches authentication credentials to the request options if available.
 *
 * @param {string} system - The system identifier (URL or system name).
 * @param {ToolsLogger} logger - The logger for logging errors.
 * @param {RequestOptions} [requestOptions] - Optional request options which will be updated with auth information if available.
 * @param {string} [client] - Optional client number for systems with multiple clients.
 * @returns {Promise<AbapTarget>} A promise that resolves to the configured ABAP configuration.
 */
async function getProviderConfig(system, logger, requestOptions, client) {
    let config;
    if ((0, btp_utils_1.isAppStudio)()) {
        config = {
            destination: system
        };
    }
    else {
        const systemLookup = new source_1.SystemLookup(logger);
        const details = await systemLookup.getSystemByName(system);
        if (!details) {
            throw new Error(`No system details found for system: ${system}`);
        }
        config = {
            client: details?.Client ?? client,
            url: details?.Url
        };
        if (details?.Authentication) {
            config.authenticationType = details?.Authentication;
        }
        const username = details?.Credentials?.username;
        const password = details?.Credentials?.password;
        if (requestOptions && username && password) {
            requestOptions.auth = {
                username,
                password
            };
        }
    }
    return config;
}
//# sourceMappingURL=config.js.map