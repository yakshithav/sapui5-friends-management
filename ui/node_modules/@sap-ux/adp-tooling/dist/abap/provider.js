"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguredProvider = getConfiguredProvider;
const system_access_1 = require("@sap-ux/system-access");
const config_1 = require("./config");
/**
 * Retrieves a fully configured ABAP service provider for the specified system.
 *
 * This function uses the provided system identifier (and optional client and credentials)
 * to build an ABAP target configuration, which is then passed to createAbapServiceProvider.
 *
 * @param {ProviderOptions} options - Options for configuring the provider.
 * @param {ToolsLogger} logger - The logger for logging errors and debug messages.
 * @returns {Promise<AbapServiceProvider>} A promise that resolves to the configured ABAP service provider.
 * @throws {Error} If provider instantiation fails.
 */
async function getConfiguredProvider({ system, client, password, username }, logger) {
    try {
        const requestOptions = {
            ignoreCertErrors: false
        };
        const config = await (0, config_1.getProviderConfig)(system, logger, requestOptions, client);
        if (username && password) {
            requestOptions.auth = { username, password };
        }
        return await (0, system_access_1.createAbapServiceProvider)(config, requestOptions, false, logger);
    }
    catch (e) {
        logger?.error(`Failed to instantiate provider for system: ${system}. Reason: ${e.message}`);
        throw new Error(e.message);
    }
}
//# sourceMappingURL=provider.js.map