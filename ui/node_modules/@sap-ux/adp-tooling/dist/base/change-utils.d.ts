import type { Editor } from 'mem-fs-editor';
import { type AnnotationsData, type ChangeType, type DescriptorVariant, type InboundContent, type ManifestChangeProperties, type PropertyValueType } from '../types';
export type ChangeMetadata = Pick<DescriptorVariant, 'id' | 'layer' | 'namespace'>;
type InboundChangeData = {
    filePath: string;
    changeWithInboundId: InboundChange | undefined;
};
interface InboundChange extends ManifestChangeProperties {
    content: InboundContent;
}
/**
 * Writes annotation changes to the specified project path using the provided `mem-fs-editor` instance.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {number} timestamp - The timestamp of the change.
 * @param {AnnotationsData} annotation - The annotation data.
 * @param {ManifestChangeProperties} change - The annotation data change that will be written.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
export declare function writeAnnotationChange(projectPath: string, timestamp: number, annotation: AnnotationsData['annotation'], change: ManifestChangeProperties | undefined, fs: Editor): void;
/**
 * Writes a given change object to a file within a specified folder in the project's 'changes' directory.
 * If an additional subdirectory is specified, the change file is written there.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {ManifestChangeProperties} change - The change data to be written to the file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @param {string} [dir] - An optional subdirectory within the 'changes' directory where the file will be written.
 * @returns {void}
 */
export declare function writeChangeToFolder(projectPath: string, change: ManifestChangeProperties, fs: Editor, dir?: string): void;
/**
 * Writes a given change object to a specific file path. The change data is stringified to JSON format before
 * writing. This function is used to directly write changes to a file, without specifying a directory.
 *
 * @param {string} path - The root path of the project.
 * @param {ManifestChangeProperties} change - The change data to be written to the file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 */
export declare function writeChangeToFile(path: string, change: ManifestChangeProperties, fs: Editor): void;
/**
 * Parses a string into an object.
 *
 * @param {string} str - The string to be parsed into an object. The string should be in the format of object properties without the surrounding braces.
 * @returns {{ [key: string]: string }} An object constructed from the input string.
 * @example
 * // returns { name: "value" }
 * parseStringToObject('"name":"value"');
 */
export declare function parseStringToObject(str: string): {
    [key: string]: string;
};
/**
 * Attempts to parse a property value as JSON.
 *
 * @param {string} propertyValue - The property value to be parsed.
 * @returns {PropertyValueType} The parsed value if `propertyValue` is valid JSON; otherwise, returns the original `propertyValue`.
 * @example
 * // Returns the object { key: "value" }
 * getParsedPropertyValue('{"key": "value"}');
 *
 * // Returns the string "nonJSONValue" because it cannot be parsed as JSON
 * getParsedPropertyValue('nonJSONValue');
 */
export declare function getParsedPropertyValue(propertyValue: string): PropertyValueType;
/**
 * Retrieves all change files from a specified project path that match a given change type,
 * optionally within a specific subdirectory.
 *
 * @param {string} projectPath - The base path of the project.
 * @param {ChangeType} changeType - The type of changes to filter by, ensuring only changes of this type are returned.
 * @param {string} [subDir] - Optional subdirectory within the main changes directory.
 * @returns An array of change objects matching the specified change type.
 */
export declare function getChangesByType(projectPath: string, changeType: ChangeType, subDir?: string): ManifestChangeProperties[];
/**
 * Searches for a change file with a specific inbound ID within a project's change directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {string} inboundId - The inbound ID to search for within change files.
 * @returns {InboundChangeData} An object containing the file path and the change object with the matching inbound ID.
 * @throws {Error} Throws an error if the change file cannot be read or if there's an issue accessing the directory.
 */
export declare function findChangeWithInboundId(projectPath: string, inboundId: string): InboundChangeData;
/**
 * Constructs a generic change object based on provided parameters.
 *
 * @param {DescriptorVariant} variant - The app descriptor variant.
 * @param {number} timestamp - The timestamp.
 * @param {object} content - The content of the change to be applied.
 * @param {ChangeType} changeType - The type of the change.
 * @returns - An object representing the change
 */
export declare function getChange({ id, layer, namespace }: ChangeMetadata, timestamp: number, content: object, changeType: ChangeType): ManifestChangeProperties;
export {};
//# sourceMappingURL=change-utils.d.ts.map