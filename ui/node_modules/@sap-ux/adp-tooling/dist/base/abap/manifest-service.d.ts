import type { ToolsLogger } from '@sap-ux/logger';
import type { Manifest, ManifestNamespace } from '@sap-ux/project-access';
import { type AbapServiceProvider } from '@sap-ux/axios-extension';
import type { DescriptorVariant } from '../../types';
export type DataSources = Record<string, ManifestNamespace.DataSource>;
/**
 * Retrieves the inbound navigation configurations from the project's manifest.
 *
 * @param {Manifest} manifest - The manifest file object adhering to the SAP JSON schema for web application manifest files.
 * @returns {ManifestNamespace.Inbound | undefined} The inbound navigation configurations, or `undefined` if no configurations are present.
 */
export declare function getInboundsFromManifest(manifest: Manifest): ManifestNamespace.Inbound | undefined;
/**
 * Extracts the registration ID from the manifest file.
 *
 * @param {Manifest} manifest - The manifest file object adhering to the SAP JSON schema for web application manifest files.
 * @returns {string | undefined} The first registration ID if available, otherwise `undefined`.
 */
export declare function getRegistrationIdFromManifest(manifest: Manifest): string | undefined;
/**
 * Service class for handling operations related to the manifest of a UI5 application.
 * The class supports operations for both base and merged manifests.
 * It provides methods to fetch the manifest, data sources and metadata of a data source.
 *
 */
export declare class ManifestService {
    private readonly provider;
    private readonly logger;
    private manifest;
    private appInfo;
    /**
     * Private constructor to initialize the ManifestService.
     *
     * @param provider - The ABAP service provider.
     * @param logger - The logger instance.
     */
    private constructor();
    /**
     * Creates an instance of the ManifestService and fetches the base manifest of the application.
     *
     * @param provider - The ABAP service provider instance.
     * @param appId - The application ID.
     * @param logger - The logger instance.
     * @returns A promise that resolves to an instance of ManifestService.
     */
    static initBaseManifest(provider: AbapServiceProvider, appId: string, logger: ToolsLogger): Promise<ManifestService>;
    /**
     * Creates an instance of the ManifestService and fetches the merged manifest of the application.
     *
     * @param provider - The ABAP service provider instance.
     * @param basePath - The base path of the application.
     * @param variant - The descriptor variant.
     * @param logger - The logger instance.
     * @returns A promise that resolves to an instance of ManifestService.
     */
    static initMergedManifest(provider: AbapServiceProvider, basePath: string, variant: DescriptorVariant, logger: ToolsLogger): Promise<ManifestService>;
    /**
     * Fetches the base manifest for a given application ID.
     *
     * @param appId - The application ID.
     * @returns A promise that resolves when the base manifest is fetched.
     * @throws Error if the manifest URL is not found or fetching/parsing fails.
     */
    private fetchBaseManifest;
    /**
     * Fetches the application information for a given application ID.
     *
     * @param appId - The application ID.
     * @returns A promise that resolves when the application information is fetched.
     */
    private fetchAppInfo;
    /**
     * Returns the manifest fetched by the service during initialization.
     *
     * @returns The current manifest.
     */
    getManifest(): Manifest;
    /**
     * Fetches the merged manifest for a given application.
     *
     * @param basePath - The base path of the application.
     * @param descriptorVariantId - The descriptor variant ID.
     * @returns A promise that resolves to the merged manifest.
     */
    private fetchMergedManifest;
    /**
     * Returns the data sources from the manifest.
     *
     * @returns The data sources from the manifest.
     * @throws Error if no data sources are found in the manifest.
     */
    getManifestDataSources(): DataSources;
    /**
     * Returns the metadata of a data source.
     *
     * @param dataSourceId - The ID of the data source.
     * @returns A promise that resolves to the metadata of the data source.
     * @throws Error if no metadata path is found in the manifest or fetching fails.
     */
    getDataSourceMetadata(dataSourceId: string): Promise<string>;
}
//# sourceMappingURL=manifest-service.d.ts.map