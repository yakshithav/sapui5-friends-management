import type { ToolsLogger } from '@sap-ux/logger';
import type { BackendSystem } from '@sap-ux/store';
import type { Endpoint } from '../types';
/**
 * Retrieves the names of all stored systems, sorted alphabetically.
 *
 * @param {Endpoint[]} systems - Array of system systems.
 * @returns {string[]} An array of endpoint names as strings in sorted order.
 */
export declare function getEndpointNames(systems: Endpoint[]): string[];
/**
 * Transforms a BackendSystem object into an object matching the legacy Endpoint interface.
 *
 * @param {BackendSystem} system - The backend system to transform.
 * @returns {Endpoint} The transformed endpoint object.
 */
export declare const transformBackendSystem: (system: BackendSystem) => Endpoint;
/**
 * Service class to manage and retrieve information about system systems,
 * including their names, authentication requirements, and specific details.
 */
export declare class SystemLookup {
    private readonly logger;
    private systems;
    /**
     * Creates an instance of EndpointsManager.
     *
     * @param {ToolsLogger} logger - The logger.
     */
    constructor(logger: ToolsLogger);
    /**
     * Returns the stored systems.
     *
     * @returns {Promise<Endpoint[]>} An array of system systems.
     */
    getSystems(): Promise<Endpoint[]>;
    /**
     * Loads systems from either BAS (via destinations) or from the backend system store.
     *
     * @returns {Promise<Endpoint[]>} A promise that resolves with an array of endpoints.
     * @throws {Error} If fetching the systems fails.
     */
    private loadSystems;
    /**
     * Retrieves a particular system by its name.
     *
     * @param {string} name - The system name or URL.
     * @returns {Promise<Endpoint | undefined>} System details including client, url, and credentials, or undefined if not found.
     */
    getSystemByName(name: string): Promise<Endpoint | undefined>;
    /**
     * Determines whether a system requires authentication based on environment.
     *
     * @param {string} system - The system name or URL.
     * @returns {Promise<boolean>} A promise that resolves to true if authentication is required, false otherwise.
     */
    getSystemRequiresAuth(system: string): Promise<boolean>;
}
//# sourceMappingURL=systems.d.ts.map