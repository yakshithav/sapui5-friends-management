import type { ToolsLogger } from '@sap-ux/logger';
import type { AbapServiceProvider, App } from '@sap-ux/axios-extension';
import type { SourceApplication } from '../types';
/**
 * Compares two applications for sorting, using the title and falling back to the ID if titles are missing or equal.
 * This function ensures that applications are sorted alphabetically by their title or ID in a case-insensitive manner.
 *
 * @param {SourceApplication} appA - The first application to compare.
 * @param {SourceApplication} appB - The second application to compare.
 * @returns {number} A number indicating the sort order.
 */
export declare const filterApps: (appA: SourceApplication, appB: SourceApplication) => number;
/**
 * Transforms raw application data into a structured Application object.
 * This function maps properties from a loosely typed app data structure to a strongly typed Application object.
 *
 * @param {Partial<App>} app - The raw application data, possibly incomplete.
 * @returns {SourceApplication} A structured application object with defined properties, even if some may be empty.
 */
export declare const mapApps: (app: Partial<App>) => SourceApplication;
/**
 * Checks whether the application supports manifest-first approach.
 *
 * @param {AbapServiceProvider} provider - The ABAP service provider for communicating with the system.
 * @param {string} id - The ID of the application whose manifest should be managed.
 * @param {ToolsLogger} logger - Optional logger for debugging purposes.
 * @returns {Promise<boolean>} True if supported, otherwise throws an error.
 */
export declare function isAppSupported(provider: AbapServiceProvider, id: string, logger: ToolsLogger): Promise<boolean>;
/**
 * Loads and processes application data from the ABAP service provider.
 *
 * This function retrieves the application index from the provider and then searches for applications based on system type.
 * If the system is not a cloud system and the base is customer-specific, additional variant applications are fetched and merged.
 *
 * @param {AbapServiceProvider} provider - The ABAP service provider used to retrieve application data.
 * @param {boolean} isCustomerBase - Flag indicating whether the system is customer-based. Affects application selection.
 * @returns {Promise<SourceApplication[]>} A promise that resolves to a sorted list of applications.
 */
export declare function loadApps(provider: AbapServiceProvider, isCustomerBase: boolean): Promise<SourceApplication[]>;
//# sourceMappingURL=applications.d.ts.map