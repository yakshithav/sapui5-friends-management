"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemLookup = exports.transformBackendSystem = void 0;
exports.getEndpointNames = getEndpointNames;
const store_1 = require("@sap-ux/store");
const btp_utils_1 = require("@sap-ux/btp-utils");
/**
 * Retrieves the names of all stored systems, sorted alphabetically.
 *
 * @param {Endpoint[]} systems - Array of system systems.
 * @returns {string[]} An array of endpoint names as strings in sorted order.
 */
function getEndpointNames(systems) {
    return systems
        .map((endpoint) => endpoint.Name)
        .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase(), 'en', { sensitivity: 'base' }));
}
/**
 * Transforms a BackendSystem object into an object matching the legacy Endpoint interface.
 *
 * @param {BackendSystem} system - The backend system to transform.
 * @returns {Endpoint} The transformed endpoint object.
 */
const transformBackendSystem = (system) => ({
    Name: system.name,
    Url: system.url,
    Client: system.client,
    UserDisplayName: system.userDisplayName,
    Scp: !!system.serviceKeys,
    Authentication: system.authenticationType,
    Credentials: {
        username: system.username,
        password: system.password
    }
});
exports.transformBackendSystem = transformBackendSystem;
/**
 * Service class to manage and retrieve information about system systems,
 * including their names, authentication requirements, and specific details.
 */
class SystemLookup {
    logger;
    systems;
    /**
     * Creates an instance of EndpointsManager.
     *
     * @param {ToolsLogger} logger - The logger.
     */
    constructor(logger) {
        this.logger = logger;
    }
    /**
     * Returns the stored systems.
     *
     * @returns {Promise<Endpoint[]>} An array of system systems.
     */
    async getSystems() {
        if (!this.systems) {
            this.systems = await this.loadSystems();
        }
        return this.systems;
    }
    /**
     * Loads systems from either BAS (via destinations) or from the backend system store.
     *
     * @returns {Promise<Endpoint[]>} A promise that resolves with an array of endpoints.
     * @throws {Error} If fetching the systems fails.
     */
    async loadSystems() {
        try {
            let endpoints = [];
            if ((0, btp_utils_1.isAppStudio)()) {
                const destinations = await (0, btp_utils_1.listDestinations)({
                    stripS4HCApiHosts: true
                });
                endpoints = Object.values(destinations).filter((dest) => dest.WebIDEUsage?.includes('dev_abap'));
            }
            else {
                const systemStore = await (0, store_1.getService)({
                    entityName: 'system'
                });
                const backendSystems = await systemStore?.getAll();
                endpoints = backendSystems.map(exports.transformBackendSystem);
            }
            return endpoints;
        }
        catch (e) {
            this.logger?.error(`Failed to fetch systems list. Reason: ${e.message}`);
            throw new Error(e.message);
        }
    }
    /**
     * Retrieves a particular system by its name.
     *
     * @param {string} name - The system name or URL.
     * @returns {Promise<Endpoint | undefined>} System details including client, url, and credentials, or undefined if not found.
     */
    async getSystemByName(name) {
        const systems = await this.getSystems();
        const system = systems.find((e) => e.Name === name || e.Url === name);
        if (!system) {
            this.logger.warn(`No endpoint found for system: ${name}`);
            return undefined;
        }
        return system;
    }
    /**
     * Determines whether a system requires authentication based on environment.
     *
     * @param {string} system - The system name or URL.
     * @returns {Promise<boolean>} A promise that resolves to true if authentication is required, false otherwise.
     */
    async getSystemRequiresAuth(system) {
        const found = await this.getSystemByName(system);
        if ((0, btp_utils_1.isAppStudio)()) {
            return found?.Authentication === 'NoAuthentication';
        }
        else {
            return !found;
        }
    }
}
exports.SystemLookup = SystemLookup;
//# sourceMappingURL=systems.js.map