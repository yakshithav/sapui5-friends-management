import type { UI5Version } from '../types';
export interface VersionLabels {
    formattedVersion: string;
    systemSnapshotLabel: string;
    systemLatestLabel: string;
}
/**
 * Returns the latest version string from the fetched public versions.
 *
 * @param {UI5Version} publicVersions - The public UI5 version data fetched from the CDN.
 * @returns {string} The latest version string.
 */
export declare function getLatestVersion(publicVersions: UI5Version): string;
/**
 * Retrieves the minimum SAP UI5 version to be specified in the application manifest.
 * If the system version does not contain 'snapshot', the system version itself is used;
 * otherwise, the latest stable version is used as the minimum version.
 *
 * @param {UI5Version} publicVersions - The public UI5 version data.
 * @param {string} [systemVersion] - The version on the system.
 * @returns {string} The SAP UI5 version string to be set in the manifest, which can be either
 *         the current system version or the latest stable version, depending on the presence of 'snapshot'.
 */
export declare function getMinUI5VersionForManifest(publicVersions: UI5Version, systemVersion?: string): string;
/**
 * Determines whether the minimum SAP UI5 version should be set for the application manifest.
 *
 * @param {string} [systemVersion] - The version on the system.
 * @returns {boolean} True if the minimum UI5 version should be set (i.e., the detected version is
 *         available and the minor version is 90 or higher); otherwise, false.
 */
export declare function shouldSetMinUI5Version(systemVersion?: string): boolean;
/**
 * Determines the appropriate UI5 version to use based on the given version string and the customer base flag.
 *
 * @param {string} version - The current version string, which may include qualifiers like 'snapshot'.
 * @param {boolean} isCustomerBase - Indicates whether the current mode is based on a customer base.
 * @param {UI5Version} publicVersions - The public UI5 version data.
 * @returns {string} The version string to be used.
 */
export declare function getVersionToBeUsed(version: string, isCustomerBase: boolean, publicVersions: UI5Version): string;
/**
 * Computes version labels based on the provided version string.
 *
 * @param {string} version - The original version string.
 * @param {UI5Version} publicVersions - The public UI5 version data.
 * @returns {VersionLabels} An object containing:
 *   - formattedVersion: the version with any timestamp removed,
 *   - systemSnapshotLabel: the snapshot label (if applicable),
 *   - systemLatestLabel: a label if the version equals the latest version.
 */
export declare function getVersionLabels(version: string | undefined, publicVersions: UI5Version): VersionLabels;
/**
 * Checks whether the provided version string follows the expected format.
 *
 * @param version - The version string to be checked.
 * @returns The version string if it matches the standard format, or undefined otherwise.
 */
export declare function checkSystemVersionPattern(version: string | undefined): string | undefined;
/**
 * Retrieves and filters internal UI5 versions.
 *
 * This function fetches internal versions using the provided latest version
 * and then filters them based on a minimum supported version (in this case '1.71.0').
 *
 * @param {string} latestVersion - The latest public version string.
 * @returns {Promise<string[]>} A promise that resolves to an array of internal version strings.
 */
export declare function getInternalVersions(latestVersion: string): Promise<string[]>;
/**
 * Fetches versions that are higher than the specified version.
 *
 * @param {string} version - The baseline version to compare against.
 * @param {UI5Version} publicVersions - The public UI5 version data.
 * @returns {Promise<string[]>} A promise that resolves to an array of versions higher than the specified version.
 */
export declare function getHigherVersions(version: string, publicVersions: UI5Version): Promise<string[]>;
/**
 * Gets relevant UI5 versions based on the system version and customer base flag.
 *
 * For external users (non-customer base), this function fetches internal versions,
 * adjusts them based on snapshot labels, and adds standard snapshot constants.
 * For customer base users, if thereâ€™s no snapshot label, it returns only higher versions.
 * Otherwise, it returns the latest public version.
 *
 * @param {string | undefined} systemVersion - The current system version (can be undefined).
 * @param {boolean} isCustomerBase - Indicates if the project is customer based.
 * @param {UI5Version} publicVersions - The public UI5 version data.
 * @returns {Promise<string[]>} A promise that resolves to an array of relevant version strings.
 */
export declare function getRelevantVersions(systemVersion: string | undefined, isCustomerBase: boolean, publicVersions: UI5Version): Promise<string[]>;
//# sourceMappingURL=version-info.d.ts.map