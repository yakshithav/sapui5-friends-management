"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebappPath = getWebappPath;
exports.readUi5Yaml = readUi5Yaml;
exports.getAllUi5YamlFileNames = getAllUi5YamlFileNames;
exports.getMockServerConfig = getMockServerConfig;
exports.getMockDataPath = getMockDataPath;
const path_1 = require("path");
const ui5_config_1 = require("@sap-ux/ui5-config");
const constants_1 = require("../constants");
const file_1 = require("../file");
/**
 * Get path to webapp.
 *
 * @param appRoot - root to the application
 * @param [memFs] - optional mem-fs editor instance
 * @returns - path to webapp folder
 */
async function getWebappPath(appRoot, memFs) {
    const ui5YamlPath = (0, path_1.join)(appRoot, constants_1.FileName.Ui5Yaml);
    let webappPath = (0, path_1.join)(appRoot, constants_1.DirName.Webapp);
    if (await (0, file_1.fileExists)(ui5YamlPath, memFs)) {
        const yamlString = await (0, file_1.readFile)(ui5YamlPath, memFs);
        const ui5Config = await ui5_config_1.UI5Config.newInstance(yamlString);
        const relativeWebappPath = ui5Config.getConfiguration()?.paths?.webapp;
        if (relativeWebappPath) {
            // Search for folder with package.json inside
            const packageJsonPath = await (0, file_1.findFileUp)(constants_1.FileName.Package, appRoot, memFs);
            if (packageJsonPath) {
                const packageJsonDirPath = (0, path_1.dirname)(packageJsonPath);
                webappPath = (0, path_1.join)(packageJsonDirPath, relativeWebappPath);
            }
        }
    }
    return webappPath;
}
/**
 * Checks if UI5 config yaml file exists and returns its content.
 *
 * @param projectRoot - path to project root
 * @param fileName - name of yaml file to be read
 * @param [memFs] - optional mem-fs editor instance
 * @param options - options
 * @param [options.validateSchema] - optional flag to validate the schema of the yaml file
 * @returns {UI5Config} UI5 config file in yaml format
 * @throws {Error} if file is not found
 */
async function readUi5Yaml(projectRoot, fileName, memFs, options) {
    const ui5YamlPath = (0, path_1.join)(projectRoot, fileName);
    if (await (0, file_1.fileExists)(ui5YamlPath, memFs)) {
        const yamlString = await (0, file_1.readFile)(ui5YamlPath, memFs);
        return await ui5_config_1.UI5Config.newInstance(yamlString, { validateSchema: options?.validateSchema });
    }
    throw Error(`File '${fileName}' not found in project '${projectRoot}'`);
}
/**
 * Scans the project directory for ui5 configuration yaml files.
 *
 * @param projectRoot - path to project root, where ui5 configuration y*ml files are located
 * @param [memFs] - optional mem-fs editor instance
 * @returns list of valid and invalid UI5 configuration yaml file names
 * @throws {Error} if an error occurs while reading files from projectRoot
 */
async function getAllUi5YamlFileNames(projectRoot, memFs) {
    try {
        const yamlFilePaths = await (0, file_1.findFilesByExtension)('.yaml', projectRoot, [], memFs, true);
        return yamlFilePaths.map((path) => (0, path_1.basename)(path));
    }
    catch (error) {
        throw new Error(`There was an error reading files from the directory '${projectRoot}': ${error}`);
    }
}
/**
 * Retrieves the mock server configuration from the UI5 mock YAML file.
 *
 * @param projectRoot - Path to the project root.
 * @param fileName - Name of the YAML file to read. Defaults to FileName.Ui5MockYaml.
 * @returns The mock server configuration or null if not found.
 * @throws {Error} If the sap-fe-mockserver middleware is not found.
 */
async function getMockServerConfig(projectRoot, fileName = constants_1.FileName.Ui5MockYaml) {
    const ui5MockYamlFile = await readUi5Yaml(projectRoot, fileName);
    const mockserverMiddleware = ui5MockYamlFile.findCustomMiddleware('sap-fe-mockserver');
    if (!mockserverMiddleware) {
        throw new Error('Could not find sap-fe-mockserver');
    }
    return mockserverMiddleware.configuration;
}
/**
 * Retrieves the mock data path from the mock server configuration.
 *
 * @param projectRoot - Path to the project root.
 * @param fileName - Name of the YAML file to read. Defaults to FileName.Ui5MockYaml.
 * @returns The mock data path as a string. Returns an empty string if not found.
 */
async function getMockDataPath(projectRoot, fileName = constants_1.FileName.Ui5MockYaml) {
    const mockServerConfig = await getMockServerConfig(projectRoot, fileName);
    if (!mockServerConfig) {
        return '';
    }
    const services = extractServices(mockServerConfig);
    if (!services) {
        return '';
    }
    const found = services.find((service) => !!service.mockdataPath);
    return found?.mockdataPath ?? '';
}
/**
 * Helper to extract the services array from a MockServerConfiguration.
 *
 * @param config - The mock server configuration object.
 * @returns An array of MockServerService objects, or undefined if not found.
 */
function extractServices(config) {
    if ('services' in config && config.services) {
        return Array.isArray(config.services) ? config.services : [config.services];
    }
    return undefined;
}
//# sourceMappingURL=ui5-config.js.map