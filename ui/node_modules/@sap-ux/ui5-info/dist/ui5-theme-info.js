"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ui5Themes = void 0;
exports.getDefaultUI5Theme = getDefaultUI5Theme;
exports.getUi5Themes = getUi5Themes;
const constants_1 = require("./constants");
const semver_1 = require("semver");
const ui5_version_info_1 = require("./ui5-version-info");
const MIN_UI5_VER_DARK_THEME = '1.72.0';
const MIN_UI5_VER_HORIZON_THEME = '1.102.0';
const MAX_UI5_VER_BELIZE_THEME = '1.136.0';
const MIN_UI5_VER_BELIZE_DEPRECATED = '1.120.0';
exports.ui5Themes = {
    ["sap_belize" /* ui5ThemeIds.SAP_BELIZE */]: {
        id: "sap_belize" /* ui5ThemeIds.SAP_BELIZE */,
        label: 'Belize',
        supportUntil: MAX_UI5_VER_BELIZE_THEME,
        deprecateSince: MIN_UI5_VER_BELIZE_DEPRECATED
    },
    ["sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */]: {
        id: "sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */,
        label: 'Quartz Light'
    },
    ["sap_fiori_3_dark" /* ui5ThemeIds.SAP_FIORI_3_DARK */]: {
        id: "sap_fiori_3_dark" /* ui5ThemeIds.SAP_FIORI_3_DARK */,
        label: 'Quartz Dark',
        supportSince: MIN_UI5_VER_DARK_THEME
    },
    ["sap_horizon" /* ui5ThemeIds.SAP_HORIZON */]: {
        id: "sap_horizon" /* ui5ThemeIds.SAP_HORIZON */,
        label: 'Morning Horizon',
        supportSince: MIN_UI5_VER_HORIZON_THEME
    },
    ["sap_horizon_dark" /* ui5ThemeIds.SAP_HORIZON_DARK */]: {
        id: "sap_horizon_dark" /* ui5ThemeIds.SAP_HORIZON_DARK */,
        label: 'Evening Horizon',
        supportSince: MIN_UI5_VER_HORIZON_THEME
    }
};
/**
 * Get the default theme for the specified ui5 version string.
 *
 * @param ui5Version - optional, if not specified the latest supported theme will be returned
 * @returns UI5 theme identifier e.g. 'sap_fiori_3'
 */
function getDefaultUI5Theme(ui5Version) {
    if (ui5Version) {
        const cleanSemVer = (0, semver_1.coerce)(ui5Version);
        if (cleanSemVer && (0, semver_1.lt)(cleanSemVer, MIN_UI5_VER_HORIZON_THEME)) {
            return "sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */;
        }
    }
    return "sap_horizon" /* ui5ThemeIds.SAP_HORIZON */;
}
/**
 * Determines whether a given UI5 theme is supported for a specific UI5 version.
 *
 * A theme is considered supported if:
 * - It does not have a `supportSince` version, or the given version is greater than or equal to `supportSince`.
 * - It does not have a `supportUntil` version, or the given version is less than `supportUntil`.
 *
 * @param theme - The UI5 theme.
 * @param cleanSemVer - The semantic version of the ui5Version.
 * @returns true if the theme is supported in the given version, otherwise false.
 */
function isSupported(theme, cleanSemVer) {
    const isSupportedSince = theme.supportSince ? (0, semver_1.gte)(cleanSemVer, theme.supportSince) : true;
    const isSupportedUntil = theme.supportUntil ? (0, semver_1.lt)(cleanSemVer, theme.supportUntil) : true;
    return isSupportedSince && isSupportedUntil;
}
/**
 * Returns the list of supported UI5 themes for a given UI5 version.
 *
 * - If ui5Version is `Latest`, the latest supported UI5 version is used.
 * - If ui5Version is a snapshot version (e.g., 'snapshot-1.137.0'), the snapshot prefix is removed.
 * - If ui5Version is invalid or cannot be parsed into a semantic version, all themes are returned.
 * - Themes that are deprecated for the given version are marked with "(deprecated)" in their label.
 *
 * @param [ui5Version] - The UI5 version to filter themes by. Defaults to `defaultVersion`.
 * @returns {Promise<UI5Theme[]>}  A promise that returns an array of UI5 themes supported for the specified version.
 */
async function getUi5Themes(ui5Version = constants_1.defaultVersion) {
    // Handle 'Latest' versions by using the latest supported UI5 version
    const resolvedUi5Version = ui5Version === constants_1.latestVersionString ? await (0, ui5_version_info_1.getLatestUI5Version)(true) : ui5Version.replace('snapshot-', '');
    const cleanSemVer = (0, semver_1.coerce)(resolvedUi5Version);
    if (!cleanSemVer) {
        return Object.values(exports.ui5Themes);
    }
    const filteredThemes = {};
    for (const [id, theme] of Object.entries(exports.ui5Themes)) {
        // If the theme is supported, add it to the filtered themes list
        if (isSupported(theme, cleanSemVer)) {
            const isDeprecated = theme.deprecateSince && (0, semver_1.gte)(cleanSemVer, theme.deprecateSince);
            // If the theme is deprecated, add (deprecated) to the label
            filteredThemes[id] = {
                ...theme,
                label: isDeprecated ? `${theme.label} (deprecated)` : theme.label
            };
        }
    }
    return Object.values(filteredThemes);
}
//# sourceMappingURL=ui5-theme-info.js.map