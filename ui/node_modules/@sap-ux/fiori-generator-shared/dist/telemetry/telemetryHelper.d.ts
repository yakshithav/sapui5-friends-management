import { type TelemetryProperties, type ToolsSuiteTelemetryInitSettings } from '@sap-ux/telemetry';
import type { TelemetryData } from './types';
/**
 * Helper class for intialising and preparing event data for telemetry.
 */
export declare abstract class TelemetryHelper {
    private static _telemetryData;
    private static _previousEventTimestamp;
    /**
     * Returns the telemetry data.
     *
     * @returns telemetry data
     */
    static get telemetryData(): TelemetryData;
    /**
     * Load telemetry settings.
     *
     * @param options - tools suite telemetry init settings
     */
    static initTelemetrySettings(options: ToolsSuiteTelemetryInitSettings): Promise<void>;
    /**
     * Creates telemetry data and adds default telemetry props.
     *
     * @param additionalData - set additional properties to be reported by telemetry
     * @param filterDups - filters duplicates by returning undefined if it's suspected to be a repeated event based on previous telemetry data & timestamp (1 second)
     * @returns telemetry data
     */
    static createTelemetryData<T extends TelemetryProperties>(additionalData?: Partial<T>, filterDups?: boolean): TelemetryData | undefined;
    /**
     * Marks the start time. Example usage:
     * At the start of of the writing phase of the yeoman generator.
     * It should not be updated everytime calling createTelemetryData().
     */
    static markAppGenStartTime(): void;
    /**
     * Marks the end time. Example usage:
     * At the end of the writing phase of yeoman generator.
     */
    static markAppGenEndTime(): void;
}
//# sourceMappingURL=telemetryHelper.d.ts.map