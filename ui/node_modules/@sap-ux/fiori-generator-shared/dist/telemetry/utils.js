"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTelemetry = sendTelemetry;
exports.sendTelemetryBlocking = sendTelemetryBlocking;
const telemetry_1 = require("@sap-ux/telemetry");
const telemetryHelper_1 = require("./telemetryHelper");
/**
 * Prepares the telemetry event to be sent to the telemetry client.
 *
 * @param telemetryEventName - the event name to be reported
 * @param telemetryData - the telemetry data
 * @returns - the telemetry event
 */
function prepareTelemetryEvent(telemetryEventName, telemetryData) {
    // Make sure performance measurement end is called
    telemetryHelper_1.TelemetryHelper.markAppGenEndTime();
    const generationTime = telemetryData.markName
        ? telemetry_1.PerformanceMeasurementAPI.getMeasurementDuration(telemetryData.markName)
        : undefined;
    return {
        eventName: telemetryEventName,
        properties: telemetryData,
        measurements: generationTime ? { GenerationTime: generationTime } : {}
    };
}
/**
 * Sends the telemetry event to the telemetry client.
 *
 * @param telemetryEventName - the event name to be reported
 * @param telemetryData - the telemetry data
 * @param appPath - the path of the application
 * @returns - a promise that resolves when the event is sent
 */
async function sendTelemetry(telemetryEventName, telemetryData, appPath) {
    const telemetryEvent = prepareTelemetryEvent(telemetryEventName, telemetryData);
    return telemetry_1.ClientFactory.getTelemetryClient().reportEvent(telemetryEvent, telemetry_1.SampleRate.NoSampling, appPath ? { appPath } : undefined);
}
/**
 * Sends the telemetry event to the telemetry client and blocks the execution until the event is sent.
 *
 * @param telemetryEventName - the event name to be reported
 * @param telemetryData - the telemetry data
 * @param appPath - the path of the application
 * @returns - a promise that resolves when the event is sent
 */
async function sendTelemetryBlocking(telemetryEventName, telemetryData, appPath) {
    const telemetryEvent = prepareTelemetryEvent(telemetryEventName, telemetryData);
    return telemetry_1.ClientFactory.getTelemetryClient().reportEventBlocking(telemetryEvent, telemetry_1.SampleRate.NoSampling, appPath ? { appPath } : undefined);
}
//# sourceMappingURL=utils.js.map