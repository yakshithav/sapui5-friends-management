import type { Log, Logger as SapUxLogger, Transport } from '@sap-ux/logger';
import type { IChildLogger as ILogWrapper, IVSCodeExtLogger, LogLevel } from '@vscode-logging/logger';
import type { Logger } from 'yeoman-environment';
export type { ILogWrapper };
export declare const LOGGING_LEVEL_CONFIG_PROP = "ApplicationWizard.loggingLevel";
/**
 * Empty Implementation of the Logger, this is not strictly necessary in app gen but
 * other modules consuming parts of app gen need a dummy implementation (logs to console)
 */
export declare const DefaultLogger: LogWrapper;
/**
 * Creates a CLI logger based on the IChildLogger interface. This means we can use the
 * same log functions for extension and cli logging. No files generated for CLI use currently.
 *
 * @param logName - name of the logger
 * @param logLevel - defaults to off on cli
 * @returns {ILogWrapper} - the logger
 */
export declare function createCLILogger(logName: string, logLevel?: LogLevel): ILogWrapper;
/**
 * Log to vscode extension logger and yeoman logger simultaneously.
 * This allows use of Application Wizard log config and log file use but still have a single output channel for
 * generator logging.
 */
export declare class LogWrapper implements ILogWrapper, SapUxLogger {
    private static _vscodeLogger;
    private static _yoLogger;
    private static _logLevel;
    static readonly consoleFormat: import("logform").Format;
    /**
     * Create a new LogWrapper instance.
     *
     * @param logName - name of the logger
     * @param yoLogger - yeoman logger
     * @param logLevel - log level
     * @param extLogger - vscode extension logger
     * @param vscode - vscode instance
     */
    constructor(logName: string, yoLogger?: Logger, logLevel?: LogLevel, extLogger?: IVSCodeExtLogger, vscode?: any);
    static readonly logAtLevel: (level: LogLevel, message: string | object, ...args: any[]) => void;
    /**
     * Log a message at the fatal level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    fatal(msg: string, ...args: any[]): void;
    /**
     * Log a message at the error level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    error(msg: string | object, ...args: any[]): void;
    /**
     * Log a message at the warn level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    warn(msg: string | object, ...args: any[]): void;
    /**
     * Log a message at the info level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    info(msg: string | object, ...args: any[]): void;
    /**
     * Log a message at the debug level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    debug(msg: string | object, ...args: any[]): void;
    /**
     * Log a message at the trace level.
     *
     * @param msg - message to log
     * @param {...any} args - additional arguments
     */
    trace(msg: string, ...args: any[]): void;
    /**
     * Log a message at the info level.
     *
     * @param msg - message to log
     */
    static log(msg: string | object): void;
    /**
     * Get the currently configured log level.
     *
     * @returns {LogLevel} The current log level.
     */
    getLogLevel(): LogLevel;
    /**
     * Not implemented method, added to support limited interoperability with @sap-ux/logger.
     *
     * @returns {ILogWrapper} - the current logger
     */
    getChildLogger(): ILogWrapper;
    /**
     * Limited compatibility with `@sap-ux/logger` to use log() method.
     *
     * @param data
     */
    log(data: string | Log): void;
    /**
     * Not implemented method, added to support limited interoperability with @sap-ux/logger.
     *
     * @returns {ILogWrapper} - the current logger
     */
    add(): SapUxLogger;
    /**
     * Not implemented method, added to support limited interoperability with @sap-ux/logger.
     *
     * @returns {ILogWrapper} - the current logger
     */
    remove(): SapUxLogger;
    /**
     * Added to support limited interoperability with @sap-ux/logger.
     *
     * @returns {ILogWrapper} - the current logger transports
     */
    transports(): Transport[];
    /**
     * Not implemented method, added to support limited interoperability with @sap-ux/logger.
     *
     * @returns {ILogWrapper} - the current logger
     */
    child(): SapUxLogger;
}
//# sourceMappingURL=logWrapper.d.ts.map