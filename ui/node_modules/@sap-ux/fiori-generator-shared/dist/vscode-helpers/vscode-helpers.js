"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YEOMANUI_TARGET_FOLDER_CONFIG_PROP = void 0;
exports.getDefaultTargetFolder = getDefaultTargetFolder;
exports.isExtensionInstalled = isExtensionInstalled;
const fs_1 = require("fs");
const os_1 = __importDefault(require("os"));
const path_1 = require("path");
const semver_1 = require("semver");
exports.YEOMANUI_TARGET_FOLDER_CONFIG_PROP = 'ApplicationWizard.TargetFolder';
const DEFAULT_PROJECTS_FOLDER = (0, path_1.join)(os_1.default.homedir(), 'projects');
/**
 * Determines the target folder for the project.
 *
 * @param vscode - the vscode instance
 * @returns The default path, if it can be determined otherwise undefined.
 */
function getDefaultTargetFolder(vscode) {
    // CLI use will not define vscode
    if (!vscode) {
        return undefined;
    }
    const targetFolder = vscode.workspace?.getConfiguration().get(exports.YEOMANUI_TARGET_FOLDER_CONFIG_PROP);
    if (targetFolder) {
        return targetFolder;
    }
    const workspace = vscode.workspace;
    // default to the first suitable folder found in the workspace folders
    if (workspace.workspaceFolders?.length > 0) {
        for (const folder of workspace.workspaceFolders) {
            if (folder.uri.scheme === 'file') {
                return folder.uri.fsPath;
            }
        }
    }
    // Otherwise use <home-dir>/projects,
    return (0, fs_1.existsSync)(DEFAULT_PROJECTS_FOLDER) ? DEFAULT_PROJECTS_FOLDER : undefined;
}
/**
 * Check for an installed extension, optionally specifying a minimum version.
 * Note, this does not check for activation state of specified extension.
 *
 * @param vscode - vscode instance
 * @param extensionId - the id of the extension to find
 * @param minVersion - the minimum version of the specified extension, lower versions will not be returned. Must be a valid SemVer string.
 * @returns true if the extension is installed and the version is >= minVersion (if provided), false otherwise
 */
function isExtensionInstalled(vscode, extensionId, minVersion) {
    const foundExt = vscode?.extensions?.getExtension(extensionId);
    if (foundExt) {
        const extVersion = (0, semver_1.coerce)(foundExt.packageJSON.version);
        if (extVersion) {
            // Check installed ver is >= minVersion or return true if minVersion is not specified
            return !(minVersion && (0, semver_1.lt)(extVersion, minVersion));
        }
    }
    return false;
}
//# sourceMappingURL=vscode-helpers.js.map