"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteServiceData = deleteServiceData;
const ui5_config_1 = require("@sap-ux/ui5-config");
const manifest_1 = require("./data/manifest");
const annotations_1 = require("./data/annotations");
/**
 * Returns all paths of the EDMX service annotations.
 *
 * @param {OdataService} edmxAnnotations - EDMX OData service annotations.
 * @returns {string} annotation paths.
 */
function getEDMXAnnotationPaths(edmxAnnotations) {
    const emdxAnnotationsPaths = [];
    if (Array.isArray(edmxAnnotations)) {
        edmxAnnotations.forEach((annotation) => {
            const technicalName = encodeURIComponent(annotation.technicalName);
            emdxAnnotationsPaths.push(`/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations(TechnicalName='${technicalName}',Version='0001')/$value/` // This is how annotation paths are stored in manifest for ODataAnnotations
            );
        });
    }
    else {
        const technicalName = encodeURIComponent(edmxAnnotations.technicalName);
        emdxAnnotationsPaths.push(`/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations(TechnicalName='${technicalName}',Version='0001')/$value/`);
    }
    return emdxAnnotationsPaths;
}
/**
 * Internal function that deletes service from the manifest.json and ui5-*.yaml files based on the given service data.
 *
 * @param basePath - the root path of an existing UI5 application
 * @param paths - the root path of an existing UI5 application
 * @param service - name of the OData service instance
 * @param fs - the memfs editor instance
 */
async function deleteServiceData(basePath, paths, service, fs) {
    (0, manifest_1.deleteServiceFromManifest)(basePath, service, fs);
    if (service.path && service.name) {
        let ui5Config;
        let ui5LocalConfig;
        let ui5MockConfig;
        // Delete service data from manifest.json
        if (paths.ui5Yaml) {
            ui5Config = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5Yaml));
            // Delete service backend from fiori-tools-proxy middleware config
            ui5Config.removeBackendFromFioriToolsProxydMiddleware(service.path);
            fs.write(paths.ui5Yaml, ui5Config.toString());
        }
        const serviceAnnotationPaths = getEDMXAnnotationPaths(service.annotations);
        if (paths.ui5LocalYaml) {
            ui5LocalConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5LocalYaml));
            // Delete service backend from fiori-tools-proxy middleware config
            ui5LocalConfig.removeBackendFromFioriToolsProxydMiddleware(service.path);
            // Delete service from mockserver middleware config
            ui5LocalConfig.removeServiceFromMockServerMiddleware(service.path, serviceAnnotationPaths);
            fs.write(paths.ui5LocalYaml, ui5LocalConfig.toString());
        }
        if (paths.ui5MockYaml) {
            ui5MockConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5MockYaml));
            // Delete service backend from fiori-tools-proxy middleware config
            ui5MockConfig.removeBackendFromFioriToolsProxydMiddleware(service.path);
            // Delete service from mockserver config
            ui5MockConfig.removeServiceFromMockServerMiddleware(service.path, serviceAnnotationPaths);
            fs.write(paths.ui5MockYaml, ui5MockConfig.toString());
        }
        await (0, annotations_1.removeRemoteServiceAnnotationXmlFiles)(fs, basePath, service.name, service.annotations);
    }
}
//# sourceMappingURL=delete.js.map