import type { Editor } from 'mem-fs-editor';
import type { NamespaceAlias, OdataService, EdmxAnnotationsInfo, EdmxOdataService, CdsAnnotationsInfo } from '../types';
/**
 * Updates cds files with the provided annotations.
 * This function takes cds annotations and an Editor instance,
 * then updates the relevant cds files with the given annotations.
 *
 * @param {CdsAnnotationsInfo} annotations - The cds annotations info.
 * @param {Editor} fs - The memfs editor instance
 * @returns {Promise<void>} A promise that resolves when the cds files have been updated.
 */
export declare function updateCdsFilesWithAnnotations(annotations: CdsAnnotationsInfo | CdsAnnotationsInfo[], fs: Editor): Promise<void>;
/**
 * Removes annotations from CDS files.
 * This function takes cds annotations and an Editor instance,
 * then updates the relevant cds files with the given annotations.
 *
 * @param {CdsAnnotationsInfo} annotations - The cds annotations info.
 * @param {Editor} fs - The memfs editor instance
 * @returns {Promise<void>} A promise that resolves when the cds files have been updated.
 */
export declare function removeAnnotationsFromCDSFiles(annotations: CdsAnnotationsInfo | CdsAnnotationsInfo[], fs: Editor): Promise<void>;
/**
 * Writes local copies of metadata.xml and local annotations.
 *
 * @param {Editor} fs - the memfs editor instance
 * @param {string} webappPath - the webapp path of an existing UI5 application
 * @param {string} templateRoot - path to the file templates
 * @param {OdataService} service - the OData service instance with EDMX type
 */
export declare function writeLocalServiceAnnotationXMLFiles(fs: Editor, webappPath: string, templateRoot: string, service: EdmxOdataService): Promise<void>;
/**
 * Writes local copy of metadata.xml.
 *
 * @param {Editor} fs - the memfs editor instance
 * @param {string} webappPath - the webapp path of an existing UI5 application
 * @param {OdataService} service - the OData service instance with EDMX type
 */
export declare function writeMetadata(fs: Editor, webappPath: string, service: EdmxOdataService): Promise<void>;
/**
 * Removes annotation XML files for EDMX annotations.
 *
 * @param {Editor} fs - The memfs editor instance.
 * @param {string} basePath - The base path of the project.
 * @param {string} serviceName - Name of The OData service.
 * @param {OdataService} edmxAnnotations - The OData service annotations.
 */
export declare function removeRemoteServiceAnnotationXmlFiles(fs: Editor, basePath: string, serviceName: string, edmxAnnotations: EdmxAnnotationsInfo | EdmxAnnotationsInfo[]): Promise<void>;
/**
 * Writes annotation XML files for EDMX service annotations.
 *
 * @param {Editor} fs - The memfs editor instance.
 * @param {string} basePath - The base path of the project.
 * @param {string} serviceName - Name of The OData service.
 * @param {OdataService} edmxAnnotations - The OData service annotations.
 */
export declare function writeRemoteServiceAnnotationXmlFiles(fs: Editor, basePath: string, serviceName: string, edmxAnnotations: EdmxAnnotationsInfo | EdmxAnnotationsInfo[]): Promise<void>;
/**
 * Returns the namespaces parsed from the specified metadata and annotations.
 *
 * @param {Partial<OdataService>} service - an odata service where at least metadata and annotations properties are defined
 * @param {string} service.metadata - OData service metadata xml
 * @param {string} service.annotations - OData service annotations xml
 * @returns A reference to the namspaces array
 */
export declare function getAnnotationNamespaces({ metadata, annotations }: Partial<OdataService>): NamespaceAlias[];
//# sourceMappingURL=annotations.d.ts.map