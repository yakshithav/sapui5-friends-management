"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addServicesData = addServicesData;
exports.updateServicesData = updateServicesData;
const path_1 = require("path");
const project_access_1 = require("@sap-ux/project-access");
const ui5_config_1 = require("@sap-ux/ui5-config");
const mockserver_config_writer_1 = require("@sap-ux/mockserver-config-writer");
const annotations_1 = require("./data/annotations");
const package_1 = require("./data/package");
/**
 * Generates mockserver middleware config for ui5-local.yaml file based on ui5-mock.yaml.
 *
 * @param {Editor} fs - the memfs editor instance
 * @param {OdataService} ui5YamlPath - path pointing to the ui5.yaml file
 * @param {UI5Config} ui5LocalConfigPath - ui5-local.yaml configuration
 * @param {string} ui5LocalConfig - path pointing to the ui5-local.yaml file
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
async function generateMockserverMiddlewareBasedOnUi5MockYaml(fs, ui5YamlPath, ui5LocalConfigPath, ui5LocalConfig) {
    // Update ui5-local.yaml with mockserver middleware from ui5-mock.yaml
    const ui5MockYamlPath = (0, path_1.join)((0, path_1.dirname)(ui5YamlPath), project_access_1.FileName.Ui5MockYaml);
    const ui5MockYamlConfig = await ui5_config_1.UI5Config.newInstance(fs.read(ui5MockYamlPath));
    const mockserverMiddlewareFromUi5Mock = ui5MockYamlConfig.findCustomMiddleware('sap-fe-mockserver');
    if (ui5LocalConfigPath && fs.exists(ui5LocalConfigPath) && ui5LocalConfig && mockserverMiddlewareFromUi5Mock) {
        ui5LocalConfig.updateCustomMiddleware(mockserverMiddlewareFromUi5Mock);
    }
}
/**
 * Extends backend middleware for UI5Config with the service data.
 *
 * @param {Editor} fs - the memfs editor instance
 * @param {OdataService} service - the OData service instance data
 * @param {UI5Config} ui5Config - UI5 configuration
 * @param {string} ui5ConfigPath - path to the YAML config file
 * @param {boolean} update - whether the service update is running
 * @throws {Error} - if required UI5 project files are not found
 */
function extendBackendMiddleware(fs, service, ui5Config, ui5ConfigPath, update = false) {
    if (update) {
        ui5Config.updateBackendToFioriToolsProxydMiddleware(service.previewSettings);
    }
    else {
        // Try to add backend
        try {
            ui5Config.addBackendToFioriToolsProxydMiddleware(service.previewSettings, service.ignoreCertError);
        }
        catch (error) {
            if ((error instanceof ui5_config_1.YAMLError && error.code === ui5_config_1.yamlErrorCode.nodeNotFound) ||
                error.message === 'Could not find fiori-tools-proxy') {
                // Middleware is missing, add it along with the service backend
                ui5Config.addFioriToolsProxydMiddleware({
                    backend: [service.previewSettings],
                    ignoreCertError: service.ignoreCertError
                });
            }
            else {
                throw error;
            }
        }
    }
    fs.write(ui5ConfigPath, ui5Config.toString());
}
/**
 * Adds services data to ui5-*.yaml files.
 * Mockserver configuration for services and annotations are written using dataSources from manifest.json.
 * At the end, XML files for service annotations are created.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {ProjectPaths} paths - paths to the project files (package.json, ui5.yaml, ui5-local.yaml and ui5-mock.yaml)
 * @param {string} templateRoot - path to the file templates
 * @param {EdmxOdataService} service - the OData service instance
 * @param {Editor} fs - the memfs editor instance
 */
async function addServicesData(basePath, paths, templateRoot, service, fs) {
    let ui5Config;
    let ui5LocalConfig;
    let ui5MockConfig;
    if (paths.ui5Yaml) {
        ui5Config = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5Yaml));
        // Update ui5.yaml with backend middleware
        extendBackendMiddleware(fs, service, ui5Config, paths.ui5Yaml);
        // Update ui5-local.yaml with backend middleware
        if (paths.ui5LocalYaml) {
            ui5LocalConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5LocalYaml));
            extendBackendMiddleware(fs, service, ui5LocalConfig, paths.ui5LocalYaml);
        }
    }
    if (service.metadata) {
        const webappPath = await (0, project_access_1.getWebappPath)(basePath, fs);
        if (paths.ui5Yaml && ui5Config) {
            const config = {
                webappPath: webappPath
            };
            // Generate mockserver middleware for ui5-mock.yaml
            await (0, mockserver_config_writer_1.generateMockserverConfig)(basePath, config, fs);
            // Update ui5-local.yaml with mockserver middleware from newly created/updated ui5-mock.yaml
            await generateMockserverMiddlewareBasedOnUi5MockYaml(fs, paths.ui5Yaml, paths.ui5LocalYaml, ui5LocalConfig);
            // Update ui5-mock.yaml with backend middleware
            if (paths.ui5MockYaml) {
                ui5MockConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5MockYaml));
                extendBackendMiddleware(fs, service, ui5MockConfig, paths.ui5MockYaml);
            }
        }
        await (0, annotations_1.writeLocalServiceAnnotationXMLFiles)(fs, webappPath, templateRoot, service);
    }
    // Service is being added - update the package.json update as well, service update should not run the updates of the package.json
    if (paths.packageJson && paths.ui5Yaml) {
        (0, package_1.updatePackageJson)(paths.packageJson, fs, !!service.metadata);
    }
    if (paths.ui5LocalYaml && ui5LocalConfig) {
        fs.write(paths.ui5LocalYaml, ui5LocalConfig.toString());
    }
    await (0, annotations_1.writeRemoteServiceAnnotationXmlFiles)(fs, basePath, service.name ?? 'mainService', service.annotations);
}
/**
 * Updates services data in ui5-*.yaml files.
 * Mockserver configuration for services and annotations are updated using dataSources from manifest.json.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {ProjectPaths} paths - paths to the project files (package.json, ui5.yaml, ui5-local.yaml and ui5-mock.yaml)
 * @param {EdmxOdataService} service - the OData service instance
 * @param {Editor} fs - the memfs editor instance
 * @param {boolean} updateMiddlewares - whether the YAML files for the service (mock-server and fiori-tools-proxy middlewares) should be updated
 */
async function updateServicesData(basePath, paths, service, fs, updateMiddlewares) {
    let ui5Config;
    let ui5LocalConfig;
    let ui5MockConfig;
    if (updateMiddlewares) {
        if (paths.ui5Yaml) {
            ui5Config = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5Yaml));
            // Update ui5.yaml with backend middleware
            extendBackendMiddleware(fs, service, ui5Config, paths.ui5Yaml, true);
        }
        // Update ui5-local.yaml with backend middleware
        if (paths.ui5LocalYaml) {
            ui5LocalConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5LocalYaml));
            extendBackendMiddleware(fs, service, ui5LocalConfig, paths.ui5LocalYaml, true);
        }
    }
    // For update, updatable files should already exist
    if (service.metadata) {
        const webappPath = await (0, project_access_1.getWebappPath)(basePath, fs);
        // Generate mockserver only when ui5-mock.yaml already exists
        if (paths.ui5MockYaml && paths.ui5Yaml && ui5Config && updateMiddlewares) {
            const config = {
                webappPath: webappPath,
                // Since ui5-mock.yaml already exists, set 'skip' to skip package.json file updates
                packageJsonConfig: {
                    skip: true
                },
                // Set 'overwrite' to true to overwrite services data in YAML files
                ui5MockYamlConfig: {
                    overwrite: true
                }
            };
            // Regenerate mockserver middleware for ui5-mock.yaml by overwriting
            await (0, mockserver_config_writer_1.generateMockserverConfig)(basePath, config, fs);
            // Update ui5-local.yaml with mockserver middleware from updated ui5-mock.yaml
            await generateMockserverMiddlewareBasedOnUi5MockYaml(fs, paths.ui5Yaml, paths.ui5LocalYaml, ui5LocalConfig);
            // Update ui5-mock.yaml with backend middleware
            if (paths.ui5MockYaml) {
                ui5MockConfig = await ui5_config_1.UI5Config.newInstance(fs.read(paths.ui5MockYaml));
                extendBackendMiddleware(fs, service, ui5MockConfig, paths.ui5MockYaml, true);
            }
        }
        // Write metadata.xml file
        await (0, annotations_1.writeMetadata)(fs, webappPath, service);
    }
    if (paths.ui5LocalYaml && ui5LocalConfig) {
        // write ui5 local yaml if service type is not CDS
        fs.write(paths.ui5LocalYaml, ui5LocalConfig.toString());
    }
    // Write new annotations files
    await (0, annotations_1.writeRemoteServiceAnnotationXmlFiles)(fs, basePath, service.name ?? 'mainService', service.annotations);
}
//# sourceMappingURL=update.js.map