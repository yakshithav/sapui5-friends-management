import { type UI5Version } from '@sap-ux/ui5-info';
import type { ListChoiceOptions } from 'inquirer';
import type { UI5VersionChoice } from '../types';
import { Separator } from './separator';
/**
 * Get the UI5 themes as prompt choices applicable for the specified UI5 version.
 *
 * @param ui5Version - UI5 semantic version
 * @returns UI5 themes as list choice options
 */
export declare function getUI5ThemesChoices(ui5Version?: string): Promise<ListChoiceOptions[]>;
/**
 * Finds the search value in the provided list using `fuzzy` search.
 *
 * @param searchVal - the string to search for
 * @param searchList - the list in which to search by fuzzy matching the choice name
 * @returns Inquirer choices filtered by the search value
 */
export declare function searchChoices(searchVal: string, searchList: ListChoiceOptions[]): ListChoiceOptions[];
/**
 * Creates a list of UI5 Versions prompt choices, adding additional maintenance info for use in prompts
 * and grouping according to maintenance status.
 *
 * @param versions - ui5Versions
 * @param includeSeparators - Include a separator to visually identify groupings, if false then grouping info is included in each entry as additional name text
 * @param defaultChoice - optional, provides an additional version choice entry that is added as the first entry in the version choices (if it does not already exist in the version list) and sets as the default
 * @param useDefaultChoiceLabel - optional, if true the specified `defaultChoice` label will replace the `maintained` label. e.g. when `source system version` has been appended
 * @returns Array of ui5 version choices and separators if applicable, grouped by maintenance state
 */
export declare function ui5VersionsGrouped(versions: UI5Version[], includeSeparators?: boolean, defaultChoice?: UI5VersionChoice, useDefaultChoiceLabel?: boolean): (UI5VersionChoice | Separator)[];
/**
 * Get the default UI5 version choice that should be selected based on the provided default choice.
 * Note, if the provided version is a snapshot version, the closest provided version is returned.
 * Otherwise if the default choice is not found in the provided versions, it will still be returned.
 *
 * @param ui5Versions - UI5 versions ordered by version descending latest first
 * @param defaultChoice - optional default choice to be used
 * @returns The default UI5 version choice or the latest provided version
 */
export declare function getDefaultUI5VersionChoice(ui5Versions: UI5Version[], defaultChoice?: UI5VersionChoice): UI5VersionChoice | undefined;
//# sourceMappingURL=utility.d.ts.map