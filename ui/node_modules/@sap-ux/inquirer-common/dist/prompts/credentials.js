"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentialsPrompts = getCredentialsPrompts;
const i18n_1 = require("../i18n");
/**
 * Prompts the user for credentials.
 *
 * @param {Function} additionalValidation - Optional callback function called in the validation phase of password prompt. Callback function should return a boolean or a message.
 * @returns {Array} An array of prompts.
 */
async function getCredentialsPrompts(additionalValidation) {
    return [
        {
            type: 'input',
            name: 'username',
            message: (0, i18n_1.t)('prompts.username.message'),
            guiOptions: {
                mandatory: true
            },
            store: false,
            validate: (value) => {
                return value ? true : (0, i18n_1.t)('errors.cannotBeEmpty', { field: (0, i18n_1.t)('prompts.username.message') });
            }
        },
        {
            type: 'password',
            guiType: 'login',
            name: 'password',
            message: (0, i18n_1.t)('prompts.password.message'),
            mask: '*',
            guiOptions: {
                mandatory: true
            },
            store: false,
            validate: async (value, answers) => {
                if (!value) {
                    return (0, i18n_1.t)('errors.cannotBeEmpty', { field: (0, i18n_1.t)('prompts.password.message') });
                }
                if (!answers.username) {
                    return (0, i18n_1.t)('errors.cannotBeEmpty', { field: (0, i18n_1.t)('prompts.username.message') });
                }
                if (additionalValidation) {
                    return await additionalValidation({ username: answers.username, password: value });
                }
                return true;
            }
        }
    ];
}
//# sourceMappingURL=credentials.js.map