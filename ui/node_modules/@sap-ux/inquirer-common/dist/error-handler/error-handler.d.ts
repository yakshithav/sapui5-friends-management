import { type Destination } from '@sap-ux/btp-utils';
import { type HostEnvironmentId } from '@sap-ux/fiori-generator-shared/src/types';
import { type Logger } from '@sap-ux/logger';
import { ValidationLink } from '../types';
/**
 * Constants specific to error handling
 */
export declare enum ERROR_TYPE {
    AUTH = "AUTH",
    AUTH_TIMEOUT = "AUTH_TIMEOUT",
    REDIRECT = "REDIRECT",
    CERT = "CERT",// General cert error
    CERT_SELF_SIGNED = "CERT_SELF_SIGNED",
    CERT_UKNOWN_OR_INVALID = "CERT_UKNOWN_OR_INVALID",
    CERT_EXPIRED = "CERT_EXPIRED",
    CERT_SELF_SIGNED_CERT_IN_CHAIN = "CERT_SELF_SIGNED_CERT_IN_CHAIN",
    INVALID_SSL_CERTIFICATE = "INVALID_SSL_CERTIFICATE",
    UNKNOWN = "UNKNOWN",
    INVALID_URL = "INVALID_URL",
    TIMEOUT = "TIMEOUT",
    CONNECTION = "CONNECTION",
    SERVICES_UNAVAILABLE = "SERVICES_UNAVAILABLE",// All services
    SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",// HTTP 503 Not related to odata services
    NO_ABAP_ENVS = "NO_ABAP_ENVS",
    CATALOG_SERVICE_NOT_ACTIVE = "CATALOG_SERVICE_NOT_ACTIVE",
    NO_SUCH_HOST = "NO_SUCH_HOST",
    NOT_FOUND = "NOT_FOUND",
    ODATA_URL_NOT_FOUND = "ODATA_URL_NOT_FOUND",
    BAD_GATEWAY = "BAD_GATEWAY",// Can be caused by either local issue or endpoint configuration,
    GATEWAY_TIMEOUT = "GATEWAY_TIMEOUT",
    INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
    DESTINATION_SERVICE_UNAVAILABLE = "DESTINATION_SERVICE_UNAVAILABLE",// Caused by endpoint using a firewall or proxy
    DESTINATION_UNAVAILABLE = "DESTINATION_UNAVAILABLE",
    DESTINATION_NOT_FOUND = "DESTINATION_NOT_FOUND",
    DESTINATION_MISCONFIGURED = "DESTINATION_MISCONFIGURED",
    NO_V2_SERVICES = "NO_V2_SERVICES",
    NO_V4_SERVICES = "NO_V4_SERVICES",
    BAD_REQUEST = "BAD_REQUEST",
    DESTINATION_CONNECTION_ERROR = "DESTINATION_CONNECTION_ERROR",// General destination connection error where a specific root cause cannot be determined e.g. In the case of an internal server error
    SERVER_HTTP_ERROR = "SERVER_HTTP_ERROR"
}
export declare const ERROR_MAP: Record<ERROR_TYPE, RegExp[]>;
type ValidationLinkOrString = string | ValidationLink;
/**
 * Maps errors to end-user messages using some basic root cause analysis based on regex matching.
 * This class will also log errors and provide help links for validation errors in some limited use cases.
 */
export declare class ErrorHandler {
    /** The last error message generated */
    private currentErrorMsg;
    /** The last error message type generated if determined */
    private currentErrorType;
    private static _guidedAnswersEnabled;
    private static _logger;
    /**
     * The current platform string to be reported in telemetry events. If not provided it will be determined from the environment.
     */
    private static _platform;
    /**
     * Get the current platform string that would be used by the error handler.
     *
     * @returns the platform string as defined by `HostEnvironmentId` or the value set by the user
     */
    static get platform(): HostEnvironmentId | undefined;
    /**
     * Set platform string usually defined by `HostEnvironmentId`
     *
     * @param value the platform string to set
     */
    static set platform(value: HostEnvironmentId | undefined);
    /**
     * The Guided Answers (help) trigger property sent with some telemetry events.
     */
    private static _guidedAnswersTrigger;
    /**
     * Get the Guided Answers (help) trigger property.
     *
     * @returns the Guided Answers trigger property
     */
    static get guidedAnswersTrigger(): string | undefined;
    /**
     * Set the Guided Answers (help) trigger property.
     *
     * @param value the Guided Answers trigger property
     */
    static set guidedAnswersTrigger(value: string | undefined);
    private static readonly getMessageFromError;
    /**
     * Get the localized error message for the specified server error.
     *
     * @param error the error object or message that was returned from the server (5xx)
     * @param subTextKey an i18next key used to provide additional context to the error message
     * @returns the localized error message
     */
    private static readonly serverErrorMessage;
    private static readonly _errorTypeToMsg;
    /**
     *
     * @param errorType
     * @param error can be any object that will get stringified and passed to the specific error message for the error type entry, e.g. where the error message is parameterized
     * @returns an error message for the specified error type
     */
    private static readonly _errorMsg;
    /**
     * Get the Guided Answers (help) node for the specified error type.
     *
     * @param errorType The error type for which a help node (help content id) may be returned
     * @returns The Guided Answers node for the specified error type
     */
    private static readonly getHelpNode;
    /**
     * Find an error property for mapping to a general error type from most to least significant.
     *
     * @param error any type of error or object that has an error code, status, name or message
     * @returns a value that can be used to look up a general error type
     */
    private static readonly findErrorValueForMapping;
    /**
     * Create an instance of the ErrorHandler.
     *
     * @param logger the logger instance to use
     * @param enableGuidedAnswers if true, Guided Answers help links will include a command to launch the Guided Answers UI.
     *     Should be set to true if the Guided Answers UI extension is available.
     * @param logPrefix optional, a prefix to be used for the logger to distinguish the source of the log messages, if a logger is not provided
     */
    constructor(logger?: Logger, enableGuidedAnswers?: boolean, logPrefix?: string);
    /**
     * Get Guided Answers (context help) enabled value.
     *
     * @returns true if Guided Answers is enabled
     */
    static get guidedAnswersEnabled(): boolean;
    /**
     * Toggle Guided Answers (context help) for validation errors.
     */
    static set guidedAnswersEnabled(value: boolean);
    /**
     * Set the logger to be used for error messages.
     *
     * @param logger the logger instance to use
     */
    static set logger(logger: Logger);
    /**
     * Get the logger used for error messages.
     *
     * @returns the logger instance
     */
    static get logger(): Logger;
    /**
     * Tests if the error is a general certificate error.
     *
     * @param status the error status, code, or error object to check
     * @returns true if the error is a general certificate error
     */
    static isCertError(status: string | number | Error): boolean;
    /**
     * Get the error type for the specified error, mapping status code, error code, error name, error message to a few general error types.
     *
     * @param error the error, string or status code to get the type for
     * @returns the error type
     */
    static getErrorType(error: string | number | Error): ERROR_TYPE;
    /**
     * Maps errors to a few generic types, log a detailed error.
     *
     * @param error If the error is a string this will be logged as is. Otherwise it will be mapped to a general error internally, possibly retained and logged.
     * @param userMsg If provided this will be set as the userErrorMsg instead of an error to msg map
     *  this allows a message more relevant to the context of where the error was generated to be used.
     * @param retainError Defaults to true to retain the error state.
     * @returns A user-friendly message for display in-line
     */
    logErrorMsgs(error: unknown, userMsg?: string, retainError?: boolean): string;
    /**
     * Maps an error to a user-friendly message. The specified error may by a string (e.g. error message), number (e.g. status code), Error, or Axios error.
     *
     * @param error The error to map
     * @returns The mapped error message and error type
     */
    private static mapErrorToMsg;
    /**
     * Used by validate functions to report in-line user friendly errors.
     * Checks if there is an existing error.
     *
     * @param error optional, if provided get the end user message that it maps to, otherwise get the previous error message, if a boolean is passed it will be interpreted as `reset`.
     * @param reset optional, resets the previous error state if true, if error is omitted reset may be passed as the first argument
     * @param fallback optional, return the message of the specified ERROR_TYPE if no previous end user message and no error specified
     * @returns The error message
     */
    getErrorMsg(error?: any, reset?: boolean, fallback?: ERROR_TYPE): string | undefined;
    /**
     * Used by validate functions to report in-line user friendly errors messages with help links.
     * If the error type is unknown, this will find a mapped error type and return the help (ValidationLink) if it exists.
     * If an error is not provided the current error state will be used. This does not log the message to the console.
     * If a system is provided, the error type may be refined to provide a more specific error message for the system which generatd the error.
     *
     * @param error optional, if provided get the help link message that it maps to, otherwise get the previously logged error message help link
     * @param reset optional, resets the previous error state if true
     * @param destination optional, if provided the destination may be used to determine a more relevant error message, specific to the system properties
     * @returns An instance of @see {ValidationLink}
     */
    getValidationErrorHelp(error?: any, reset?: boolean, destination?: Destination): ValidationLinkOrString | undefined;
    /**
     * Get a more specific error type for the specified destination.
     *
     * @param errorType
     * @param destination
     * @returns
     */
    private static getDestinationSpecificError;
    /**
     * Get the error message for the specified error type.
     *
     * @param errorType The error type for which the message may be returned
     * @param error optional, if provided may be used to get generate a more specific error message, or be included in the message
     * @returns The error message for the specified error type
     */
    static getErrorMsgFromType(errorType: ERROR_TYPE, error?: any): string | undefined;
    /**
     * Checks if there is an existing error.
     *
     * @param reset - resets the current error state
     * @returns true if there is an existing error
     */
    hasError(reset?: boolean): boolean;
    /**
     * Sets the current error state.
     *
     * @param errorType - the error type
     * @param error - the original error, if any
     */
    setCurrentError(errorType: ERROR_TYPE, error?: any): void;
    /**
     * Gets the current error type state.
     *
     * @param reset - resets the current error state
     * @returns The current error type
     */
    getCurrentErrorType(reset?: boolean): ERROR_TYPE | null;
    /**
     * Maps an error type to a validation link if help (Guided Answers topic) is available for the specified error.
     * Otherwise the specified error message is returned. To retrieve the previous error state @see getValidationErrorHelp.
     * Use this (getHelpForError) if the error type is known.
     *
     * @param errorType - the error type to be mapped to help link
     * @param errorMsg - the message to appear with the help link
     * @returns A validation help link or help link message
     */
    static getHelpForError(errorType: ERROR_TYPE, errorMsg?: string): ValidationLinkOrString | undefined;
    /**
     * Get a help link for the specified help node.
     *
     * @param helpNode The help node to get the link for
     * @param errorType The error type
     * @param errorMsg The error message to display with the help link
     * @returns A validation help link
     */
    static getHelpLink(helpNode: number, errorType: ERROR_TYPE, errorMsg: string): ValidationLink;
}
export {};
//# sourceMappingURL=error-handler.d.ts.map