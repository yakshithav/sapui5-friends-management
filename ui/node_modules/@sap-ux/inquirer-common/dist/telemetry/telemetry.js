"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTelemetryClient = setTelemetryClient;
exports.getTelemetryClient = getTelemetryClient;
exports.sendTelemetryEvent = sendTelemetryEvent;
exports.getTelemPropertyDestinationType = getTelemPropertyDestinationType;
const btp_utils_1 = require("@sap-ux/btp-utils");
const telemetry_1 = require("@sap-ux/telemetry");
const os_name_1 = __importDefault(require("os-name"));
const fiori_generator_shared_1 = require("@sap-ux/fiori-generator-shared");
let telemetryClient;
// cached os name to avoid multiple calls to os-name
let osVersionName;
/**
 * Set the telemetry client for use with sending telemetry events.
 *
 * @param toolsSuiteTelemetryClient the telemetry client instance to use when sending telemetry events
 */
function setTelemetryClient(toolsSuiteTelemetryClient) {
    telemetryClient = toolsSuiteTelemetryClient;
}
/**
 * Get the telemetry client if set.
 *
 * @returns the telemetry client instance if previously set.
 */
function getTelemetryClient() {
    return telemetryClient;
}
/**
 * Send telemetry event.
 *
 * @param eventName the name of the telemetry event
 * @param telemetryData the telemetry values to report
 */
function sendTelemetryEvent(eventName, telemetryData) {
    const telemetryEvent = createTelemetryEvent(eventName, telemetryData);
    if (telemetryClient) {
        // Do not wait for the telemetry event to be sent, it cannot be recovered if it fails, do not block the process
        /* eslint-disable @typescript-eslint/no-floating-promises */
        telemetryClient.reportEvent(telemetryEvent, telemetry_1.SampleRate.NoSampling);
    }
}
/**
 * Create telemetry event.
 *
 * @param eventName the name of the telemetry event
 * @param telemetryData the telemetry values to add to he returned telemetry event
 * @returns the telemetry event
 */
function createTelemetryEvent(eventName, telemetryData) {
    osVersionName = osVersionName ?? (0, os_name_1.default)(); // cache the os name
    const telemProps = Object.assign(telemetryData, {
        OperatingSystem: osVersionName,
        Platform: telemetryData.Platform || (0, fiori_generator_shared_1.getHostEnvironment)().technical
    });
    return {
        eventName,
        properties: telemProps,
        measurements: {}
    };
}
/**
 * Used only to generate telemetry events in the case of destination errors.
 *
 * @param destination the destination used to set the telemetry destination type
 * @returns the telemetry property destination type
 */
function getTelemPropertyDestinationType(destination) {
    if ((0, btp_utils_1.isAbapODataDestination)(destination)) {
        return 'AbapODataCatalogDest';
    }
    else if ((0, btp_utils_1.isFullUrlDestination)(destination)) {
        return 'GenericODataFullUrlDest';
    }
    else if ((0, btp_utils_1.isPartialUrlDestination)(destination)) {
        return 'GenericODataPartialUrlDest';
    }
    else {
        return 'Unknown';
    }
}
//# sourceMappingURL=telemetry.js.map