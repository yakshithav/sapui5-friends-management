"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addi18nResourceBundle = addi18nResourceBundle;
exports.initI18nInquirerCommon = initI18nInquirerCommon;
exports.t = t;
const i18next_1 = __importDefault(require("i18next"));
const inquirer_common_i18n_json_1 = __importDefault(require("./translations/inquirer-common.i18n.json"));
const inquirerCommonI18nNamespace = 'inquirer-common';
/**
 * Adds the `inquirer-common` resource bundle to i18next.
 * May be required to load i18n translations after initialising in the consumer module.
 */
function addi18nResourceBundle() {
    i18next_1.default.addResourceBundle('en', inquirerCommonI18nNamespace, inquirer_common_i18n_json_1.default);
}
/**
 * Initialize i18next with the translations for this module.
 */
async function initI18nInquirerCommon() {
    await i18next_1.default.init({
        lng: 'en',
        fallbackLng: 'en',
        missingInterpolationHandler: () => '',
        interpolation: {
            format: function (value, format) {
                // If we have a value add a colon before outputting
                if (format === 'addMsgWithColonFormatter') {
                    return value ? `: ${value}` : '';
                }
                return value;
            }
        }
    });
    addi18nResourceBundle();
}
/**
 * Helper function facading the call to i18next. Unless a namespace option is provided the local namespace will be used.
 *
 * @param key i18n key
 * @param options additional options
 * @returns {string} localized string stored for the given key
 */
function t(key, options) {
    if (!options?.ns) {
        options = Object.assign(options ?? {}, { ns: inquirerCommonI18nNamespace });
    }
    return i18next_1.default.t(key, options);
}
initI18nInquirerCommon().catch(() => {
    // Needed for lint
});
//# sourceMappingURL=i18n.js.map