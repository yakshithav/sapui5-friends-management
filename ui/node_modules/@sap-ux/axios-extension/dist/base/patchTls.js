"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TlsPatch = void 0;
const tls_1 = __importDefault(require("tls"));
const sap_global_root_ca_1 = require("../cacerts/sap-global-root-ca");
/**
 * Test for sap domains and patching to trust SAPs root certificate
 *
 */
class TlsPatch {
    static _patched;
    /**
     * Test if the patch is already applied.
     *
     * @returns true if the patch is already applied
     */
    static get isPatched() {
        return TlsPatch._patched;
    }
    /**
     * Test if the patch is required.
     *
     * @param url the url to test
     * @returns true if the patch is required
     */
    static isPatchRequired(url) {
        return !TlsPatch.isPatched && url && (url.includes('.sap.corp') || url.includes('.net.sap'));
    }
    /**
     * Monkey patching the secure context to also support SAPs root CA.
     */
    static apply() {
        if (TlsPatch.isPatched) {
            return;
        }
        const origCreateSecureContext = tls_1.default.createSecureContext;
        tls_1.default.createSecureContext = (options) => {
            const context = origCreateSecureContext(options);
            const pem = sap_global_root_ca_1.sapGlobalRootCaCert.replace(/\r\n/g, '\n');
            const certs = pem.match(/-----BEGIN CERTIFICATE-----\n[\s\S]+?\n-----END CERTIFICATE-----/g);
            certs.forEach((cert) => {
                context.context.addCACert(cert.trim());
            });
            return context;
        };
        TlsPatch._patched = true;
    }
}
exports.TlsPatch = TlsPatch;
//# sourceMappingURL=patchTls.js.map