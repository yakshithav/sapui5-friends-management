"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ui5AbapRepositoryService = exports.abapUrlReplaceMap = void 0;
const message_1 = require("./message");
const odata_service_1 = require("../base/odata-service");
const odata_request_error_1 = require("../base/odata-request-error");
exports.abapUrlReplaceMap = new Map([
    [/\.abap\./, '.abap-web.'],
    [/-api\.s4hana\.ondemand\.com/, '.s4hana.ondemand.com'],
    [/-api\.saps4hanacloud\.cn/, '.saps4hanacloud.cn'],
    [/-api\.lab\.s4hana\.cloud\.sap/, '.lab.s4hana.cloud.sap']
]);
const xmlReplaceMap = {
    '&': '&amp;',
    '"': '&quot;',
    "'": '&apos;',
    '<': '&lt;',
    '>': '&gt;'
};
const xmlReplaceRegex = /[<>&"']/g;
/**
 * Escape invalid characters for XML values.
 *
 * @param xmlValue xml string
 * @returns escaped xml value
 */
function encodeXmlValue(xmlValue) {
    return xmlValue.replace(xmlReplaceRegex, (c) => xmlReplaceMap[c]);
}
/**
 * Extension of the generic OData client simplifying the consumption of the UI5 repository service
 */
class Ui5AbapRepositoryService extends odata_service_1.ODataService {
    static PATH = '/sap/opu/odata/UI5/ABAP_REPOSITORY_SRV';
    publicUrl;
    isDest;
    /**
     * Extension of the base constructor to set preferred response format if not provided by caller.
     *
     * @param config optional base configuration for Axios appended with optional fields
     */
    constructor(config) {
        config = config ?? {};
        config.headers = config.headers ?? {};
        // @see https://axios-http.com/docs/config_defaults
        config.headers['Accept'] = config.headers['Accept'] ?? 'application/json,application/xml,text/plain,*/*';
        super(config);
        this.publicUrl = config.publicUrl || this.defaults.baseURL;
        this.isDest = /\.dest\//.test(this.defaults.baseURL);
    }
    /**
     * Get information about a deployed application. Returns undefined if the application cannot be found.
     *
     * @param app application id (BSP application name)
     * @returns application information or undefined
     */
    async getInfo(app) {
        try {
            const response = await this.get(`/Repositories('${encodeURIComponent(app)}')`);
            return response.odata();
        }
        catch (error) {
            this.log.debug(`Retrieving application ${app} from ${Ui5AbapRepositoryService.PATH}, ${error}`);
            if ((0, odata_request_error_1.isAxiosError)(error) && error.response?.status === 404) {
                return undefined;
            }
            throw error;
        }
    }
    /**
     *
     * @param str string to check
     * @returns true if the string is base64 encoded, false otherwise
     */
    isBase64Encoded(str) {
        try {
            // Decode the string and re-encode it to verify integrity
            return Buffer.from(str, 'base64').toString('base64') === str.trim();
        }
        catch (e) {
            // If decoding fails, it's not valid Base64
            return false; //NOSONAR
        }
    }
    /**
     * Get the application files as zip archive. This will only work on ABAP systems 2308 or newer.
     *
     * @param app application id (BSP application name)
     * @returns undefined if no app is found or downloading files is not supported, otherwise return the application files as a buffer.
     */
    async downloadFiles(app) {
        try {
            const response = await this.get(`/Repositories('${encodeURIComponent(app)}')`, {
                params: {
                    CodePage: 'UTF8',
                    DownloadFiles: 'RUNTIME'
                }
            });
            const data = response.odata();
            if (!data.ZipArchive) {
                return undefined;
            }
            const isBase64 = this.isBase64Encoded(data.ZipArchive);
            return Buffer.from(data.ZipArchive, isBase64 ? 'base64' : undefined);
        }
        catch (error) {
            this.log.debug(`Retrieving application ${app}, ${error}`);
            if ((0, odata_request_error_1.isAxiosError)(error) && error.response?.status === 404) {
                return undefined;
            }
            throw error;
        }
    }
    /**
     * Deploy the given archive either by creating a new BSP or updating an existing one.
     *
     * @param config deployment config
     * @param config.archive zip archive containing the application files as buffer
     * @param config.bsp BSP configuration
     * @param config.testMode if set to true, all requests will be sent, the service checks them, but no actual deployment will happen
     * @param config.safeMode if set then the SafeMode url parameter will be set. SafeMode is by default active, to activate provide false
     * @returns the Axios response object for further processing
     */
    async deploy({ archive, bsp, testMode = false, safeMode }) {
        const info = await this.getInfo(bsp.name);
        const payload = this.createPayload(archive, bsp.name, bsp.description || 'Deployed with SAP Fiori tools', info ? info.Package : bsp.package);
        this.log.debug(`Payload:\n ID: ${this.publicUrl}/Repositories('${bsp.name}') \n ABAP Package: ${info ? info.Package : bsp.package}`);
        const config = this.createConfig(bsp.transport, testMode, safeMode);
        const frontendUrl = this.getAbapFrontendUrl();
        try {
            const response = await this.updateRepoRequest(!!info, bsp.name, payload, config);
            // An app can be successfully deployed after a timeout exception, no value in showing exception headers
            if (response?.headers?.['sap-message']) {
                (0, message_1.prettyPrintMessage)({
                    msg: response.headers['sap-message'],
                    log: this.log,
                    host: frontendUrl,
                    isDest: this.isDest
                });
            }
            if (!testMode) {
                // log url of created/updated app
                const path = '/sap/bc/ui5_ui5' + (!bsp.name.startsWith('/') ? '/sap/' : '') + bsp.name.toLowerCase();
                const query = this.defaults.params?.['sap-client']
                    ? '?sap-client=' + this.defaults.params['sap-client']
                    : '';
                this.log.info(`App available at ${frontendUrl}${path}${query}`);
            }
            else {
                // Test mode returns a HTTP response code of 403 so we dont want to show all error messages
                (0, message_1.prettyPrintError)({
                    error: (0, message_1.getErrorMessageFromString)(response?.data),
                    log: this.log,
                    host: frontendUrl,
                    isDest: this.isDest
                }, false);
            }
            if (!!info && info.Package !== bsp.package) {
                this.log.warn(`Cannot change package assignment from ${info.Package} to ${bsp.package}.`);
            }
            return response;
        }
        catch (error) {
            (0, message_1.logError)({ error, host: frontendUrl, log: this.log, isDest: this.isDest });
            throw error;
        }
    }
    /**
     * Undeploy an existing app.
     *
     * @param config undeploy config
     * @param config.bsp BSP configuration
     * @param config.testMode if set to true, all requests will be sent, the service checks them, but no actual deployment will happen
     * @returns the Axios response object for further processing or undefined if no request is sent
     */
    async undeploy({ bsp, testMode = false }) {
        const config = this.createConfig(bsp.transport, testMode);
        const host = this.getAbapFrontendUrl();
        const info = await this.getInfo(bsp.name);
        try {
            if (info) {
                const response = await this.deleteRepoRequest(bsp.name, config);
                if (response?.headers?.['sap-message']) {
                    (0, message_1.prettyPrintMessage)({
                        msg: response.headers['sap-message'],
                        log: this.log,
                        host,
                        isDest: this.isDest
                    });
                }
                return response;
            }
            else {
                this.log.warn(`Application ${bsp.name} not found, nothing to undeploy.`);
                return undefined;
            }
        }
        catch (error) {
            (0, message_1.logError)({ error, host, log: this.log });
            throw error;
        }
    }
    /**
     * Translate the technical ABAP on BTP URL to the frontend URL.
     *
     * @returns url to be used in the browser.
     */
    getAbapFrontendUrl() {
        const url = new URL(this.publicUrl);
        exports.abapUrlReplaceMap.forEach((value, key) => {
            url.hostname = url.hostname.replace(key, value);
        });
        return `${url.protocol}//${url.host}`;
    }
    /**
     * Internal helper method to generate a request configuration (headers, parameters).
     *
     * @param transport optional transport request id
     * @param testMode optional url parameter to enable test mode
     * @param safeMode optional url parameter to disable the safe model (safemode=false)
     * @returns the Axios response object for further processing
     */
    createConfig(transport, testMode, safeMode) {
        const headers = {
            'Content-Type': 'application/atom+xml',
            type: 'entry',
            charset: 'UTF8'
        };
        const params = {
            CodePage: `'UTF8'`,
            CondenseMessagesInHttpResponseHeader: 'X',
            format: 'json'
        };
        if (transport) {
            params.TransportRequest = transport;
        }
        if (testMode) {
            params.TestMode = true;
        }
        if (safeMode !== undefined) {
            params.SafeMode = safeMode;
        }
        // `axios` does not properly pass the default values of `maxBodyLength` and `maxContentLength`
        // to `follow-redirects`: https://github.com/axios/axios/issues/4263
        // Without this `follow-redirects` limits the max body length to 10MB and fails with the following
        // message: “Request body larger than maxBodyLength limit”.
        // Set both to infinity. It's the backend's responsibilty to reject messages sizes it cannot handle
        const maxBodyLength = Infinity;
        const maxContentLength = Infinity;
        return { headers, params, maxBodyLength, maxContentLength };
    }
    /**
     * Create the request payload for a deploy request.
     *
     * @param archive archive as buffer
     * @param name application name
     * @param description description for the deployed app
     * @param abapPackage ABAP package containing the app
     * @returns XML based request payload
     */
    createPayload(archive, name, description, abapPackage) {
        const base64Data = archive.toString('base64');
        const time = new Date().toISOString();
        const escapedName = encodeXmlValue(name);
        return (`<entry xmlns="http://www.w3.org/2005/Atom"` +
            `       xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"` +
            `       xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices"` +
            `       xml:base="${this.publicUrl}">` +
            `  <id>${this.publicUrl}/Repositories('${escapedName}')</id>` +
            `  <title type="text">Repositories('${escapedName}')</title>` +
            `  <updated>${time}</updated>` +
            `  <category term="/UI5/ABAP_REPOSITORY_SRV.Repository" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/>` +
            `  <link href="Repositories('${escapedName}')" rel="edit" title="Repository"/>` +
            `  <content type="application/xml">` +
            `    <m:properties>` +
            `      <d:Name>${escapedName}</d:Name>` +
            `      <d:Package>${abapPackage?.toUpperCase()}</d:Package>` +
            `      <d:Description>${encodeXmlValue(description)}</d:Description>` +
            `      <d:ZipArchive>${base64Data}</d:ZipArchive>` +
            `      <d:Info/>` +
            `    </m:properties>` +
            `  </content>` +
            `</entry>`);
    }
    /**
     * Send a request to the backed to create or update an application.
     *
     * @param isExisting app has already been deployed
     * @param appName application name
     * @param payload request payload
     * @param config additional request config
     * @param tryCount number of attempted deploys (sometimes a repo request fails with a known timeout issue, so we retry)
     * @returns the Axios response object for further processing
     */
    async updateRepoRequest(isExisting, appName, payload, config, tryCount = 1) {
        try {
            // Was the app deployed after the first failed attempt?
            if (tryCount === 2) {
                this.log.warn('Warning: The BSP application deployment timed out while waiting for a response from the backend. This may indicate the deployment was not finished. To resolve this, consider increasing the value of the HTML5.Timeout property for the destination.');
            }
            let hasBeenUpdated = isExisting; // Default for first request
            if (tryCount !== 1) {
                /**
                 * On the second try (tryCount = 2), the `getInfo` method may
                 * retrieve partial information because some data may now exist in the
                 * app after an initial timeout during the first attempt.
                 *
                 * We then attempt to update repository and return a response.
                 * If this attempt also fails, then on the third try (tryCount = 3),
                 * the user will receive an error.
                 */
                hasBeenUpdated = (await this.getInfo(appName)) !== undefined;
            }
            this.log.info(`${appName} found on target system: ${hasBeenUpdated}`);
            return hasBeenUpdated
                ? await this.put(`/Repositories('${encodeURIComponent(appName)}')`, payload, config)
                : await this.post('/Repositories', payload, config);
        }
        catch (error) {
            // Known ABAP timeout exception codes should re-trigger a deployment again to confirm the app was deployed
            if ([504, 408].includes(error?.response?.status)) {
                // Kill the flow after three attempts
                if (tryCount >= 3) {
                    throw error;
                }
                return this.updateRepoRequest(isExisting, appName, payload, config, tryCount + 1);
            }
            else if (config?.params?.TestMode) {
                // TestMode returns HTTP 403 but includes details of the uploaded files and request
                return error.response;
            }
            else {
                throw error;
            }
        }
    }
    /**
     * Send a request to the backend to delete an application.
     *
     * @param appName application name
     * @param config additional request config
     * @param tryCount number of attempted deploys (sometimes a repo request fails with a known timeout issue, so we retry)
     * @returns the Axios response object for further processing
     */
    async deleteRepoRequest(appName, config, tryCount = 1) {
        try {
            if (tryCount === 2) {
                this.log.warn('Warning: retry undeploy to handle a backend rejection...');
            }
            return await this.delete(`/Repositories('${encodeURIComponent(appName)}')`, config);
        }
        catch (error) {
            if (error?.response?.status === 400) {
                // Kill the flow after 1 attempt
                if (tryCount >= 2) {
                    throw error;
                }
                return this.deleteRepoRequest(appName, config, tryCount + 1);
            }
            else {
                throw error;
            }
        }
    }
}
exports.Ui5AbapRepositoryService = Ui5AbapRepositoryService;
//# sourceMappingURL=ui5-abap-repository-service.js.map