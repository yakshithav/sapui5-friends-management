"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppIndexService = void 0;
const axios_1 = require("axios");
/**
 * A class representing the app index service allowing to search applications deployed on an ABAP system.
 */
class AppIndexService extends axios_1.Axios {
    static PATH = '/sap/bc/ui2/app_index';
    log;
    /**
     * Returns list of applications matching the search query from the catalog service.
     *
     * @param searchParams key/value list of search parameters
     * @param resultFields list of fields that should be used for the response
     * @returns list of applications
     */
    async search(searchParams = {}, resultFields) {
        const params = Object.assign({}, searchParams);
        if (resultFields) {
            params['fields'] = resultFields.join(',');
        }
        const response = await this.get('/', { params });
        return JSON.parse(response.data).results;
    }
    /**
     * Check for a given app id whether the manifest first is supported.
     *
     * @param {string} appId - The id of the app.
     * @returns {Promise<boolean>} - "true" for apps supporting manifest first which are apps with minUI5Version at least 1.30 and not scaffolding-based (i.e. dependency to sap.ca.scfld.md library), otherwise it returns "false".
     */
    async getIsManiFirstSupported(appId) {
        try {
            const params = {
                'id': appId
            };
            const response = await this.get('/ui5_app_mani_first_supported', { params });
            const isManiFirstSupported = JSON.parse(response.data);
            return isManiFirstSupported;
        }
        catch (error) {
            this.log.error(`Fail fetching ui5_app_mani_first_supported for app with id: ${appId}.`);
            this.log.debug(error);
            throw error;
        }
    }
    /**
     * Gets the app info for the specified id.
     *
     * @param {string} appId - The id of the app.
     * @returns {Promise<Ui5AppInfo>} App info.
     */
    async getAppInfo(appId) {
        try {
            const response = await this.get('/ui5_app_info_json', { params: { id: appId } });
            return JSON.parse(response.data);
        }
        catch (error) {
            if ((0, axios_1.isAxiosError)(error)) {
                this.log.error(`Failed fetching ui5_app_info_json for app with id ${appId}.`);
            }
            else {
                this.log.error(`Parsing error: ui5_app_info_json is not in expected format for app with id ${appId}.`);
            }
            this.log.debug(error);
            throw error;
        }
    }
}
exports.AppIndexService = AppIndexService;
//# sourceMappingURL=app-index-service.js.map