"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayeredRepositoryService = exports.AdaptationProjectType = void 0;
const axios_1 = require("axios");
const fs_1 = require("fs");
const url_1 = require("url");
const logger_1 = require("@sap-ux/logger");
const odata_request_error_1 = require("../base/odata-request-error");
const message_1 = require("./message");
const qs_1 = __importDefault(require("qs"));
/**
 * All available adaptation project types from system.
 */
var AdaptationProjectType;
(function (AdaptationProjectType) {
    AdaptationProjectType["ON_PREMISE"] = "onPremise";
    AdaptationProjectType["CLOUD_READY"] = "cloudReady";
})(AdaptationProjectType || (exports.AdaptationProjectType = AdaptationProjectType = {}));
/**
 * Returns the namespace as string.
 *
 * @param namespace either as string or as object
 * @returns serialized namespace
 */
function getNamespaceAsString(namespace) {
    return typeof namespace !== 'string' ? `apps/${namespace['reference']}/appVariants/${namespace['id']}/` : namespace;
}
/**
 * Check if a variable is a buffer.
 *
 * @param input variable to be checked
 * @returns true if the input is a buffer
 */
function isBuffer(input) {
    return input.BYTES_PER_ELEMENT !== undefined;
}
/**
 * Decodes url parameters.
 *
 * @param params An object containing the parameters to be decoded.
 * @returns The decoded parameters as a string.
 */
const decodeUrlParams = (params) => decodeURIComponent(params.toString());
/**
 * Path suffix for all DTA actions.
 */
const DTA_PATH_SUFFIX = '/dta_folder/';
/**
 * A class representing the design time adaptation service allowing to deploy adaptation projects to an ABAP system.
 */
class LayeredRepositoryService extends axios_1.Axios {
    static PATH = '/sap/bc/lrep';
    log;
    /**
     * Simple request to fetch a CSRF token required for all writing operations.
     *
     * @returns the response
     */
    async getCsrfToken() {
        try {
            return await this.get('/actions/getcsrftoken/');
        }
        catch (error) {
            if ((0, odata_request_error_1.isAxiosError)(error)) {
                this.tryLogResponse(error.response);
            }
            throw error;
        }
    }
    /**
     * Merge a given app descriptor variant with the stord app descriptor.
     *
     * @param appDescriptorVariant zip file containing an app descriptor variant
     * @param workspacePath value for workspacePath URL parameter
     * @returns a promise with an object containing merged app descriptors with their id as keys.
     */
    async mergeAppDescriptorVariant(appDescriptorVariant, workspacePath) {
        const path = '/appdescr_variant_preview/';
        const params = new url_1.URLSearchParams(this.defaults?.params);
        if (workspacePath) {
            params.append('workspacePath', workspacePath);
        }
        try {
            const response = await this.put(path, appDescriptorVariant, {
                paramsSerializer: decodeUrlParams,
                params,
                headers: {
                    'Content-Type': 'application/zip'
                }
            });
            return JSON.parse(response.data);
        }
        catch (error) {
            if ((0, odata_request_error_1.isAxiosError)(error)) {
                this.tryLogResponse(error.response);
            }
            throw error;
        }
    }
    /**
     * Check whether a variant with the given namespace already exists.
     *
     * @param namespace either as string or as object
     * @param [layer] optional layer
     * @returns the Axios response object for further processing
     */
    async isExistingVariant(namespace, layer = 'CUSTOMER_BASE') {
        try {
            const response = await this.get(DTA_PATH_SUFFIX, {
                params: {
                    name: getNamespaceAsString(namespace),
                    layer,
                    timestamp: Date.now()
                }
            });
            this.tryLogResponse(response);
            return response;
        }
        catch (error) {
            if ((0, odata_request_error_1.isAxiosError)(error)) {
                this.tryLogResponse(error.response);
                if (error.response?.status === 404) {
                    return error.response;
                }
            }
            throw error;
        }
    }
    /**
     * Deploy the given archive either by creating a new folder in the layered repository or updating an existing one.
     *
     * @param archive path to a zip archive or archive as buffer containing the adaptation project
     * @param config adataption project deployment configuration
     * @returns the Axios response object for futher processing
     */
    async deploy(archive, config) {
        const data = isBuffer(archive) ? archive : (0, fs_1.readFileSync)(archive);
        const checkResponse = await this.isExistingVariant(config.namespace);
        const params = {
            name: getNamespaceAsString(config.namespace),
            layer: config.layer ?? 'CUSTOMER_BASE'
        };
        params['package'] = config.package ?? '$TMP';
        if (params['package'].toUpperCase() !== '$TMP') {
            params['changelist'] = config.transport;
        }
        try {
            const response = await this.request({
                method: checkResponse.status === 200 ? 'PUT' : 'POST',
                url: DTA_PATH_SUFFIX,
                data,
                params,
                headers: {
                    'Content-Type': 'application/octet-stream'
                }
            });
            this.tryLogResponse(response, 'Deployment successful.');
            return response;
        }
        catch (error) {
            (0, message_1.logError)({ error, log: this.log });
            throw error;
        }
    }
    /**
     * Undeploy the archive identified by the configuration.
     *
     * @param config adaptation project deployment configuration
     * @returns the Axios response object for further processing
     */
    async undeploy(config) {
        const checkResponse = await this.isExistingVariant(config.namespace);
        if (checkResponse.status !== 200) {
            throw new Error('Undeploy failed because the given project does not exist.');
        }
        const params = {
            name: getNamespaceAsString(config.namespace),
            layer: config.layer ?? 'CUSTOMER_BASE'
        };
        if (config.transport) {
            params['changelist'] = config.transport;
        }
        try {
            const response = await this.delete(DTA_PATH_SUFFIX, { params });
            this.tryLogResponse(response, 'Undeployment successful.');
            return response;
        }
        catch (error) {
            this.log.error('Undeployment failed');
            this.log.debug(error);
            if ((0, odata_request_error_1.isAxiosError)(error) && error.response?.status === 405) {
                this.log.error('Newer version of SAP_UI required, please check https://help.sap.com/docs/bas/developing-sap-fiori-app-in-sap-business-application-studio/delete-adaptation-project');
            }
            throw error;
        }
    }
    /**
     * Get system info.
     *
     * @param language language code (default: EN)
     * @param cloudPackage name
     * @param appId application id (since ABAP Platform Cloud 2505)
     * @returns the system info object
     */
    async getSystemInfo(language = 'EN', cloudPackage, appId) {
        try {
            const params = {
                'sap-language': language
            };
            if (cloudPackage) {
                params['package'] = cloudPackage;
            }
            if (appId) {
                params['sap-app-id'] = appId;
            }
            const response = await this.get(`${DTA_PATH_SUFFIX}system_info`, {
                params,
                paramsSerializer: (params) => qs_1.default.stringify(params, { encode: false })
            });
            this.tryLogResponse(response, 'Successful getting system info.');
            return JSON.parse(response.data);
        }
        catch (error) {
            this.log.error('Getting system data failed.');
            this.log.debug(error);
            throw error;
        }
    }
    /**
     * Try parsing the response and log the result. If the parsing fails and an alternative is provided, log it instead.
     *
     * @param response axios response from the LREP service
     * @param alternativeMessage optional alternative message if the response cannot be parsed
     */
    tryLogResponse(response, alternativeMessage) {
        try {
            const info = response.data ? JSON.parse(response.data) : {};
            if (info.result) {
                this.logMessage(info.result);
            }
            (info.messages ?? []).forEach((message) => {
                this.logMessage(message);
            });
        }
        catch (error) {
            if (alternativeMessage) {
                this.log.info(alternativeMessage);
            }
            this.log.warn('Could not parse returned messages.');
        }
    }
    /**
     * Log a message from the backend.
     *
     * @param msg message to be logged
     */
    logMessage(msg) {
        const level = msg.severity === 'Error' ? logger_1.LogLevel.Error : logger_1.LogLevel.Info;
        this.log.log({ level, message: msg.text });
        (msg.details ?? []).forEach((message) => {
            this.log.log({ level, message });
        });
    }
}
exports.LayeredRepositoryService = LayeredRepositoryService;
//# sourceMappingURL=lrep-service.js.map