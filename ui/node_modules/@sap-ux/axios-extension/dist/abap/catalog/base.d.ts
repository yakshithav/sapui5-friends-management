import type { ODataVersion } from '../../base/odata-service';
import { ODataService } from '../../base/odata-service';
export declare const ServiceType: {
    readonly UI: "UI";
    readonly NotClassified: "Not Classified";
    readonly WebApi: "WEB_API";
    readonly NotDetermined: "Not Determined";
};
export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
export interface ODataServiceInfo {
    id: string;
    name: string;
    group?: string;
    path: string;
    odataVersion: ODataVersion;
    serviceVersion: string;
    serviceType?: ServiceType;
}
/**
 * Structure representing annotations (including their definitions)
 */
export interface Annotations {
    TechnicalName: string;
    Version: string;
    Definitions: string;
    Uri: string;
}
/**
 * Filter options to search for annotations
 */
export interface FilterOptions {
    id?: string;
    title?: string;
    path?: string;
}
/**
 * OData version independent abstract base class of SAP's catalog service
 */
export declare abstract class CatalogService extends ODataService {
    entitySet: string;
    services: ODataServiceInfo[];
    isS4Cloud: Promise<boolean>;
    protected abstract fetchServices(): Promise<ODataServiceInfo[]>;
    /**
     * Returns list of services from the catalog service.
     *
     * @returns list of services
     */
    listServices(): Promise<ODataServiceInfo[]>;
    abstract getAnnotations({ id, title, path }: FilterOptions): Promise<Annotations[]>;
    abstract getServiceType(path: string): Promise<ServiceType | undefined>;
}
//# sourceMappingURL=base.d.ts.map