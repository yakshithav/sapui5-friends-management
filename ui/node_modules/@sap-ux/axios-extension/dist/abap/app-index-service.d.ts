import type { Service } from '../base/service-provider';
import { Axios } from 'axios';
import type { Logger } from '@sap-ux/logger';
export interface App extends Record<string, unknown> {
    [key: string]: string | string[];
    'sap.app/id': string;
    'sap.app/title': string;
    'sap.fiori/registrationIds': string[];
    'sap.app/ach': string;
    fileType: string;
    repoName: string;
    url: string;
}
export type AppIndex = Partial<App>[];
export type AsyncHintsLib = {
    name: string;
};
export type AsyncHintsRequest = {
    name: string;
    reference: string;
};
export type Ui5AppInfo = Record<string, Ui5AppInfoContent>;
export interface Ui5AppInfoContent {
    name: string;
    url: string;
    manifestUrl?: string;
    manifest?: string;
    asyncHints: {
        libs: AsyncHintsLib[];
        requests: AsyncHintsRequest[];
    };
}
/**
 * A class representing the app index service allowing to search applications deployed on an ABAP system.
 */
export declare abstract class AppIndexService extends Axios implements Service {
    static readonly PATH = "/sap/bc/ui2/app_index";
    log: Logger;
    /**
     * Returns list of applications matching the search query from the catalog service.
     *
     * @param searchParams key/value list of search parameters
     * @param resultFields list of fields that should be used for the response
     * @returns list of applications
     */
    search(searchParams?: {
        [property: string]: string;
    }, resultFields?: string[]): Promise<AppIndex>;
    /**
     * Check for a given app id whether the manifest first is supported.
     *
     * @param {string} appId - The id of the app.
     * @returns {Promise<boolean>} - "true" for apps supporting manifest first which are apps with minUI5Version at least 1.30 and not scaffolding-based (i.e. dependency to sap.ca.scfld.md library), otherwise it returns "false".
     */
    getIsManiFirstSupported(appId: string): Promise<boolean>;
    /**
     * Gets the app info for the specified id.
     *
     * @param {string} appId - The id of the app.
     * @returns {Promise<Ui5AppInfo>} App info.
     */
    getAppInfo(appId: string): Promise<Ui5AppInfo>;
}
//# sourceMappingURL=app-index-service.d.ts.map