"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UiServiceGenerator = void 0;
const services_1 = require("../services");
/**
 *
 */
class UiServiceGenerator extends services_1.AdtService {
    referencedObject;
    contentType;
    /**
     * Configure the UI service generator.
     *
     * @param _config - The generator configuration.
     * @param referencedObject - The referenced object (business object or abap cds view).
     * @param contentType - The header accept type for content.
     */
    configure(_config, referencedObject, contentType) {
        this.referencedObject = referencedObject;
        this.contentType = contentType;
    }
    /**
     * Get the schema of the service binding.
     *
     * @returns The schema of the service binding.
     */
    async getSchema() {
        const response = await this.get('/schema', {
            headers: {
                Accept: 'application/vnd.sap.adt.repository.generator.schema.v1+json'
            },
            params: {
                referencedObject: this.referencedObject.uri
            }
        });
        return JSON.parse(response.data);
    }
    /**
     * Get the content of the service binding.
     *
     * @param pckg - The package name.
     * @returns The content of the service binding.
     */
    async getContent(pckg) {
        const response = await this.get('/content', {
            headers: {
                Accept: this.contentType
            },
            params: {
                referencedObject: this.referencedObject.uri,
                package: pckg
            }
        });
        const content = response.data;
        const contentObj = JSON.parse(content);
        if (!contentObj['metadata']) {
            contentObj['metadata'] = {
                package: pckg
            };
        }
        return JSON.stringify(contentObj);
    }
    /**
     * Validate the package before generation.
     *
     * @param pckg - The package to be validated.
     * @returns The response of the validation.
     */
    async validatePackage(pckg) {
        const response = await this.get('/validation', {
            headers: {
                Accept: 'application/vnd.sap.adt.validationMessages.v1+xml'
            },
            params: {
                referencedObject: this.referencedObject.uri,
                package: pckg,
                checks: 'package'
            }
        });
        return this.parseResponse(response.data);
    }
    /**
     * Validate the service content and package before generation.
     *
     * @param content - The content to be validated.
     * @returns The response of the validation.
     */
    async validateContent(content) {
        const response = await this.post('/validation', content, {
            headers: {
                'Content-Type': this.contentType,
                Accept: 'application/vnd.sap.adt.validationMessages.v1+xml'
            },
            params: {
                referencedObject: this.referencedObject.uri,
                checks: 'package,referencedobject,authorization'
            }
        });
        const data = this.parseResponse(response.data);
        return data.validationMessages?.validationMessage;
    }
    /**
     * Generate the service binding.
     *
     * @param content - The content of the service binding.
     * @param transport - The transport.
     * @returns The object references.
     */
    async generate(content, transport) {
        const response = await this.post('', content, {
            headers: {
                'Content-Type': this.contentType,
                Accept: 'application/vnd.sap.adt.repository.generator.v1+json, application/vnd.sap.as+xml;charset=UTF-8;dataname=com.sap.adt.StatusMessage'
            },
            params: {
                referencedObject: this.referencedObject.uri,
                corrNr: transport
            }
        });
        return this.parseResponse(response.data);
    }
}
exports.UiServiceGenerator = UiServiceGenerator;
//# sourceMappingURL=ui-service-generator.js.map