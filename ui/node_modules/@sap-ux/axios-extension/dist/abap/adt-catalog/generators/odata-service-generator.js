"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataServiceGenerator = void 0;
const services_1 = require("../services");
/**
 * Extension of the Generator service to generate OData services
 */
class ODataServiceGenerator extends services_1.AdtService {
    /**
     * package to be used for generated objects
     */
    packageName;
    contentType;
    /**
     * Configure the UI service generator.
     *
     * @param _config - The generator configuration.
     * @param packageName - package to be used for generated objects
     */
    configure(_config, packageName) {
        this.packageName = packageName;
    }
    /**
     * Set the content type to be used for post requests of genertor.
     *
     * @param contentType - content type to be used for generated objects
     */
    setContentType(contentType) {
        this.contentType = contentType;
    }
    /**
     * Validates input for OData Service generation.
     *
     * @param input - JSON string
     * @returns messages
     */
    async validate(input) {
        const response = await this.post(`/validation`, input, {
            headers: {
                'Content-Type': this.contentType,
                Accept: 'application/vnd.sap.adt.validationMessages.v1+xml, application/vnd.sap.as+xml;charset=UTF-8;dataname=com.sap.adt.StatusMessage'
            },
            params: {
                package: this.packageName
            }
        });
        return this.parseValidateResponse(response.data);
    }
    /**
     * Gets technical details of (to be generated) OData service.
     * - this is a workaround for the missing service definition name in the generator response
     * - actual name might be different e.g. because of name collisions at the time when the actual generation is called.
     *
     * @param input - JSON string
     * @returns technical name of service definition
     */
    async getTechnicalDetails(input) {
        const response = await this.post(`/preview`, input, {
            headers: {
                'Content-Type': this.contentType,
                Accept: 'application/vnd.sap.adt.repository.objects.massoperation.v1+xml'
            },
            params: {
                package: this.packageName
            }
        });
        return this.parsePreviewResponse(response.data);
    }
    /**
     * Generates OData Service.
     *
     * @param input - JSON string
     * @returns HTTP status code as number
     * @throws Error if the generation fails
     */
    async generate(input) {
        const response = await this.post(``, input, {
            headers: {
                'Content-Type': this.contentType,
                'Accept': 'application/vnd.sap.adt.repository.generator.v1+json'
            },
            params: {
                package: this.packageName
            }
        });
        // return http status code as number
        return response.status;
    }
    /**
     * Parse an xml document for validation messages.
     *
     * @param xml response for "validation" request
     * @returns messages
     */
    parseValidateResponse(xml) {
        const parsed = this.parseResponse(xml);
        let validationMessages = parsed.validationMessages;
        if (!Array.isArray(validationMessages)) {
            validationMessages = [validationMessages];
        }
        return validationMessages.map((entry) => entry.validationMessage || {}) || [];
    }
    /**
     * Parse an XML document to find the technical name of the service definition.
     *
     * @param xml response for "preview" request
     * @returns technical details of service definition
     */
    parsePreviewResponse(xml) {
        const parsed = this.parseResponse(xml);
        const serviceLayerGroup = (parsed.group.group || []).find((entry) => entry.name === 'Business Service Layer');
        if (!serviceLayerGroup) {
            return;
        }
        const objects = !Array.isArray(serviceLayerGroup.object)
            ? [serviceLayerGroup.object]
            : serviceLayerGroup.object;
        const serviceObject = objects.find((entry) => entry.objectReference?.type === 'SRVD/SRV');
        const serviceBindingObject = objects.find((entry) => entry.objectReference?.type === 'SRVB/SVB');
        if (!serviceObject || !serviceBindingObject) {
            return;
        }
        return {
            serviceName: serviceBindingObject.objectReference?.name || '',
            serviceDefinitionName: serviceObject.objectReference?.name || '',
            serviceVersion: '0001'
        };
    }
}
exports.ODataServiceGenerator = ODataServiceGenerator;
//# sourceMappingURL=odata-service-generator.js.map