"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportChecksService = void 0;
const adt_service_1 = require("./adt-service");
const types_1 = require("../../types");
const fast_xml_parser_1 = require("fast-xml-parser");
const xpath = __importStar(require("xpath"));
const xmldom_1 = require("@xmldom/xmldom");
/**
 * TransportChecksService implements ADT requests for fetching a list of available transport requests
 * for a given package name and a given app name.
 */
class TransportChecksService extends adt_service_1.AdtService {
    /**
     * @see AdtService.getAdtCatagory()
     */
    static adtCategory = {
        scheme: 'http://www.sap.com/adt/categories/cts',
        term: 'transportchecks'
    };
    /**
     * @see AdtService.getAdtCatagory()
     * @returns AdtCategory
     */
    static getAdtCatagory() {
        return TransportChecksService.adtCategory;
    }
    static LocalPackageError = 'LocalPackageError';
    /**
     * TransportChecksService API function to fetch a list of available transport requests.
     *
     * @param packageName Package name for deployment
     * @param appName Fiori project name for deployment. A new project that has not been deployed before is also allowed
     * @returns A list of transport requests that can be used for deploy
     */
    async getTransportRequests(packageName, appName) {
        const acceptHeaders = {
            headers: {
                Accept: 'application/vnd.sap.as+xml; dataname=com.sap.adt.transport.service.checkData',
                'content-type': 'application/vnd.sap.as+xml; charset=UTF-8; dataname=com.sap.adt.transport.service.checkData'
            }
        };
        const data = `
                <?xml version="1.0" encoding="UTF-8"?>
                <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
                    <asx:values>
                        <DATA>
                        <PGMID/>
                        <OBJECT/>
                        <OBJECTNAME/>
                        <DEVCLASS>${packageName}</DEVCLASS>
                        <SUPER_PACKAGE/>
                        <OPERATION>I</OPERATION>
                        <URI>/sap/bc/adt/filestore/ui5-bsp/objects/${encodeURIComponent(appName)}/$create</URI>
                        </DATA>
                    </asx:values>
                </asx:abap>
            `;
        const response = await this.post('', data, acceptHeaders);
        return this.getTransportRequestList(response.data);
    }
    /**
     * Get a list of valid transport requests
     * from ADT transportcheckes response response.
     *
     * @param xml Raw XML string from ADT transportcheckes reponse data
     * @returns a list of valid transport requests can be used for deploy config
     */
    getTransportRequestList(xml) {
        if (fast_xml_parser_1.XMLValidator.validate(xml) !== true) {
            this.log.warn(`Invalid XML: ${xml}`);
            return [];
        }
        const doc = new xmldom_1.DOMParser().parseFromString(xml);
        const status = xpath.select1('//RESULT/text()', doc)?.toString();
        switch (status) {
            case 'S':
                return this.getTransportList(doc);
            case 'E':
                this.logErrorMsgs(doc);
                return [];
            default:
                this.log.warn(`Unknown response content: ${xml}`);
                return [];
        }
    }
    /**
     * Parses the document to find and log the <CTS_MESSAGE> with severity 'E' in <MESSAGES>.
     *
     * @param doc document
     */
    logErrorMsgs(doc) {
        const messages = doc.getElementsByTagName('CTS_MESSAGE');
        for (const msg of Array.from(messages)) {
            if (msg.getElementsByTagName('SEVERITY')[0]?.textContent === 'E') {
                const text = msg.getElementsByTagName('TEXT')[0]?.textContent;
                this.log.error(text);
            }
        }
    }
    /**
     * Provide a list of transport requests available for the input package name and project name
     * in a ADT CTS request.
     *
     * @param doc document
     * @returns A list of transport requests
     * @throws For errors or other unkonwn reasons no transport number found, an error is thrown.
     * If error message equals TransportChecksService.LocalPackageError, it indicates the input
     * package is a local package and no transport request is required.
     * @see TransportChecksService.LocalPackageError
     */
    getTransportList(doc) {
        const recording = xpath.select1('//RECORDING/text()', doc)?.toString();
        const locked = xpath.select1('//LOCKS', doc)?.textContent;
        const localPackage = xpath.select1('//DLVUNIT/text()', doc)?.toString();
        if (recording && !locked) {
            return this.getTransportListForNewProject(doc);
        }
        else if (locked) {
            return this.getLockedTransport(doc);
        }
        else if (types_1.LocalPackageText.includes(localPackage)) {
            throw new Error(TransportChecksService.LocalPackageError);
        }
        else {
            throw new Error('Unable to parse ADT response');
        }
    }
    /**
     * This function processes ADT response for new project name that have not been deployed before,
     * all the available transport requests are returned.
     *
     * @param doc document
     * @returns transport numbers
     */
    getTransportListForNewProject(doc) {
        const transportReqs = xpath.select('//REQ_HEADER', doc);
        const list = [];
        if (transportReqs && transportReqs.length > 0) {
            for (const transportReqEle of transportReqs) {
                const transportReq = this.convertTransportRequest(transportReqEle);
                if (transportReq) {
                    list.push(transportReq);
                }
            }
        }
        return list;
    }
    /**
     * This function processes ADT response for existing project name that has been locked.
     * A single, previously provided transport requests is returned in the list.
     *
     * @param doc document
     * @returns transport numbers
     */
    getLockedTransport(doc) {
        const transportReqEle = xpath.select1('//LOCKS//REQ_HEADER', doc);
        const transportReq = this.convertTransportRequest(transportReqEle);
        if (transportReq) {
            return [transportReq];
        }
        else {
            return [];
        }
    }
    /**
     * Convert transport request in XML element of ADT response to typed object.
     *
     * @param transportReqEle XML element of transport request data in ADT response
     * @returns JSON object format of input XML element
     */
    convertTransportRequest(transportReqEle) {
        if (!transportReqEle) {
            return undefined;
        }
        const transportNumber = xpath.select1('TRKORR/text()', transportReqEle)?.toString();
        if (!transportNumber) {
            return undefined;
        }
        return {
            transportNumber: transportNumber,
            user: xpath.select1('AS4USER/text()', transportReqEle)?.toString(),
            description: xpath.select1('AS4TEXT/text()', transportReqEle)?.toString(),
            client: xpath.select1('CLIENT/text()', transportReqEle)?.toString(),
            targetSystem: xpath.select1('TARSYSTEM/text()', transportReqEle)?.toString()
        };
    }
}
exports.TransportChecksService = TransportChecksService;
//# sourceMappingURL=transportcheck-service.js.map