"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessObjectsService = void 0;
const adt_service_1 = require("./adt-service");
/**
 * BusinessObjectsService implements ADT requests to obtain the list of business objects.
 */
class BusinessObjectsService extends adt_service_1.AdtService {
    /**
     * @see AdtService.getAdtCatagory()
     */
    static adtCategory = {
        scheme: 'http://www.sap.com/adt/categories/respository',
        term: 'search'
    };
    /**
     * Get ADT scheme ID.
     *
     * @returns AdtCategory
     */
    static getAdtCatagory() {
        return BusinessObjectsService.adtCategory;
    }
    /**
     * Get all business objects from ADT service.
     *
     * @param maxResults - The maximum number of business objects to be returned.
     * @returns A list of business objects.
     */
    async getBusinessObjects(maxResults = 10000) {
        const config = {
            headers: {
                Accept: 'application/xml'
            },
            params: {
                operation: 'quickSearch',
                query: `*`,
                maxResults: maxResults,
                objectType: 'BDEF',
                releaseState: 'USE_IN_CLOUD_DEVELOPMENT'
            }
        };
        const response = await this.get('', config);
        return this.parseBOResponse(response.data);
    }
    /**
     * Parse the XML document of business object entries from ADT service.
     *
     * @param xml xml document containing business object entries.
     * @returns A list of business object names.
     */
    parseBOResponse(xml) {
        const parsed = this.parseResponse(xml);
        let boArray = [];
        if (parsed?.objectReferences?.objectReference) {
            if (Array.isArray(parsed.objectReferences.objectReference)) {
                boArray = parsed.objectReferences.objectReference;
            }
            else {
                boArray = [parsed.objectReferences.objectReference];
            }
        }
        return boArray.map((item) => {
            const { name, uri, description } = item;
            return { name, uri, description };
        });
    }
}
exports.BusinessObjectsService = BusinessObjectsService;
//# sourceMappingURL=businessobjects-service.js.map