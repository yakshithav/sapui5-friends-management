"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReentranceTicket = getReentranceTicket;
const open = require("open");
const connection_1 = require("../connection");
const abap_system_1 = require("./abap-system");
const redirect_1 = require("./redirect");
/**
 * DO NOT USE THIS SERVICE ENDPOINT DIRECTLY.
 * It might be removed in the future without notice.
 */
const ADT_REENTRANCE_ENDPOINT = '/sap/bc/sec/reentrance';
/**
 * Get the reentrance ticket from the backend.
 *
 * @param options options
 * @param options.backendUrl backend Url
 * @param options.logger  logger
 * @param options.timeout timeout in milliseconds
 */
async function getReentranceTicket({ backendUrl, logger, timeout = connection_1.defaultTimeout }) {
    return new Promise((resolve, reject) => {
        const backend = new abap_system_1.ABAPSystem(backendUrl);
        // Start local server to listen to redirect call, with timeout
        const { server, redirectUrl } = (0, redirect_1.setupRedirectHandling)({ resolve, reject, timeout, backend, logger });
        server.listen();
        const redirectPort = server.address().port;
        // Open browser to handle SAML flow and return the reentrance ticket
        const scenario = process.env.FIORI_TOOLS_SCENARIO ?? 'FTO1';
        const endpoint = process.env.FIORI_TOOLS_REENTRANCE_ENDPOINT ?? ADT_REENTRANCE_ENDPOINT;
        const url = `${backend.uiHostname()}${endpoint}?scenario=${scenario}&redirect-url=${redirectUrl(redirectPort)}`;
        open(url)?.catch((error) => logger.error(error));
    });
}
//# sourceMappingURL=index.js.map