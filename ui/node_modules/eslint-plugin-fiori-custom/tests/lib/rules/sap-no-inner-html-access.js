/**
 * @fileoverview Rule to detect overriding of an elements inner html.
 * @author Christopher Fenner / D065687
 * @ESLint Version 0.8.0 / March 2016
 */

// ------------------------------------------------------------------------------
// Invoking global form of strict mode syntax for whole script
// ------------------------------------------------------------------------------
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var rule = require("../../../lib/rules/sap-no-inner-html-access.js"),

    RuleTester = require("eslint").RuleTester;


//------------------------------------------------------------------------------
// Tests
//------------------------------------------------------------------------------

var ruleTester = new RuleTester();
var errorMessage = "Accessing the inner html is not recommended.";
ruleTester.run("sap-no-inner-html-access", rule, 
                {
                    valid: [
                            "innerHTML = new sap.ui.model.json.JSONModel();",
                            "var issueModel = new sap.ui.model.json.JSONModel();issueModel.something.onAfterRendering = function render(){foo.bar = 1;};",
                            "var oButton5 = new sap.mX.Button(); oButton5.setMe = function render(){foo.bar = 1;}"
                    ],
                    invalid: [
                        {
                            code: "oControl.$().find('.sapMLabe')[0].innerHTML = 'reallybad';",
                            errors: [
                                {
                                    message: errorMessage,
                                    type: "MemberExpression"
                                }
                            ]
                        },
                        {
                            code: "test['innerHTML'] = 'reallybad';",
                            errors: [
                                {
                                    message: errorMessage,
                                    type: "MemberExpression"
                                }
                            ]
                        },
                        {
                            code: "if('test' === test['innerHTML']){;}",
                            errors: [
                                {
                                    message: errorMessage,
                                    type: "MemberExpression"
                                }
                            ]
                        },
                        {
                            code: "if('test' === test['innerHTML']){;}",
                            errors: [
                                {
                                    message: errorMessage,
                                    type: "MemberExpression"
                                }
                            ]
                        }
                    ]
                });
