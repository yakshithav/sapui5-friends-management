/**
 * @fileoverview Rule to ensure the correct usage ot the auto refresh interval options for sap.ushell.ui.footerbar.AddBookmarkButton.
 * @author Christopher Fenner - D065687
 * @ESLint Version 0.8.0 / April 2016
 */

// ------------------------------------------------------------------------------
// Rule Disablement
// ------------------------------------------------------------------------------
/* eslint-disable strict */
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------
module.exports = {
    create: function(context) {
        "use strict";
        var MSG = "A value of more than 0 and less than 300 for the property serviceRefreshIntervall may result in performance limitations.";
        var MIN = 0;
        var MAX = 300;
        var INTERESTING_KEY = "serviceRefreshInterval";
        var INTERESTING_METHODS = ["setServiceRefreshInterval", "setAppData"];

        // --------------------------------------------------------------------------
        // Basic Helpers
        // --------------------------------------------------------------------------
        function isType(node, type) {
            return node && node.type === type;
        }

        function isIdentifier(node) {
            return isType(node, "Identifier");
        }

        function isLiteral(node) {
            return isType(node, "Literal");
        }

        function isProperty(node) {
            return isType(node, "Property");
        }

        function isMember(node) {
            return isType(node, "MemberExpression");
        }

        function isObject(node) {
            return isType(node, "ObjectExpression");
        }

        function contains(a, obj) {
            for (var i = 0; i < a.length; i++) {
                if (obj === a[i]) {
                    return true;
                }
            }
            return false;
        }

        function isNumber(i) {
            return Number(i) === i && i % 1 === 0;
        }

        function isInRange(node) {
            return isNumber(node) && node > MIN && node < MAX;
        }

        function isInteresting(node) {
            var callee = node.callee;
            if (isMember(callee)) {
                if (isIdentifier(callee.property) && contains(INTERESTING_METHODS, callee.property.name)) {
                    return true;
                }
            }
            return false;
        }

        /*
         * @returns true if the parameters of the given functionCall are not critical.
         * */
        function isValid(node) {
            var args = node.arguments;
            if (args && args.length > 0) {
                // get firtst argument
                var argument = args[0];
                if (isObject(argument)) {
                    var propertyList = argument.properties;
                    // argument is object literal, check every property
                    for (var key in propertyList) {
                        if (propertyList.hasOwnProperty(key)) {
                            var property = propertyList[key];
                            if (isProperty(property)
                                && INTERESTING_KEY === property.key.name
                                && isLiteral(property.value)) {
                                // check if value is in range
                                return !isInRange(property.value.value);
                            }
                        }
                    }
                } else {
                    // argument is single literal
                    // check if value is in range
                    return !isInRange(argument.value);
                }
            }
            return true;
        }

        return {
            "CallExpression": function(node) {
                if (isInteresting(node) && !isValid(node)) {
                    context.report(node, MSG);
                }
            }
        };
    }
};
