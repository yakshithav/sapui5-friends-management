
// ------------------------------------------------------------------------------
// Rule Disablement
// ------------------------------------------------------------------------------
/* eslint-disable strict */
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------
module.exports = {
    create: function (context) {
        "use strict";
        var MSG = "Invalid content for SimpleForm / Form / SmartForm.";
        var INTERESTING_METHODS = ["SimpleForm", "Form", "SmartForm"];
        var INTERESTING_METHODS_CONTENT = ["Table", "HBox", "VBox", "VerticalLayout"];
        var INTERESTING_PROPERTY_NAMES = ["formContainers", "groups", "FormContainer", "Group", "formElements", "groupElements", "FormElement", "GroupElement", "elements", "fields"]
        // --------------------------------------------------------------------------
        // Basic Helpers
        // --------------------------------------------------------------------------
        function isType(node, type) {
            return node && node.type === type;
        }
        function isIdentifier(node) {
            return isType(node, "Identifier");
        }
        function isLiteral(node) {
            return isType(node, "Literal");
        }
        function isProperty(node) {
            return isType(node, "Property");
        }
        function isMember(node) {
            return isType(node, "MemberExpression");
        }
        function isNewExpression(node) {
            return isType(node, "NewExpression");
        }
        function isArrayExpression(node) {
            return isType(node, "ArrayExpression");
        }
        function isObjectExpression(node) {
            return isType(node, "ObjectExpression");
        }
        function isObject(node) {
            return isType(node, "ObjectExpression");
        }
        function contains(a, obj) {
            for (var i = 0; i < a.length; i++) {
                if (obj === a[i]) {
                    return true;
                }
            }
            return false;
        }
        function isNumber(i) {
            return Number(i) === i && i % 1 === 0;
        }
        function isInteresting(node) {
            var callee = node.callee;
            if (isMember(callee) && contains(INTERESTING_METHODS, callee.property.name)) {
                var argumentsNewExpression = node.arguments;
                for (let i = 0; i < argumentsNewExpression.length; i++) {
                    if (isObjectExpression(argumentsNewExpression[i])) {
                        var properties = argumentsNewExpression[i].properties;
                        for (let j = 0; j < properties.length; j++) {
                            if (isIdentifier(properties[j].key) && isArrayExpression(properties[j].value) &&  properties[j].key.name == "content") {
                                var propertyValueElements = properties[j].value.elements;
                                for (let k = 0; k < propertyValueElements.length; k++) {
                                    if (isNewExpression(propertyValueElements[k])) {
                                        var calleeNewExpression = propertyValueElements[k].callee;
                                        if (isMember(calleeNewExpression) && contains(INTERESTING_METHODS_CONTENT, calleeNewExpression.property.name) ) {
                                            return true;
                                           
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (isMember(callee) && contains(INTERESTING_PROPERTY_NAMES, callee.property.name)) {
                var valueElementArgs = node.arguments;
                for (let p = 0; p < valueElementArgs.length; p++) {
                    if (isObjectExpression(valueElementArgs[p])) {
                        var argProperties2 = valueElementArgs[p].properties;
                        for (let q = 0; q < argProperties2.length; q++) {
                            if (contains(INTERESTING_PROPERTY_NAMES, argProperties2[q].key.name) && isArrayExpression(argProperties2[q].value)) {
                                var argPropElements = argProperties2[q].value.elements;
                                for (let r = 0; r < argPropElements.length; r++) {
                                    if (isNewExpression(argPropElements[r])) {
                                        var calleeToCheck = argPropElements[r].callee;
                                        if (isMember(calleeToCheck) && contains(INTERESTING_METHODS_CONTENT, calleeToCheck.property.name)) {
                                            return true;
                                            
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }


        return {
            "NewExpression": function (node) {
                if (isInteresting(node)) {
                    context.report(node, MSG);
                }
            }
        };
    }
};
