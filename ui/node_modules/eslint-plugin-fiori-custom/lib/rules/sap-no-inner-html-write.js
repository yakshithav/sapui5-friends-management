/**
 * @fileoverview Detect the overriding of the innerHTML.
 * @author Christopher Fenner (D065687)
 * @ESLint Version 0.8.0 / March 2016
 */

// ------------------------------------------------------------------------------
// Rule Disablement
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// Invoking global form of strict mode syntax for whole script
// ------------------------------------------------------------------------------
/*eslint-disable strict*/
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------
module.exports = {
    create: function(context) {
        "use strict";
        var MESSAGE = "Writing to the inner html is not allowed.";
        // --------------------------------------------------------------------------
        // Basic Helpers
        // --------------------------------------------------------------------------
        function isType(node, type) {
            return node && node.type === type;
        }

        function isLiteral(node) {
            return isType(node, "Literal");
        }

        function isIdentifier(node) {
            return isType(node, "Identifier");
        }

        function isMember(node) {
            return isType(node, "MemberExpression");
        }

        // --------------------------------------------------------------------------
        // Helpers
        // --------------------------------------------------------------------------

        function isInteresting(left) {
            return isMember(left);
        }

        function isValid(property) {
            // anything is valid, except 'innerHTML'
            if (isIdentifier(property)) {
                return property.name !== "innerHTML";
            } else if (isLiteral(property)) {
                return property.value !== "innerHTML";
            }
            return true;
        }

        // --------------------------------------------------------------------------
        // Public
        // --------------------------------------------------------------------------
        return {
            "AssignmentExpression": function(node) {
                if (isInteresting(node.left) && !isValid(node.left.property)) {
                    context.report(node, MESSAGE);
                }
            }
        };
    }
};
